// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace gip.mes.datamodel
{
    internal partial class VBGroupRightEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "gip.mes.datamodel.VBGroupRight",
                typeof(VBGroupRight),
                baseEntityType,
                indexerPropertyInfo: RuntimeEntityType.FindIndexerProperty(typeof(VBGroupRight)));

            var vBGroupRightID = runtimeEntityType.AddProperty(
                "VBGroupRightID",
                typeof(Guid),
                propertyInfo: typeof(VBGroupRight).GetProperty("VBGroupRightID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VBGroupRight).GetField("_VBGroupRightID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            vBGroupRightID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var aCClassDesignID = runtimeEntityType.AddProperty(
                "ACClassDesignID",
                typeof(Guid?),
                propertyInfo: typeof(VBGroupRight).GetProperty("ACClassDesignID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VBGroupRight).GetField("_ACClassDesignID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            aCClassDesignID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var aCClassID = runtimeEntityType.AddProperty(
                "ACClassID",
                typeof(Guid),
                propertyInfo: typeof(VBGroupRight).GetProperty("ACClassID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VBGroupRight).GetField("_ACClassID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            aCClassID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var aCClassMethodID = runtimeEntityType.AddProperty(
                "ACClassMethodID",
                typeof(Guid?),
                propertyInfo: typeof(VBGroupRight).GetProperty("ACClassMethodID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VBGroupRight).GetField("_ACClassMethodID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            aCClassMethodID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var aCClassPropertyID = runtimeEntityType.AddProperty(
                "ACClassPropertyID",
                typeof(Guid?),
                propertyInfo: typeof(VBGroupRight).GetProperty("ACClassPropertyID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VBGroupRight).GetField("_ACClassPropertyID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            aCClassPropertyID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var controlModeIndex = runtimeEntityType.AddProperty(
                "ControlModeIndex",
                typeof(short),
                propertyInfo: typeof(VBGroupRight).GetProperty("ControlModeIndex", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VBGroupRight).GetField("_ControlModeIndex", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            controlModeIndex.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vBGroupID = runtimeEntityType.AddProperty(
                "VBGroupID",
                typeof(Guid),
                propertyInfo: typeof(VBGroupRight).GetProperty("VBGroupID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VBGroupRight).GetField("_VBGroupID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            vBGroupID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lazyLoader = runtimeEntityType.AddServiceProperty(
                "LazyLoader",
                propertyInfo: typeof(VBGroupRight).GetProperty("LazyLoader", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var key = runtimeEntityType.AddKey(
                new[] { vBGroupRightID });
            runtimeEntityType.SetPrimaryKey(key);

            var nCIFKVBGroupRightACClassDesignID = runtimeEntityType.AddIndex(
                new[] { aCClassDesignID },
                name: "NCI_FK_VBGroupRight_ACClassDesignID");

            var nCIFKVBGroupRightACClassID = runtimeEntityType.AddIndex(
                new[] { aCClassID },
                name: "NCI_FK_VBGroupRight_ACClassID");

            var nCIFKVBGroupRightACClassMethodID = runtimeEntityType.AddIndex(
                new[] { aCClassMethodID },
                name: "NCI_FK_VBGroupRight_ACClassMethodID");

            var nCIFKVBGroupRightACClassPropertyID = runtimeEntityType.AddIndex(
                new[] { aCClassPropertyID },
                name: "NCI_FK_VBGroupRight_ACClassPropertyID");

            var nCIFKVBGroupRightVBGroupID = runtimeEntityType.AddIndex(
                new[] { vBGroupID },
                name: "NCI_FK_VBGroupRight_VBGroupID");

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ACClassDesignID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ACClassDesignID") }),
                principalEntityType);

            var aCClassDesign = declaringEntityType.AddNavigation("ACClassDesign",
                runtimeForeignKey,
                onDependent: true,
                typeof(ACClassDesign),
                propertyInfo: typeof(VBGroupRight).GetProperty("ACClassDesign", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VBGroupRight).GetField("_ACClassDesign", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var vBGroupRightACClassDesign = principalEntityType.AddNavigation("VBGroupRight_ACClassDesign",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<VBGroupRight>),
                propertyInfo: typeof(ACClassDesign).GetProperty("VBGroupRight_ACClassDesign", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ACClassDesign).GetField("_VBGroupRight_ACClassDesign", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VBGroupRight_ACClassDesignID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ACClassID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ACClassID") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var aCClass = declaringEntityType.AddNavigation("ACClass",
                runtimeForeignKey,
                onDependent: true,
                typeof(ACClass),
                propertyInfo: typeof(VBGroupRight).GetProperty("ACClass", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VBGroupRight).GetField("_ACClass", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var vBGroupRightACClass = principalEntityType.AddNavigation("VBGroupRight_ACClass",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<VBGroupRight>),
                propertyInfo: typeof(ACClass).GetProperty("VBGroupRight_ACClass", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ACClass).GetField("_VBGroupRight_ACClass", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VBGroupRight_ACClassID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ACClassMethodID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ACClassMethodID") }),
                principalEntityType);

            var aCClassMethod = declaringEntityType.AddNavigation("ACClassMethod",
                runtimeForeignKey,
                onDependent: true,
                typeof(ACClassMethod),
                propertyInfo: typeof(VBGroupRight).GetProperty("ACClassMethod", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VBGroupRight).GetField("_ACClassMethod", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var vBGroupRightACClassMethod = principalEntityType.AddNavigation("VBGroupRight_ACClassMethod",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<VBGroupRight>),
                propertyInfo: typeof(ACClassMethod).GetProperty("VBGroupRight_ACClassMethod", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ACClassMethod).GetField("_VBGroupRight_ACClassMethod", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VBGroupRight_ACClassMethodID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ACClassPropertyID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ACClassPropertyID") }),
                principalEntityType);

            var aCClassProperty = declaringEntityType.AddNavigation("ACClassProperty",
                runtimeForeignKey,
                onDependent: true,
                typeof(ACClassProperty),
                propertyInfo: typeof(VBGroupRight).GetProperty("ACClassProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VBGroupRight).GetField("_ACClassProperty", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var vBGroupRightACClassProperty = principalEntityType.AddNavigation("VBGroupRight_ACClassProperty",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<VBGroupRight>),
                propertyInfo: typeof(ACClassProperty).GetProperty("VBGroupRight_ACClassProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ACClassProperty).GetField("_VBGroupRight_ACClassProperty", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VBGroupRight_ACClassPropertyID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("VBGroupID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("VBGroupID") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var vBGroup = declaringEntityType.AddNavigation("VBGroup",
                runtimeForeignKey,
                onDependent: true,
                typeof(VBGroup),
                propertyInfo: typeof(VBGroupRight).GetProperty("VBGroup", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VBGroupRight).GetField("_VBGroup", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var vBGroupRightVBGroup = principalEntityType.AddNavigation("VBGroupRight_VBGroup",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<VBGroupRight>),
                propertyInfo: typeof(VBGroup).GetProperty("VBGroupRight_VBGroup", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VBGroup).GetField("_VBGroupRight_VBGroup", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VBGroupRight_VBGroupID");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "VBGroupRight");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
