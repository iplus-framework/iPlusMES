// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using gip.core.datamodel;

#pragma warning disable 219, 612, 618
#nullable disable

namespace gip.mes.datamodel
{
    internal partial class VisitorVoucherEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "gip.mes.datamodel.VisitorVoucher",
                typeof(VisitorVoucher),
                baseEntityType,
                indexerPropertyInfo: RuntimeEntityType.FindIndexerProperty(typeof(VisitorVoucher)));

            var visitorVoucherID = runtimeEntityType.AddProperty(
                "VisitorVoucherID",
                typeof(Guid),
                propertyInfo: typeof(VisitorVoucher).GetProperty("VisitorVoucherID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VisitorVoucher).GetField("_VisitorVoucherID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            visitorVoucherID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var checkInDate = runtimeEntityType.AddProperty(
                "CheckInDate",
                typeof(DateTime),
                propertyInfo: typeof(VisitorVoucher).GetProperty("CheckInDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VisitorVoucher).GetField("_CheckInDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            checkInDate.AddAnnotation("Relational:ColumnType", "datetime");
            checkInDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var checkOutDate = runtimeEntityType.AddProperty(
                "CheckOutDate",
                typeof(DateTime?),
                propertyInfo: typeof(VisitorVoucher).GetProperty("CheckOutDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VisitorVoucher).GetField("_CheckOutDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            checkOutDate.AddAnnotation("Relational:ColumnType", "datetime");
            checkOutDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var emptyWeight = runtimeEntityType.AddProperty(
                "EmptyWeight",
                typeof(double),
                propertyInfo: typeof(VisitorVoucher).GetProperty("EmptyWeight", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VisitorVoucher).GetField("_EmptyWeight", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            emptyWeight.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insertDate = runtimeEntityType.AddProperty(
                "InsertDate",
                typeof(DateTime),
                propertyInfo: typeof(VisitorVoucher).GetProperty("InsertDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VisitorVoucher).GetField("_InsertDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            insertDate.AddAnnotation("Relational:ColumnType", "datetime");
            insertDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insertName = runtimeEntityType.AddProperty(
                "InsertName",
                typeof(string),
                propertyInfo: typeof(VisitorVoucher).GetProperty("InsertName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VisitorVoucher).GetField("_InsertName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 20,
                unicode: false);
            insertName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lossWeight = runtimeEntityType.AddProperty(
                "LossWeight",
                typeof(double),
                propertyInfo: typeof(VisitorVoucher).GetProperty("LossWeight", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VisitorVoucher).GetField("_LossWeight", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            lossWeight.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDVisitorCardID = runtimeEntityType.AddProperty(
                "MDVisitorCardID",
                typeof(Guid?),
                propertyInfo: typeof(VisitorVoucher).GetProperty("MDVisitorCardID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VisitorVoucher).GetField("_MDVisitorCardID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            mDVisitorCardID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDVisitorVoucherStateID = runtimeEntityType.AddProperty(
                "MDVisitorVoucherStateID",
                typeof(Guid),
                propertyInfo: typeof(VisitorVoucher).GetProperty("MDVisitorVoucherStateID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VisitorVoucher).GetField("_MDVisitorVoucherStateID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            mDVisitorVoucherStateID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var netWeight = runtimeEntityType.AddProperty(
                "NetWeight",
                typeof(double),
                propertyInfo: typeof(VisitorVoucher).GetProperty("NetWeight", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VisitorVoucher).GetField("_NetWeight", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            netWeight.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var totalWeight = runtimeEntityType.AddProperty(
                "TotalWeight",
                typeof(double),
                propertyInfo: typeof(VisitorVoucher).GetProperty("TotalWeight", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VisitorVoucher).GetField("_TotalWeight", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            totalWeight.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var trailerFacilityID = runtimeEntityType.AddProperty(
                "TrailerFacilityID",
                typeof(Guid?),
                propertyInfo: typeof(VisitorVoucher).GetProperty("TrailerFacilityID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VisitorVoucher).GetField("_TrailerFacilityID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            trailerFacilityID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var updateDate = runtimeEntityType.AddProperty(
                "UpdateDate",
                typeof(DateTime),
                propertyInfo: typeof(VisitorVoucher).GetProperty("UpdateDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VisitorVoucher).GetField("_UpdateDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            updateDate.AddAnnotation("Relational:ColumnType", "datetime");
            updateDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var updateName = runtimeEntityType.AddProperty(
                "UpdateName",
                typeof(string),
                propertyInfo: typeof(VisitorVoucher).GetProperty("UpdateName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VisitorVoucher).GetField("_UpdateName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 20,
                unicode: false);
            updateName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleFacilityID = runtimeEntityType.AddProperty(
                "VehicleFacilityID",
                typeof(Guid?),
                propertyInfo: typeof(VisitorVoucher).GetProperty("VehicleFacilityID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VisitorVoucher).GetField("_VehicleFacilityID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleFacilityID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var visitorCompanyID = runtimeEntityType.AddProperty(
                "VisitorCompanyID",
                typeof(Guid?),
                propertyInfo: typeof(VisitorVoucher).GetProperty("VisitorCompanyID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VisitorVoucher).GetField("_VisitorCompanyID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            visitorCompanyID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var visitorCompanyPersonID = runtimeEntityType.AddProperty(
                "VisitorCompanyPersonID",
                typeof(Guid?),
                propertyInfo: typeof(VisitorVoucher).GetProperty("VisitorCompanyPersonID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VisitorVoucher).GetField("_VisitorCompanyPersonID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            visitorCompanyPersonID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var visitorID = runtimeEntityType.AddProperty(
                "VisitorID",
                typeof(Guid),
                propertyInfo: typeof(VisitorVoucher).GetProperty("VisitorID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VisitorVoucher).GetField("_VisitorID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            visitorID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var visitorVoucherNo = runtimeEntityType.AddProperty(
                "VisitorVoucherNo",
                typeof(int),
                propertyInfo: typeof(VisitorVoucher).GetProperty("VisitorVoucherNo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VisitorVoucher).GetField("_VisitorVoucherNo", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            visitorVoucherNo.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var weighingID = runtimeEntityType.AddProperty(
                "WeighingID",
                typeof(Guid?),
                propertyInfo: typeof(VisitorVoucher).GetProperty("WeighingID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VisitorVoucher).GetField("_WeighingID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            weighingID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var xMLConfig = runtimeEntityType.AddProperty(
                "XMLConfig",
                typeof(string),
                propertyInfo: typeof(VBEntityObject).GetProperty("XMLConfig", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VisitorVoucher).GetField("_XMLConfig", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            xMLConfig.AddAnnotation("Relational:ColumnType", "text");
            xMLConfig.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lazyLoader = runtimeEntityType.AddServiceProperty(
                "LazyLoader",
                propertyInfo: typeof(VisitorVoucher).GetProperty("LazyLoader", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var key = runtimeEntityType.AddKey(
                new[] { visitorVoucherID });
            runtimeEntityType.SetPrimaryKey(key);

            var nCIFKVisitorVoucherMDVisitorCardID = runtimeEntityType.AddIndex(
                new[] { mDVisitorCardID },
                name: "NCI_FK_VisitorVoucher_MDVisitorCardID");

            var nCIFKVisitorVoucherMDVisitorVoucherStateID = runtimeEntityType.AddIndex(
                new[] { mDVisitorVoucherStateID },
                name: "NCI_FK_VisitorVoucher_MDVisitorVoucherStateID");

            var nCIFKVisitorVoucherTrailerFacilityID = runtimeEntityType.AddIndex(
                new[] { trailerFacilityID },
                name: "NCI_FK_VisitorVoucher_TrailerFacilityID");

            var nCIFKVisitorVoucherVehicleFacilityID = runtimeEntityType.AddIndex(
                new[] { vehicleFacilityID },
                name: "NCI_FK_VisitorVoucher_VehicleFacilityID");

            var nCIFKVisitorVoucherVisitorCompanyID = runtimeEntityType.AddIndex(
                new[] { visitorCompanyID },
                name: "NCI_FK_VisitorVoucher_VisitorCompanyID");

            var nCIFKVisitorVoucherVisitorCompanyPersonID = runtimeEntityType.AddIndex(
                new[] { visitorCompanyPersonID },
                name: "NCI_FK_VisitorVoucher_VisitorCompanyPersonID");

            var nCIFKVisitorVoucherVisitorID = runtimeEntityType.AddIndex(
                new[] { visitorID },
                name: "NCI_FK_VisitorVoucher_VisitorID");

            var nCIFKVisitorVoucherWeighingID = runtimeEntityType.AddIndex(
                new[] { weighingID },
                name: "NCI_FK_VisitorVoucher_WeighingID");

            var uIXVisitorVoucherVisitorVoucherNo = runtimeEntityType.AddIndex(
                new[] { visitorVoucherNo },
                name: "UIX_VisitorVoucher_VisitorVoucherNo",
                unique: true);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDVisitorCardID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDVisitorCardID") }),
                principalEntityType);

            var mDVisitorCard = declaringEntityType.AddNavigation("MDVisitorCard",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDVisitorCard),
                propertyInfo: typeof(VisitorVoucher).GetProperty("MDVisitorCard", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VisitorVoucher).GetField("_MDVisitorCard", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var visitorVoucherMDVisitorCard = principalEntityType.AddNavigation("VisitorVoucher_MDVisitorCard",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VisitorVoucher>),
                propertyInfo: typeof(MDVisitorCard).GetProperty("VisitorVoucher_MDVisitorCard", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDVisitorCard).GetField("_VisitorVoucher_MDVisitorCard", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VisitorVoucher_MDVisitorCardID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDVisitorVoucherStateID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDVisitorVoucherStateID") }),
                principalEntityType,
                required: true);

            var mDVisitorVoucherState = declaringEntityType.AddNavigation("MDVisitorVoucherState",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDVisitorVoucherState),
                propertyInfo: typeof(VisitorVoucher).GetProperty("MDVisitorVoucherState", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VisitorVoucher).GetField("_MDVisitorVoucherState", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var visitorVoucherMDVisitorVoucherState = principalEntityType.AddNavigation("VisitorVoucher_MDVisitorVoucherState",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VisitorVoucher>),
                propertyInfo: typeof(MDVisitorVoucherState).GetProperty("VisitorVoucher_MDVisitorVoucherState", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDVisitorVoucherState).GetField("_VisitorVoucher_MDVisitorVoucherState", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VisitorVoucher_MDVisitorVoucherStateID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("TrailerFacilityID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FacilityID") }),
                principalEntityType);

            var trailerFacility = declaringEntityType.AddNavigation("TrailerFacility",
                runtimeForeignKey,
                onDependent: true,
                typeof(Facility),
                propertyInfo: typeof(VisitorVoucher).GetProperty("TrailerFacility", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VisitorVoucher).GetField("_TrailerFacility", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var visitorVoucherTrailerFacility = principalEntityType.AddNavigation("VisitorVoucher_TrailerFacility",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VisitorVoucher>),
                propertyInfo: typeof(Facility).GetProperty("VisitorVoucher_TrailerFacility", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Facility).GetField("_VisitorVoucher_TrailerFacility", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VisitorVoucher_TrailerFacilityID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("VehicleFacilityID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FacilityID") }),
                principalEntityType);

            var vehicleFacility = declaringEntityType.AddNavigation("VehicleFacility",
                runtimeForeignKey,
                onDependent: true,
                typeof(Facility),
                propertyInfo: typeof(VisitorVoucher).GetProperty("VehicleFacility", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VisitorVoucher).GetField("_VehicleFacility", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var visitorVoucherVehicleFacility = principalEntityType.AddNavigation("VisitorVoucher_VehicleFacility",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VisitorVoucher>),
                propertyInfo: typeof(Facility).GetProperty("VisitorVoucher_VehicleFacility", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Facility).GetField("_VisitorVoucher_VehicleFacility", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VisitorVoucher_VehicleFacilityID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("VisitorCompanyID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CompanyID") }),
                principalEntityType);

            var visitorCompany = declaringEntityType.AddNavigation("VisitorCompany",
                runtimeForeignKey,
                onDependent: true,
                typeof(Company),
                propertyInfo: typeof(VisitorVoucher).GetProperty("VisitorCompany", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VisitorVoucher).GetField("_VisitorCompany", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var visitorVoucherVisitorCompany = principalEntityType.AddNavigation("VisitorVoucher_VisitorCompany",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VisitorVoucher>),
                propertyInfo: typeof(Company).GetProperty("VisitorVoucher_VisitorCompany", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Company).GetField("_VisitorVoucher_VisitorCompany", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VisitorVoucher_VisitorCompanyID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("VisitorCompanyPersonID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CompanyPersonID") }),
                principalEntityType);

            var visitorCompanyPerson = declaringEntityType.AddNavigation("VisitorCompanyPerson",
                runtimeForeignKey,
                onDependent: true,
                typeof(CompanyPerson),
                propertyInfo: typeof(VisitorVoucher).GetProperty("VisitorCompanyPerson", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VisitorVoucher).GetField("_VisitorCompanyPerson", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var visitorVoucherVisitorCompanyPerson = principalEntityType.AddNavigation("VisitorVoucher_VisitorCompanyPerson",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VisitorVoucher>),
                propertyInfo: typeof(CompanyPerson).GetProperty("VisitorVoucher_VisitorCompanyPerson", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompanyPerson).GetField("_VisitorVoucher_VisitorCompanyPerson", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VisitorVoucher_VisitorCompanyPersonID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("VisitorID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("VisitorID") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var visitor = declaringEntityType.AddNavigation("Visitor",
                runtimeForeignKey,
                onDependent: true,
                typeof(Visitor),
                propertyInfo: typeof(VisitorVoucher).GetProperty("Visitor", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VisitorVoucher).GetField("_Visitor", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var visitorVoucherVisitor = principalEntityType.AddNavigation("VisitorVoucher_Visitor",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VisitorVoucher>),
                propertyInfo: typeof(Visitor).GetProperty("VisitorVoucher_Visitor", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Visitor).GetField("_VisitorVoucher_Visitor", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VisitorVoucher_VisitorID");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "VisitorVoucher");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
