// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using gip.core.datamodel;

#pragma warning disable 219, 612, 618
#nullable disable

namespace gip.mes.datamodel
{
    internal partial class MaterialEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "gip.mes.datamodel.Material",
                typeof(Material),
                baseEntityType,
                indexerPropertyInfo: RuntimeEntityType.FindIndexerProperty(typeof(Material)));

            var materialID = runtimeEntityType.AddProperty(
                "MaterialID",
                typeof(Guid),
                propertyInfo: typeof(Material).GetProperty("MaterialID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_MaterialID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            materialID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var anterograde = runtimeEntityType.AddProperty(
                "Anterograde",
                typeof(bool?),
                propertyInfo: typeof(Material).GetProperty("Anterograde", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_Anterograde", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            anterograde.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var baseMDUnitID = runtimeEntityType.AddProperty(
                "BaseMDUnitID",
                typeof(Guid),
                propertyInfo: typeof(Material).GetProperty("BaseMDUnitID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_BaseMDUnitID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            baseMDUnitID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var comment = runtimeEntityType.AddProperty(
                "Comment",
                typeof(string),
                propertyInfo: typeof(Material).GetProperty("Comment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_Comment", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                unicode: false);
            comment.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var contractorStock = runtimeEntityType.AddProperty(
                "ContractorStock",
                typeof(bool),
                propertyInfo: typeof(Material).GetProperty("ContractorStock", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_ContractorStock", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            contractorStock.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var density = runtimeEntityType.AddProperty(
                "Density",
                typeof(double),
                propertyInfo: typeof(Material).GetProperty("Density", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_Density", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            density.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var densityAmb = runtimeEntityType.AddProperty(
                "DensityAmb",
                typeof(double),
                propertyInfo: typeof(Material).GetProperty("DensityAmb", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_DensityAmb", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            densityAmb.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var dontAllowNegativeStock = runtimeEntityType.AddProperty(
                "DontAllowNegativeStock",
                typeof(bool),
                propertyInfo: typeof(Material).GetProperty("DontAllowNegativeStock", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_DontAllowNegativeStock", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            dontAllowNegativeStock.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var excludeFromSumCalc = runtimeEntityType.AddProperty(
                "ExcludeFromSumCalc",
                typeof(bool),
                propertyInfo: typeof(Material).GetProperty("ExcludeFromSumCalc", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_ExcludeFromSumCalc", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            excludeFromSumCalc.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var explosionOff = runtimeEntityType.AddProperty(
                "ExplosionOff",
                typeof(bool?),
                propertyInfo: typeof(Material).GetProperty("ExplosionOff", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_ExplosionOff", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            explosionOff.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var grossWeight = runtimeEntityType.AddProperty(
                "GrossWeight",
                typeof(double),
                propertyInfo: typeof(Material).GetProperty("GrossWeight", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_GrossWeight", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            grossWeight.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inFacilityID = runtimeEntityType.AddProperty(
                "InFacilityID",
                typeof(Guid?),
                propertyInfo: typeof(Material).GetProperty("InFacilityID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_InFacilityID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            inFacilityID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insertDate = runtimeEntityType.AddProperty(
                "InsertDate",
                typeof(DateTime),
                propertyInfo: typeof(Material).GetProperty("InsertDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_InsertDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            insertDate.AddAnnotation("Relational:ColumnType", "datetime");
            insertDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insertName = runtimeEntityType.AddProperty(
                "InsertName",
                typeof(string),
                propertyInfo: typeof(Material).GetProperty("InsertName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_InsertName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 20,
                unicode: false);
            insertName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isActive = runtimeEntityType.AddProperty(
                "IsActive",
                typeof(bool),
                propertyInfo: typeof(Material).GetProperty("IsActive", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_IsActive", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            isActive.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isIntermediate = runtimeEntityType.AddProperty(
                "IsIntermediate",
                typeof(bool),
                propertyInfo: typeof(Material).GetProperty("IsIntermediate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_IsIntermediate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            isIntermediate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var keyOfExtSys = runtimeEntityType.AddProperty(
                "KeyOfExtSys",
                typeof(string),
                propertyInfo: typeof(Material).GetProperty("KeyOfExtSys", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_KeyOfExtSys", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 40,
                unicode: false);
            keyOfExtSys.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var labelID = runtimeEntityType.AddProperty(
                "LabelID",
                typeof(Guid?),
                propertyInfo: typeof(Material).GetProperty("LabelID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_LabelID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            labelID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDFacilityManagementTypeID = runtimeEntityType.AddProperty(
                "MDFacilityManagementTypeID",
                typeof(Guid),
                propertyInfo: typeof(Material).GetProperty("MDFacilityManagementTypeID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_MDFacilityManagementTypeID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            mDFacilityManagementTypeID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDGMPMaterialGroupID = runtimeEntityType.AddProperty(
                "MDGMPMaterialGroupID",
                typeof(Guid?),
                propertyInfo: typeof(Material).GetProperty("MDGMPMaterialGroupID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_MDGMPMaterialGroupID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            mDGMPMaterialGroupID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDInventoryManagementTypeID = runtimeEntityType.AddProperty(
                "MDInventoryManagementTypeID",
                typeof(Guid),
                propertyInfo: typeof(Material).GetProperty("MDInventoryManagementTypeID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_MDInventoryManagementTypeID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            mDInventoryManagementTypeID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDMaterialGroupID = runtimeEntityType.AddProperty(
                "MDMaterialGroupID",
                typeof(Guid),
                propertyInfo: typeof(Material).GetProperty("MDMaterialGroupID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_MDMaterialGroupID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            mDMaterialGroupID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDMaterialTypeID = runtimeEntityType.AddProperty(
                "MDMaterialTypeID",
                typeof(Guid?),
                propertyInfo: typeof(Material).GetProperty("MDMaterialTypeID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_MDMaterialTypeID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            mDMaterialTypeID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var materialName1 = runtimeEntityType.AddProperty(
                "MaterialName1",
                typeof(string),
                propertyInfo: typeof(Material).GetProperty("MaterialName1", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_MaterialName1", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 350,
                unicode: false);
            materialName1.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var materialName2 = runtimeEntityType.AddProperty(
                "MaterialName2",
                typeof(string),
                propertyInfo: typeof(Material).GetProperty("MaterialName2", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_MaterialName2", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 350,
                unicode: false);
            materialName2.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var materialName3 = runtimeEntityType.AddProperty(
                "MaterialName3",
                typeof(string),
                propertyInfo: typeof(Material).GetProperty("MaterialName3", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_MaterialName3", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 350,
                unicode: false);
            materialName3.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var materialNo = runtimeEntityType.AddProperty(
                "MaterialNo",
                typeof(string),
                propertyInfo: typeof(Material).GetProperty("MaterialNo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_MaterialNo", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 30,
                unicode: false);
            materialNo.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var minStockQuantity = runtimeEntityType.AddProperty(
                "MinStockQuantity",
                typeof(double?),
                propertyInfo: typeof(Material).GetProperty("MinStockQuantity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_MinStockQuantity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            minStockQuantity.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var netWeight = runtimeEntityType.AddProperty(
                "NetWeight",
                typeof(double),
                propertyInfo: typeof(Material).GetProperty("NetWeight", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_NetWeight", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            netWeight.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var optStockQuantity = runtimeEntityType.AddProperty(
                "OptStockQuantity",
                typeof(double?),
                propertyInfo: typeof(Material).GetProperty("OptStockQuantity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_OptStockQuantity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            optStockQuantity.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outFacilityID = runtimeEntityType.AddProperty(
                "OutFacilityID",
                typeof(Guid?),
                propertyInfo: typeof(Material).GetProperty("OutFacilityID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_OutFacilityID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            outFacilityID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var petroleumGroupIndex = runtimeEntityType.AddProperty(
                "PetroleumGroupIndex",
                typeof(short),
                propertyInfo: typeof(Material).GetProperty("PetroleumGroupIndex", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_PetroleumGroupIndex", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            petroleumGroupIndex.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var productionMaterialID = runtimeEntityType.AddProperty(
                "ProductionMaterialID",
                typeof(Guid?),
                propertyInfo: typeof(Material).GetProperty("ProductionMaterialID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_ProductionMaterialID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            productionMaterialID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var productionWeight = runtimeEntityType.AddProperty(
                "ProductionWeight",
                typeof(double),
                propertyInfo: typeof(Material).GetProperty("ProductionWeight", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_ProductionWeight", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            productionWeight.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var retrogradeFIFO = runtimeEntityType.AddProperty(
                "RetrogradeFIFO",
                typeof(bool?),
                propertyInfo: typeof(Material).GetProperty("RetrogradeFIFO", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_RetrogradeFIFO", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            retrogradeFIFO.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var specHeatCapacity = runtimeEntityType.AddProperty(
                "SpecHeatCapacity",
                typeof(double),
                propertyInfo: typeof(Material).GetProperty("SpecHeatCapacity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_SpecHeatCapacity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            specHeatCapacity.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var storageLife = runtimeEntityType.AddProperty(
                "StorageLife",
                typeof(int),
                propertyInfo: typeof(Material).GetProperty("StorageLife", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_StorageLife", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            storageLife.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var updateDate = runtimeEntityType.AddProperty(
                "UpdateDate",
                typeof(DateTime),
                propertyInfo: typeof(Material).GetProperty("UpdateDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_UpdateDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            updateDate.AddAnnotation("Relational:ColumnType", "datetime");
            updateDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var updateName = runtimeEntityType.AddProperty(
                "UpdateName",
                typeof(string),
                propertyInfo: typeof(Material).GetProperty("UpdateName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_UpdateName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 20,
                unicode: false);
            updateName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var usageACProgram = runtimeEntityType.AddProperty(
                "UsageACProgram",
                typeof(bool),
                propertyInfo: typeof(Material).GetProperty("UsageACProgram", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_UsageACProgram", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            usageACProgram.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var usageInOrder = runtimeEntityType.AddProperty(
                "UsageInOrder",
                typeof(bool),
                propertyInfo: typeof(Material).GetProperty("UsageInOrder", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_UsageInOrder", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            usageInOrder.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var usageOutOrder = runtimeEntityType.AddProperty(
                "UsageOutOrder",
                typeof(bool),
                propertyInfo: typeof(Material).GetProperty("UsageOutOrder", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_UsageOutOrder", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            usageOutOrder.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var usageOwnProduct = runtimeEntityType.AddProperty(
                "UsageOwnProduct",
                typeof(bool?),
                propertyInfo: typeof(Material).GetProperty("UsageOwnProduct", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_UsageOwnProduct", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            usageOwnProduct.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vBiProgramACClassMethodID = runtimeEntityType.AddProperty(
                "VBiProgramACClassMethodID",
                typeof(Guid?),
                propertyInfo: typeof(Material).GetProperty("VBiProgramACClassMethodID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_VBiProgramACClassMethodID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vBiProgramACClassMethodID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vBiStackCalculatorACClassID = runtimeEntityType.AddProperty(
                "VBiStackCalculatorACClassID",
                typeof(Guid?),
                propertyInfo: typeof(Material).GetProperty("VBiStackCalculatorACClassID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_VBiStackCalculatorACClassID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vBiStackCalculatorACClassID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var xMLConfig = runtimeEntityType.AddProperty(
                "XMLConfig",
                typeof(string),
                propertyInfo: typeof(VBEntityObject).GetProperty("XMLConfig", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_XMLConfig", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            xMLConfig.AddAnnotation("Relational:ColumnType", "text");
            xMLConfig.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var zeroBookingTolerance = runtimeEntityType.AddProperty(
                "ZeroBookingTolerance",
                typeof(double),
                propertyInfo: typeof(Material).GetProperty("ZeroBookingTolerance", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_ZeroBookingTolerance", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            zeroBookingTolerance.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lazyLoader = runtimeEntityType.AddServiceProperty(
                "LazyLoader",
                propertyInfo: typeof(Material).GetProperty("LazyLoader", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var key = runtimeEntityType.AddKey(
                new[] { materialID });
            runtimeEntityType.SetPrimaryKey(key);

            var nCIFKMaterialBaseMDUnitID = runtimeEntityType.AddIndex(
                new[] { baseMDUnitID },
                name: "NCI_FK_Material_BaseMDUnitID");

            var nCIFKMaterialInFacilityID = runtimeEntityType.AddIndex(
                new[] { inFacilityID },
                name: "NCI_FK_Material_InFacilityID");

            var nCIFKMaterialLabelID = runtimeEntityType.AddIndex(
                new[] { labelID },
                name: "NCI_FK_Material_LabelID");

            var nCIFKMaterialMDFacilityManagementTypeID = runtimeEntityType.AddIndex(
                new[] { mDFacilityManagementTypeID },
                name: "NCI_FK_Material_MDFacilityManagementTypeID");

            var nCIFKMaterialMDGMPMaterialGroupID = runtimeEntityType.AddIndex(
                new[] { mDGMPMaterialGroupID },
                name: "NCI_FK_Material_MDGMPMaterialGroupID");

            var nCIFKMaterialMDInventoryManagementTypeID = runtimeEntityType.AddIndex(
                new[] { mDInventoryManagementTypeID },
                name: "NCI_FK_Material_MDInventoryManagementTypeID");

            var nCIFKMaterialMDMaterialGroupID = runtimeEntityType.AddIndex(
                new[] { mDMaterialGroupID },
                name: "NCI_FK_Material_MDMaterialGroupID");

            var nCIFKMaterialMDMaterialTypeID = runtimeEntityType.AddIndex(
                new[] { mDMaterialTypeID },
                name: "NCI_FK_Material_MDMaterialTypeID");

            var nCIFKMaterialOutFacilityID = runtimeEntityType.AddIndex(
                new[] { outFacilityID },
                name: "NCI_FK_Material_OutFacilityID");

            var nCIFKMaterialProductionMaterialID = runtimeEntityType.AddIndex(
                new[] { productionMaterialID },
                name: "NCI_FK_Material_ProductionMaterialID");

            var nCIFKMaterialVBiProgramACClassMethodID = runtimeEntityType.AddIndex(
                new[] { vBiProgramACClassMethodID },
                name: "NCI_FK_Material_VBiProgramACClassMethodID");

            var nCIFKMaterialVBiStackCalculatorACClassID = runtimeEntityType.AddIndex(
                new[] { vBiStackCalculatorACClassID },
                name: "NCI_FK_Material_VBiStackCalculatorACClassID");

            var nCILabOrderPosMaterialIDMDMaterialTypeID = runtimeEntityType.AddIndex(
                new[] { materialID, mDMaterialTypeID },
                name: "NCI_LabOrderPos_MaterialID_MDMaterialTypeID");

            var nCILabOrderPosMaterialIDMDMaterialTypeIDOT = runtimeEntityType.AddIndex(
                new[] { materialID, mDMaterialTypeID },
                name: "NCI_LabOrderPos_MaterialID_MDMaterialTypeID_OT");

            var uIXMaterial = runtimeEntityType.AddIndex(
                new[] { materialNo },
                name: "UIX_Material",
                unique: true);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("BaseMDUnitID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDUnitID") }),
                principalEntityType,
                required: true);

            var baseMDUnit = declaringEntityType.AddNavigation("BaseMDUnit",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDUnit),
                propertyInfo: typeof(Material).GetProperty("BaseMDUnit", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_BaseMDUnit", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var materialBaseMDUnit = principalEntityType.AddNavigation("Material_BaseMDUnit",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<Material>),
                propertyInfo: typeof(MDUnit).GetProperty("Material_BaseMDUnit", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDUnit).GetField("_Material_BaseMDUnit", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Material_BaseMDUnitID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("InFacilityID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FacilityID") }),
                principalEntityType);

            var inFacility = declaringEntityType.AddNavigation("InFacility",
                runtimeForeignKey,
                onDependent: true,
                typeof(Facility),
                propertyInfo: typeof(Material).GetProperty("InFacility", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_InFacility", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var materialInFacility = principalEntityType.AddNavigation("Material_InFacility",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<Material>),
                propertyInfo: typeof(Facility).GetProperty("Material_InFacility", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Facility).GetField("_Material_InFacility", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Material_InFacilityID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("LabelID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("LabelID") }),
                principalEntityType);

            var label = declaringEntityType.AddNavigation("Label",
                runtimeForeignKey,
                onDependent: true,
                typeof(Label),
                propertyInfo: typeof(Material).GetProperty("Label", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_Label", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var materialLabel = principalEntityType.AddNavigation("Material_Label",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<Material>),
                propertyInfo: typeof(Label).GetProperty("Material_Label", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Label).GetField("_Material_Label", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Material_Label");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDFacilityManagementTypeID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDFacilityManagementTypeID") }),
                principalEntityType,
                required: true);

            var mDFacilityManagementType = declaringEntityType.AddNavigation("MDFacilityManagementType",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDFacilityManagementType),
                propertyInfo: typeof(Material).GetProperty("MDFacilityManagementType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_MDFacilityManagementType", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var materialMDFacilityManagementType = principalEntityType.AddNavigation("Material_MDFacilityManagementType",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<Material>),
                propertyInfo: typeof(MDFacilityManagementType).GetProperty("Material_MDFacilityManagementType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDFacilityManagementType).GetField("_Material_MDFacilityManagementType", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Material_MDFacilityManagementTypeID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDGMPMaterialGroupID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDGMPMaterialGroupID") }),
                principalEntityType);

            var mDGMPMaterialGroup = declaringEntityType.AddNavigation("MDGMPMaterialGroup",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDGMPMaterialGroup),
                propertyInfo: typeof(Material).GetProperty("MDGMPMaterialGroup", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_MDGMPMaterialGroup", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var materialMDGMPMaterialGroup = principalEntityType.AddNavigation("Material_MDGMPMaterialGroup",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<Material>),
                propertyInfo: typeof(MDGMPMaterialGroup).GetProperty("Material_MDGMPMaterialGroup", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDGMPMaterialGroup).GetField("_Material_MDGMPMaterialGroup", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Material_MDGMPMaterialGroupID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDInventoryManagementTypeID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDInventoryManagementTypeID") }),
                principalEntityType,
                required: true);

            var mDInventoryManagementType = declaringEntityType.AddNavigation("MDInventoryManagementType",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDInventoryManagementType),
                propertyInfo: typeof(Material).GetProperty("MDInventoryManagementType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_MDInventoryManagementType", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var materialMDInventoryManagementType = principalEntityType.AddNavigation("Material_MDInventoryManagementType",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<Material>),
                propertyInfo: typeof(MDInventoryManagementType).GetProperty("Material_MDInventoryManagementType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDInventoryManagementType).GetField("_Material_MDInventoryManagementType", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Material_MDInventoryManagementTypeID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDMaterialGroupID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDMaterialGroupID") }),
                principalEntityType,
                required: true);

            var mDMaterialGroup = declaringEntityType.AddNavigation("MDMaterialGroup",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDMaterialGroup),
                propertyInfo: typeof(Material).GetProperty("MDMaterialGroup", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_MDMaterialGroup", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var materialMDMaterialGroup = principalEntityType.AddNavigation("Material_MDMaterialGroup",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<Material>),
                propertyInfo: typeof(MDMaterialGroup).GetProperty("Material_MDMaterialGroup", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDMaterialGroup).GetField("_Material_MDMaterialGroup", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Material_MDMaterialGroupID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey8(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDMaterialTypeID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDMaterialTypeID") }),
                principalEntityType);

            var mDMaterialType = declaringEntityType.AddNavigation("MDMaterialType",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDMaterialType),
                propertyInfo: typeof(Material).GetProperty("MDMaterialType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_MDMaterialType", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var materialMDMaterialType = principalEntityType.AddNavigation("Material_MDMaterialType",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<Material>),
                propertyInfo: typeof(MDMaterialType).GetProperty("Material_MDMaterialType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDMaterialType).GetField("_Material_MDMaterialType", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Material_MDMaterialTypeID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey9(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("OutFacilityID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FacilityID") }),
                principalEntityType);

            var outFacility = declaringEntityType.AddNavigation("OutFacility",
                runtimeForeignKey,
                onDependent: true,
                typeof(Facility),
                propertyInfo: typeof(Material).GetProperty("OutFacility", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_OutFacility", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var materialOutFacility = principalEntityType.AddNavigation("Material_OutFacility",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<Material>),
                propertyInfo: typeof(Facility).GetProperty("Material_OutFacility", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Facility).GetField("_Material_OutFacility", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Material_OutFacilityID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey10(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ProductionMaterialID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MaterialID") }),
                principalEntityType);

            var material1ProductionMaterial = declaringEntityType.AddNavigation("Material1_ProductionMaterial",
                runtimeForeignKey,
                onDependent: true,
                typeof(Material),
                propertyInfo: typeof(Material).GetProperty("Material1_ProductionMaterial", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_Material1_ProductionMaterial", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var materialProductionMaterial = principalEntityType.AddNavigation("Material_ProductionMaterial",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<Material>),
                propertyInfo: typeof(Material).GetProperty("Material_ProductionMaterial", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_Material_ProductionMaterial", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Material_ProductionMaterialID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey11(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("VBiProgramACClassMethodID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ACClassMethodID") }),
                principalEntityType);

            var vBiProgramACClassMethod = declaringEntityType.AddNavigation("VBiProgramACClassMethod",
                runtimeForeignKey,
                onDependent: true,
                typeof(ACClassMethod),
                propertyInfo: typeof(Material).GetProperty("VBiProgramACClassMethod", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_VBiProgramACClassMethod", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var materialVBiProgramACClassMethod = principalEntityType.AddNavigation("Material_VBiProgramACClassMethod",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<Material>),
                propertyInfo: typeof(ACClassMethod).GetProperty("Material_VBiProgramACClassMethod", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ACClassMethod).GetField("_Material_VBiProgramACClassMethod", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Material_ProgramACClassMethodID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey12(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("VBiStackCalculatorACClassID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ACClassID") }),
                principalEntityType);

            var vBiStackCalculatorACClass = declaringEntityType.AddNavigation("VBiStackCalculatorACClass",
                runtimeForeignKey,
                onDependent: true,
                typeof(ACClass),
                propertyInfo: typeof(Material).GetProperty("VBiStackCalculatorACClass", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_VBiStackCalculatorACClass", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var materialVBiStackCalculatorACClass = principalEntityType.AddNavigation("Material_VBiStackCalculatorACClass",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<Material>),
                propertyInfo: typeof(ACClass).GetProperty("Material_VBiStackCalculatorACClass", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ACClass).GetField("_Material_VBiStackCalculatorACClass", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Material_StackCalculatorACClassID");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Material");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
