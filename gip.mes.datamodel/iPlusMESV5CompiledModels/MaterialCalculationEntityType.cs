// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using gip.core.datamodel;

#pragma warning disable 219, 612, 618
#nullable disable

namespace gip.mes.datamodel
{
    internal partial class MaterialCalculationEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "gip.mes.datamodel.MaterialCalculation",
                typeof(MaterialCalculation),
                baseEntityType,
                indexerPropertyInfo: RuntimeEntityType.FindIndexerProperty(typeof(MaterialCalculation)));

            var materialCalculationID = runtimeEntityType.AddProperty(
                "MaterialCalculationID",
                typeof(Guid),
                propertyInfo: typeof(MaterialCalculation).GetProperty("MaterialCalculationID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialCalculation).GetField("_MaterialCalculationID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            materialCalculationID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var calculationDate = runtimeEntityType.AddProperty(
                "CalculationDate",
                typeof(DateTime),
                propertyInfo: typeof(MaterialCalculation).GetProperty("CalculationDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialCalculation).GetField("_CalculationDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            calculationDate.AddAnnotation("Relational:ColumnType", "datetime");
            calculationDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var costFix = runtimeEntityType.AddProperty(
                "CostFix",
                typeof(decimal),
                propertyInfo: typeof(MaterialCalculation).GetProperty("CostFix", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialCalculation).GetField("_CostFix", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            costFix.AddAnnotation("Relational:ColumnType", "money");
            costFix.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var costGeneral = runtimeEntityType.AddProperty(
                "CostGeneral",
                typeof(decimal),
                propertyInfo: typeof(MaterialCalculation).GetProperty("CostGeneral", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialCalculation).GetField("_CostGeneral", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            costGeneral.AddAnnotation("Relational:ColumnType", "money");
            costGeneral.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var costHandlingFix = runtimeEntityType.AddProperty(
                "CostHandlingFix",
                typeof(decimal),
                propertyInfo: typeof(MaterialCalculation).GetProperty("CostHandlingFix", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialCalculation).GetField("_CostHandlingFix", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            costHandlingFix.AddAnnotation("Relational:ColumnType", "money");
            costHandlingFix.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var costHandlingVar = runtimeEntityType.AddProperty(
                "CostHandlingVar",
                typeof(decimal),
                propertyInfo: typeof(MaterialCalculation).GetProperty("CostHandlingVar", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialCalculation).GetField("_CostHandlingVar", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            costHandlingVar.AddAnnotation("Relational:ColumnType", "money");
            costHandlingVar.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var costLoss = runtimeEntityType.AddProperty(
                "CostLoss",
                typeof(decimal),
                propertyInfo: typeof(MaterialCalculation).GetProperty("CostLoss", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialCalculation).GetField("_CostLoss", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            costLoss.AddAnnotation("Relational:ColumnType", "money");
            costLoss.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var costMat = runtimeEntityType.AddProperty(
                "CostMat",
                typeof(decimal),
                propertyInfo: typeof(MaterialCalculation).GetProperty("CostMat", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialCalculation).GetField("_CostMat", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            costMat.AddAnnotation("Relational:ColumnType", "money");
            costMat.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var costPack = runtimeEntityType.AddProperty(
                "CostPack",
                typeof(decimal),
                propertyInfo: typeof(MaterialCalculation).GetProperty("CostPack", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialCalculation).GetField("_CostPack", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            costPack.AddAnnotation("Relational:ColumnType", "money");
            costPack.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var costReQuantity = runtimeEntityType.AddProperty(
                "CostReQuantity",
                typeof(decimal),
                propertyInfo: typeof(MaterialCalculation).GetProperty("CostReQuantity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialCalculation).GetField("_CostReQuantity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            costReQuantity.AddAnnotation("Relational:ColumnType", "money");
            costReQuantity.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var costVar = runtimeEntityType.AddProperty(
                "CostVar",
                typeof(decimal),
                propertyInfo: typeof(MaterialCalculation).GetProperty("CostVar", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialCalculation).GetField("_CostVar", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            costVar.AddAnnotation("Relational:ColumnType", "money");
            costVar.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insertDate = runtimeEntityType.AddProperty(
                "InsertDate",
                typeof(DateTime),
                propertyInfo: typeof(MaterialCalculation).GetProperty("InsertDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialCalculation).GetField("_InsertDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            insertDate.AddAnnotation("Relational:ColumnType", "datetime");
            insertDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insertName = runtimeEntityType.AddProperty(
                "InsertName",
                typeof(string),
                propertyInfo: typeof(MaterialCalculation).GetProperty("InsertName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialCalculation).GetField("_InsertName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 20,
                unicode: false);
            insertName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var materialCalculationNo = runtimeEntityType.AddProperty(
                "MaterialCalculationNo",
                typeof(string),
                propertyInfo: typeof(MaterialCalculation).GetProperty("MaterialCalculationNo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialCalculation).GetField("_MaterialCalculationNo", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 20,
                unicode: false);
            materialCalculationNo.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var materialID = runtimeEntityType.AddProperty(
                "MaterialID",
                typeof(Guid),
                propertyInfo: typeof(MaterialCalculation).GetProperty("MaterialID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialCalculation).GetField("_MaterialID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            materialID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var productionQuantity = runtimeEntityType.AddProperty(
                "ProductionQuantity",
                typeof(double),
                propertyInfo: typeof(MaterialCalculation).GetProperty("ProductionQuantity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialCalculation).GetField("_ProductionQuantity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            productionQuantity.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var updateDate = runtimeEntityType.AddProperty(
                "UpdateDate",
                typeof(DateTime),
                propertyInfo: typeof(MaterialCalculation).GetProperty("UpdateDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialCalculation).GetField("_UpdateDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            updateDate.AddAnnotation("Relational:ColumnType", "datetime");
            updateDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var updateName = runtimeEntityType.AddProperty(
                "UpdateName",
                typeof(string),
                propertyInfo: typeof(MaterialCalculation).GetProperty("UpdateName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialCalculation).GetField("_UpdateName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 20,
                unicode: false);
            updateName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var validFromDate = runtimeEntityType.AddProperty(
                "ValidFromDate",
                typeof(DateTime),
                propertyInfo: typeof(MaterialCalculation).GetProperty("ValidFromDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialCalculation).GetField("_ValidFromDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            validFromDate.AddAnnotation("Relational:ColumnType", "datetime");
            validFromDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var validToDate = runtimeEntityType.AddProperty(
                "ValidToDate",
                typeof(DateTime),
                propertyInfo: typeof(MaterialCalculation).GetProperty("ValidToDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialCalculation).GetField("_ValidToDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            validToDate.AddAnnotation("Relational:ColumnType", "datetime");
            validToDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var xMLConfig = runtimeEntityType.AddProperty(
                "XMLConfig",
                typeof(string),
                propertyInfo: typeof(VBEntityObject).GetProperty("XMLConfig", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialCalculation).GetField("_XMLConfig", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            xMLConfig.AddAnnotation("Relational:ColumnType", "text");
            xMLConfig.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lazyLoader = runtimeEntityType.AddServiceProperty(
                "LazyLoader",
                propertyInfo: typeof(MaterialCalculation).GetProperty("LazyLoader", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var key = runtimeEntityType.AddKey(
                new[] { materialCalculationID });
            runtimeEntityType.SetPrimaryKey(key);

            var nCI_FK_MaterialCalculation_MaterialID = runtimeEntityType.AddIndex(
                new[] { materialID },
                name: "NCI_FK_MaterialCalculation_MaterialID");

            var uIX_MaterialCalculation_MaterialCalculationNo = runtimeEntityType.AddIndex(
                new[] { materialCalculationNo },
                name: "UIX_MaterialCalculation_MaterialCalculationNo",
                unique: true);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MaterialID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MaterialID") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var material = declaringEntityType.AddNavigation("Material",
                runtimeForeignKey,
                onDependent: true,
                typeof(Material),
                propertyInfo: typeof(MaterialCalculation).GetProperty("Material", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialCalculation).GetField("_Material", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var materialCalculation_Material = principalEntityType.AddNavigation("MaterialCalculation_Material",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<MaterialCalculation>),
                propertyInfo: typeof(Material).GetProperty("MaterialCalculation_Material", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_MaterialCalculation_Material", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_MaterialCalculation_MaterialID");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "MaterialCalculation");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
