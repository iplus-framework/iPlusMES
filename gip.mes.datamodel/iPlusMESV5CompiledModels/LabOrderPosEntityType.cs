// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using gip.core.datamodel;

#pragma warning disable 219, 612, 618
#nullable disable

namespace gip.mes.datamodel
{
    internal partial class LabOrderPosEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "gip.mes.datamodel.LabOrderPos",
                typeof(LabOrderPos),
                baseEntityType,
                indexerPropertyInfo: RuntimeEntityType.FindIndexerProperty(typeof(LabOrderPos)));

            var labOrderPosID = runtimeEntityType.AddProperty(
                "LabOrderPosID",
                typeof(Guid),
                propertyInfo: typeof(LabOrderPos).GetProperty("LabOrderPosID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LabOrderPos).GetField("_LabOrderPosID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            labOrderPosID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var actualValue = runtimeEntityType.AddProperty(
                "ActualValue",
                typeof(double?),
                propertyInfo: typeof(LabOrderPos).GetProperty("ActualValue", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LabOrderPos).GetField("_ActualValue", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            actualValue.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var comment = runtimeEntityType.AddProperty(
                "Comment",
                typeof(string),
                propertyInfo: typeof(LabOrderPos).GetProperty("Comment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LabOrderPos).GetField("_Comment", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                unicode: false);
            comment.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insertDate = runtimeEntityType.AddProperty(
                "InsertDate",
                typeof(DateTime),
                propertyInfo: typeof(LabOrderPos).GetProperty("InsertDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LabOrderPos).GetField("_InsertDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            insertDate.AddAnnotation("Relational:ColumnType", "datetime");
            insertDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insertName = runtimeEntityType.AddProperty(
                "InsertName",
                typeof(string),
                propertyInfo: typeof(LabOrderPos).GetProperty("InsertName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LabOrderPos).GetField("_InsertName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 20,
                unicode: false);
            insertName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var labOrderID = runtimeEntityType.AddProperty(
                "LabOrderID",
                typeof(Guid?),
                propertyInfo: typeof(LabOrderPos).GetProperty("LabOrderID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LabOrderPos).GetField("_LabOrderID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            labOrderID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lineNumber = runtimeEntityType.AddProperty(
                "LineNumber",
                typeof(string),
                propertyInfo: typeof(LabOrderPos).GetProperty("LineNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LabOrderPos).GetField("_LineNumber", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 10,
                unicode: false);
            lineNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDLabOrderPosStateID = runtimeEntityType.AddProperty(
                "MDLabOrderPosStateID",
                typeof(Guid?),
                propertyInfo: typeof(LabOrderPos).GetProperty("MDLabOrderPosStateID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LabOrderPos).GetField("_MDLabOrderPosStateID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            mDLabOrderPosStateID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDLabTagID = runtimeEntityType.AddProperty(
                "MDLabTagID",
                typeof(Guid),
                propertyInfo: typeof(LabOrderPos).GetProperty("MDLabTagID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LabOrderPos).GetField("_MDLabTagID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            mDLabTagID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var referenceValue = runtimeEntityType.AddProperty(
                "ReferenceValue",
                typeof(double?),
                propertyInfo: typeof(LabOrderPos).GetProperty("ReferenceValue", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LabOrderPos).GetField("_ReferenceValue", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            referenceValue.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var sequence = runtimeEntityType.AddProperty(
                "Sequence",
                typeof(int),
                propertyInfo: typeof(LabOrderPos).GetProperty("Sequence", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LabOrderPos).GetField("_Sequence", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            sequence.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var updateDate = runtimeEntityType.AddProperty(
                "UpdateDate",
                typeof(DateTime),
                propertyInfo: typeof(LabOrderPos).GetProperty("UpdateDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LabOrderPos).GetField("_UpdateDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            updateDate.AddAnnotation("Relational:ColumnType", "datetime");
            updateDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var updateName = runtimeEntityType.AddProperty(
                "UpdateName",
                typeof(string),
                propertyInfo: typeof(LabOrderPos).GetProperty("UpdateName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LabOrderPos).GetField("_UpdateName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 20,
                unicode: false);
            updateName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var valueMax = runtimeEntityType.AddProperty(
                "ValueMax",
                typeof(double?),
                propertyInfo: typeof(LabOrderPos).GetProperty("ValueMax", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LabOrderPos).GetField("_ValueMax", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            valueMax.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var valueMaxMax = runtimeEntityType.AddProperty(
                "ValueMaxMax",
                typeof(double?),
                propertyInfo: typeof(LabOrderPos).GetProperty("ValueMaxMax", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LabOrderPos).GetField("_ValueMaxMax", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            valueMaxMax.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var valueMin = runtimeEntityType.AddProperty(
                "ValueMin",
                typeof(double?),
                propertyInfo: typeof(LabOrderPos).GetProperty("ValueMin", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LabOrderPos).GetField("_ValueMin", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            valueMin.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var valueMinMin = runtimeEntityType.AddProperty(
                "ValueMinMin",
                typeof(double?),
                propertyInfo: typeof(LabOrderPos).GetProperty("ValueMinMin", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LabOrderPos).GetField("_ValueMinMin", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            valueMinMin.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var xMLConfig = runtimeEntityType.AddProperty(
                "XMLConfig",
                typeof(string),
                propertyInfo: typeof(VBEntityObject).GetProperty("XMLConfig", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LabOrderPos).GetField("_XMLConfig", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            xMLConfig.AddAnnotation("Relational:ColumnType", "text");
            xMLConfig.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lazyLoader = runtimeEntityType.AddServiceProperty(
                "LazyLoader",
                propertyInfo: typeof(LabOrderPos).GetProperty("LazyLoader", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var key = runtimeEntityType.AddKey(
                new[] { labOrderPosID });
            runtimeEntityType.SetPrimaryKey(key);

            var nCI_FK_LabOrderPos_LabOrderID = runtimeEntityType.AddIndex(
                new[] { labOrderID },
                name: "NCI_FK_LabOrderPos_LabOrderID");

            var nCI_FK_LabOrderPos_MDLabOrderPosStateID = runtimeEntityType.AddIndex(
                new[] { mDLabOrderPosStateID },
                name: "NCI_FK_LabOrderPos_MDLabOrderPosStateID");

            var nCI_FK_LabOrderPos_MDLabTagID = runtimeEntityType.AddIndex(
                new[] { mDLabTagID },
                name: "NCI_FK_LabOrderPos_MDLabTagID");

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("LabOrderID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("LabOrderID") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade);

            var labOrder = declaringEntityType.AddNavigation("LabOrder",
                runtimeForeignKey,
                onDependent: true,
                typeof(LabOrder),
                propertyInfo: typeof(LabOrderPos).GetProperty("LabOrder", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LabOrderPos).GetField("_LabOrder", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var labOrderPos_LabOrder = principalEntityType.AddNavigation("LabOrderPos_LabOrder",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<LabOrderPos>),
                propertyInfo: typeof(LabOrder).GetProperty("LabOrderPos_LabOrder", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LabOrder).GetField("_LabOrderPos_LabOrder", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_LabOrderPos_LabOrderID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDLabOrderPosStateID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDLabOrderPosStateID") }),
                principalEntityType);

            var mDLabOrderPosState = declaringEntityType.AddNavigation("MDLabOrderPosState",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDLabOrderPosState),
                propertyInfo: typeof(LabOrderPos).GetProperty("MDLabOrderPosState", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LabOrderPos).GetField("_MDLabOrderPosState", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var labOrderPos_MDLabOrderPosState = principalEntityType.AddNavigation("LabOrderPos_MDLabOrderPosState",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<LabOrderPos>),
                propertyInfo: typeof(MDLabOrderPosState).GetProperty("LabOrderPos_MDLabOrderPosState", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDLabOrderPosState).GetField("_LabOrderPos_MDLabOrderPosState", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_LabOrderPos_MDLabOrderPosStateID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDLabTagID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDLabTagID") }),
                principalEntityType,
                required: true);

            var mDLabTag = declaringEntityType.AddNavigation("MDLabTag",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDLabTag),
                propertyInfo: typeof(LabOrderPos).GetProperty("MDLabTag", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LabOrderPos).GetField("_MDLabTag", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var labOrderPos_MDLabTag = principalEntityType.AddNavigation("LabOrderPos_MDLabTag",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<LabOrderPos>),
                propertyInfo: typeof(MDLabTag).GetProperty("LabOrderPos_MDLabTag", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDLabTag).GetField("_LabOrderPos_MDLabTag", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_LabOrderPos_MDLabTag");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "LabOrderPos");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
