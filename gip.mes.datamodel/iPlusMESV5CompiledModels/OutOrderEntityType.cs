// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using gip.core.datamodel;

#pragma warning disable 219, 612, 618
#nullable disable

namespace gip.mes.datamodel
{
    internal partial class OutOrderEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "gip.mes.datamodel.OutOrder",
                typeof(OutOrder),
                baseEntityType,
                indexerPropertyInfo: RuntimeEntityType.FindIndexerProperty(typeof(OutOrder)));

            var outOrderID = runtimeEntityType.AddProperty(
                "OutOrderID",
                typeof(Guid),
                propertyInfo: typeof(OutOrder).GetProperty("OutOrderID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_OutOrderID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            outOrderID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var basedOnOutOfferID = runtimeEntityType.AddProperty(
                "BasedOnOutOfferID",
                typeof(Guid?),
                propertyInfo: typeof(OutOrder).GetProperty("BasedOnOutOfferID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_BasedOnOutOfferID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            basedOnOutOfferID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var billingCompanyAddressID = runtimeEntityType.AddProperty(
                "BillingCompanyAddressID",
                typeof(Guid?),
                propertyInfo: typeof(OutOrder).GetProperty("BillingCompanyAddressID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_BillingCompanyAddressID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            billingCompanyAddressID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var cPartnerCompanyID = runtimeEntityType.AddProperty(
                "CPartnerCompanyID",
                typeof(Guid?),
                propertyInfo: typeof(OutOrder).GetProperty("CPartnerCompanyID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_CPartnerCompanyID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            cPartnerCompanyID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var comment = runtimeEntityType.AddProperty(
                "Comment",
                typeof(string),
                propertyInfo: typeof(OutOrder).GetProperty("Comment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_Comment", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                unicode: false);
            comment.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var custOrderNo = runtimeEntityType.AddProperty(
                "CustOrderNo",
                typeof(string),
                propertyInfo: typeof(OutOrder).GetProperty("CustOrderNo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_CustOrderNo", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 20,
                unicode: false);
            custOrderNo.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var customerCompanyID = runtimeEntityType.AddProperty(
                "CustomerCompanyID",
                typeof(Guid),
                propertyInfo: typeof(OutOrder).GetProperty("CustomerCompanyID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_CustomerCompanyID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            customerCompanyID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var deliveryCompanyAddressID = runtimeEntityType.AddProperty(
                "DeliveryCompanyAddressID",
                typeof(Guid?),
                propertyInfo: typeof(OutOrder).GetProperty("DeliveryCompanyAddressID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_DeliveryCompanyAddressID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            deliveryCompanyAddressID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insertDate = runtimeEntityType.AddProperty(
                "InsertDate",
                typeof(DateTime),
                propertyInfo: typeof(OutOrder).GetProperty("InsertDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_InsertDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            insertDate.AddAnnotation("Relational:ColumnType", "datetime");
            insertDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insertName = runtimeEntityType.AddProperty(
                "InsertName",
                typeof(string),
                propertyInfo: typeof(OutOrder).GetProperty("InsertName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_InsertName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 20,
                unicode: false);
            insertName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var issuerCompanyAddressID = runtimeEntityType.AddProperty(
                "IssuerCompanyAddressID",
                typeof(Guid?),
                propertyInfo: typeof(OutOrder).GetProperty("IssuerCompanyAddressID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_IssuerCompanyAddressID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            issuerCompanyAddressID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var issuerCompanyPersonID = runtimeEntityType.AddProperty(
                "IssuerCompanyPersonID",
                typeof(Guid?),
                propertyInfo: typeof(OutOrder).GetProperty("IssuerCompanyPersonID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_IssuerCompanyPersonID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            issuerCompanyPersonID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var keyOfExtSys = runtimeEntityType.AddProperty(
                "KeyOfExtSys",
                typeof(string),
                propertyInfo: typeof(OutOrder).GetProperty("KeyOfExtSys", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_KeyOfExtSys", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 40,
                unicode: false);
            keyOfExtSys.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDCurrencyID = runtimeEntityType.AddProperty(
                "MDCurrencyID",
                typeof(Guid?),
                propertyInfo: typeof(OutOrder).GetProperty("MDCurrencyID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_MDCurrencyID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            mDCurrencyID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDDelivTypeID = runtimeEntityType.AddProperty(
                "MDDelivTypeID",
                typeof(Guid),
                propertyInfo: typeof(OutOrder).GetProperty("MDDelivTypeID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_MDDelivTypeID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            mDDelivTypeID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDOutOrderStateID = runtimeEntityType.AddProperty(
                "MDOutOrderStateID",
                typeof(Guid),
                propertyInfo: typeof(OutOrder).GetProperty("MDOutOrderStateID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_MDOutOrderStateID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            mDOutOrderStateID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDOutOrderTypeID = runtimeEntityType.AddProperty(
                "MDOutOrderTypeID",
                typeof(Guid),
                propertyInfo: typeof(OutOrder).GetProperty("MDOutOrderTypeID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_MDOutOrderTypeID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            mDOutOrderTypeID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDTermOfPaymentID = runtimeEntityType.AddProperty(
                "MDTermOfPaymentID",
                typeof(Guid?),
                propertyInfo: typeof(OutOrder).GetProperty("MDTermOfPaymentID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_MDTermOfPaymentID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            mDTermOfPaymentID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDTimeRangeID = runtimeEntityType.AddProperty(
                "MDTimeRangeID",
                typeof(Guid?),
                propertyInfo: typeof(OutOrder).GetProperty("MDTimeRangeID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_MDTimeRangeID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            mDTimeRangeID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outOrderDate = runtimeEntityType.AddProperty(
                "OutOrderDate",
                typeof(DateTime),
                propertyInfo: typeof(OutOrder).GetProperty("OutOrderDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_OutOrderDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            outOrderDate.AddAnnotation("Relational:ColumnType", "datetime");
            outOrderDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outOrderNo = runtimeEntityType.AddProperty(
                "OutOrderNo",
                typeof(string),
                propertyInfo: typeof(OutOrder).GetProperty("OutOrderNo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_OutOrderNo", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 30,
                unicode: false);
            outOrderNo.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var priceGross = runtimeEntityType.AddProperty(
                "PriceGross",
                typeof(decimal),
                propertyInfo: typeof(OutOrder).GetProperty("PriceGross", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_PriceGross", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            priceGross.AddAnnotation("Relational:ColumnType", "money");
            priceGross.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var priceNet = runtimeEntityType.AddProperty(
                "PriceNet",
                typeof(decimal),
                propertyInfo: typeof(OutOrder).GetProperty("PriceNet", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_PriceNet", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            priceNet.AddAnnotation("Relational:ColumnType", "money");
            priceNet.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var salesTax = runtimeEntityType.AddProperty(
                "SalesTax",
                typeof(float),
                propertyInfo: typeof(OutOrder).GetProperty("SalesTax", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_SalesTax", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            salesTax.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var targetDeliveryDate = runtimeEntityType.AddProperty(
                "TargetDeliveryDate",
                typeof(DateTime),
                propertyInfo: typeof(OutOrder).GetProperty("TargetDeliveryDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_TargetDeliveryDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            targetDeliveryDate.AddAnnotation("Relational:ColumnType", "datetime");
            targetDeliveryDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var targetDeliveryMaxDate = runtimeEntityType.AddProperty(
                "TargetDeliveryMaxDate",
                typeof(DateTime?),
                propertyInfo: typeof(OutOrder).GetProperty("TargetDeliveryMaxDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_TargetDeliveryMaxDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            targetDeliveryMaxDate.AddAnnotation("Relational:ColumnType", "datetime");
            targetDeliveryMaxDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var updateDate = runtimeEntityType.AddProperty(
                "UpdateDate",
                typeof(DateTime),
                propertyInfo: typeof(OutOrder).GetProperty("UpdateDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_UpdateDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            updateDate.AddAnnotation("Relational:ColumnType", "datetime");
            updateDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var updateName = runtimeEntityType.AddProperty(
                "UpdateName",
                typeof(string),
                propertyInfo: typeof(OutOrder).GetProperty("UpdateName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_UpdateName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 20,
                unicode: false);
            updateName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var xMLConfig = runtimeEntityType.AddProperty(
                "XMLConfig",
                typeof(string),
                propertyInfo: typeof(VBEntityObject).GetProperty("XMLConfig", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_XMLConfig", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            xMLConfig.AddAnnotation("Relational:ColumnType", "text");
            xMLConfig.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var xMLDesignEnd = runtimeEntityType.AddProperty(
                "XMLDesignEnd",
                typeof(string),
                propertyInfo: typeof(OutOrder).GetProperty("XMLDesignEnd", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_XMLDesignEnd", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            xMLDesignEnd.AddAnnotation("Relational:ColumnType", "text");
            xMLDesignEnd.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var xMLDesignStart = runtimeEntityType.AddProperty(
                "XMLDesignStart",
                typeof(string),
                propertyInfo: typeof(OutOrder).GetProperty("XMLDesignStart", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_XMLDesignStart", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            xMLDesignStart.AddAnnotation("Relational:ColumnType", "text");
            xMLDesignStart.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lazyLoader = runtimeEntityType.AddServiceProperty(
                "LazyLoader",
                propertyInfo: typeof(OutOrder).GetProperty("LazyLoader", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var key = runtimeEntityType.AddKey(
                new[] { outOrderID });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { issuerCompanyAddressID });

            var index0 = runtimeEntityType.AddIndex(
                new[] { issuerCompanyPersonID });

            var index1 = runtimeEntityType.AddIndex(
                new[] { mDCurrencyID });

            var nCI_FK_OutOrder_BasedOnOutOfferingID = runtimeEntityType.AddIndex(
                new[] { basedOnOutOfferID },
                name: "NCI_FK_OutOrder_BasedOnOutOfferingID");

            var nCI_FK_OutOrder_BillingCompanyAddressID = runtimeEntityType.AddIndex(
                new[] { billingCompanyAddressID },
                name: "NCI_FK_OutOrder_BillingCompanyAddressID");

            var nCI_FK_OutOrder_CPartnerCompanyID = runtimeEntityType.AddIndex(
                new[] { cPartnerCompanyID },
                name: "NCI_FK_OutOrder_CPartnerCompanyID");

            var nCI_FK_OutOrder_CustomerCompanyID = runtimeEntityType.AddIndex(
                new[] { customerCompanyID },
                name: "NCI_FK_OutOrder_CustomerCompanyID");

            var nCI_FK_OutOrder_DeliveryCompanyAddressID = runtimeEntityType.AddIndex(
                new[] { deliveryCompanyAddressID },
                name: "NCI_FK_OutOrder_DeliveryCompanyAddressID");

            var nCI_FK_OutOrder_MDDelivTypeID = runtimeEntityType.AddIndex(
                new[] { mDDelivTypeID },
                name: "NCI_FK_OutOrder_MDDelivTypeID");

            var nCI_FK_OutOrder_MDOutOrderStateID = runtimeEntityType.AddIndex(
                new[] { mDOutOrderStateID },
                name: "NCI_FK_OutOrder_MDOutOrderStateID");

            var nCI_FK_OutOrder_MDOutOrderTypeID = runtimeEntityType.AddIndex(
                new[] { mDOutOrderTypeID },
                name: "NCI_FK_OutOrder_MDOutOrderTypeID");

            var nCI_FK_OutOrder_MDTermOfPaymentID = runtimeEntityType.AddIndex(
                new[] { mDTermOfPaymentID },
                name: "NCI_FK_OutOrder_MDTermOfPaymentID");

            var nCI_FK_OutOrder_MDTimeRangeID = runtimeEntityType.AddIndex(
                new[] { mDTimeRangeID },
                name: "NCI_FK_OutOrder_MDTimeRangeID");

            var uIX_OutOrder = runtimeEntityType.AddIndex(
                new[] { outOrderNo },
                name: "UIX_OutOrder",
                unique: true);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("BasedOnOutOfferID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("OutOfferID") }),
                principalEntityType);

            var basedOnOutOffer = declaringEntityType.AddNavigation("BasedOnOutOffer",
                runtimeForeignKey,
                onDependent: true,
                typeof(OutOffer),
                propertyInfo: typeof(OutOrder).GetProperty("BasedOnOutOffer", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_BasedOnOutOffer", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var outOrder_BasedOnOutOffer = principalEntityType.AddNavigation("OutOrder_BasedOnOutOffer",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<OutOrder>),
                propertyInfo: typeof(OutOffer).GetProperty("OutOrder_BasedOnOutOffer", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOffer).GetField("_OutOrder_BasedOnOutOffer", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_OutOrder_BasedOnOutOfferID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("BillingCompanyAddressID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CompanyAddressID") }),
                principalEntityType);

            var billingCompanyAddress = declaringEntityType.AddNavigation("BillingCompanyAddress",
                runtimeForeignKey,
                onDependent: true,
                typeof(CompanyAddress),
                propertyInfo: typeof(OutOrder).GetProperty("BillingCompanyAddress", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_BillingCompanyAddress", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var outOrder_BillingCompanyAddress = principalEntityType.AddNavigation("OutOrder_BillingCompanyAddress",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<OutOrder>),
                propertyInfo: typeof(CompanyAddress).GetProperty("OutOrder_BillingCompanyAddress", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompanyAddress).GetField("_OutOrder_BillingCompanyAddress", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_OutOrder_BillingCompanyAddressID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CPartnerCompanyID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CompanyID") }),
                principalEntityType);

            var cPartnerCompany = declaringEntityType.AddNavigation("CPartnerCompany",
                runtimeForeignKey,
                onDependent: true,
                typeof(Company),
                propertyInfo: typeof(OutOrder).GetProperty("CPartnerCompany", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_CPartnerCompany", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var outOrder_CPartnerCompany = principalEntityType.AddNavigation("OutOrder_CPartnerCompany",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<OutOrder>),
                propertyInfo: typeof(Company).GetProperty("OutOrder_CPartnerCompany", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Company).GetField("_OutOrder_CPartnerCompany", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_OutOrder_CPartnerCompanyID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CustomerCompanyID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CompanyID") }),
                principalEntityType,
                required: true);

            var customerCompany = declaringEntityType.AddNavigation("CustomerCompany",
                runtimeForeignKey,
                onDependent: true,
                typeof(Company),
                propertyInfo: typeof(OutOrder).GetProperty("CustomerCompany", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_CustomerCompany", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var outOrder_CustomerCompany = principalEntityType.AddNavigation("OutOrder_CustomerCompany",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<OutOrder>),
                propertyInfo: typeof(Company).GetProperty("OutOrder_CustomerCompany", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Company).GetField("_OutOrder_CustomerCompany", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_OutOrder_CompanyID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("DeliveryCompanyAddressID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CompanyAddressID") }),
                principalEntityType);

            var deliveryCompanyAddress = declaringEntityType.AddNavigation("DeliveryCompanyAddress",
                runtimeForeignKey,
                onDependent: true,
                typeof(CompanyAddress),
                propertyInfo: typeof(OutOrder).GetProperty("DeliveryCompanyAddress", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_DeliveryCompanyAddress", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var outOrder_DeliveryCompanyAddress = principalEntityType.AddNavigation("OutOrder_DeliveryCompanyAddress",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<OutOrder>),
                propertyInfo: typeof(CompanyAddress).GetProperty("OutOrder_DeliveryCompanyAddress", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompanyAddress).GetField("_OutOrder_DeliveryCompanyAddress", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_OutOrder_DeliveryCompanyAddressID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("IssuerCompanyAddressID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CompanyAddressID") }),
                principalEntityType);

            var issuerCompanyAddress = declaringEntityType.AddNavigation("IssuerCompanyAddress",
                runtimeForeignKey,
                onDependent: true,
                typeof(CompanyAddress),
                propertyInfo: typeof(OutOrder).GetProperty("IssuerCompanyAddress", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_IssuerCompanyAddress", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var outOrder_IssuerCompanyAddress = principalEntityType.AddNavigation("OutOrder_IssuerCompanyAddress",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<OutOrder>),
                propertyInfo: typeof(CompanyAddress).GetProperty("OutOrder_IssuerCompanyAddress", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompanyAddress).GetField("_OutOrder_IssuerCompanyAddress", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_OutOrder_CompanyAddress");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("IssuerCompanyPersonID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CompanyPersonID") }),
                principalEntityType);

            var issuerCompanyPerson = declaringEntityType.AddNavigation("IssuerCompanyPerson",
                runtimeForeignKey,
                onDependent: true,
                typeof(CompanyPerson),
                propertyInfo: typeof(OutOrder).GetProperty("IssuerCompanyPerson", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_IssuerCompanyPerson", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var outOrder_IssuerCompanyPerson = principalEntityType.AddNavigation("OutOrder_IssuerCompanyPerson",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<OutOrder>),
                propertyInfo: typeof(CompanyPerson).GetProperty("OutOrder_IssuerCompanyPerson", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompanyPerson).GetField("_OutOrder_IssuerCompanyPerson", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_OutOrder_CompanyPerson");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey8(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDCurrencyID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDCurrencyID") }),
                principalEntityType);

            var mDCurrency = declaringEntityType.AddNavigation("MDCurrency",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDCurrency),
                propertyInfo: typeof(OutOrder).GetProperty("MDCurrency", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_MDCurrency", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var outOrder_MDCurrency = principalEntityType.AddNavigation("OutOrder_MDCurrency",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<OutOrder>),
                propertyInfo: typeof(MDCurrency).GetProperty("OutOrder_MDCurrency", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDCurrency).GetField("_OutOrder_MDCurrency", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_OutOrder_MDCurrencyID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey9(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDDelivTypeID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDDelivTypeID") }),
                principalEntityType,
                required: true);

            var mDDelivType = declaringEntityType.AddNavigation("MDDelivType",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDDelivType),
                propertyInfo: typeof(OutOrder).GetProperty("MDDelivType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_MDDelivType", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var outOrder_MDDelivType = principalEntityType.AddNavigation("OutOrder_MDDelivType",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<OutOrder>),
                propertyInfo: typeof(MDDelivType).GetProperty("OutOrder_MDDelivType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDDelivType).GetField("_OutOrder_MDDelivType", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_OutOrder_MDDelivTypeID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey10(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDOutOrderStateID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDOutOrderStateID") }),
                principalEntityType,
                required: true);

            var mDOutOrderState = declaringEntityType.AddNavigation("MDOutOrderState",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDOutOrderState),
                propertyInfo: typeof(OutOrder).GetProperty("MDOutOrderState", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_MDOutOrderState", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var outOrder_MDOutOrderState = principalEntityType.AddNavigation("OutOrder_MDOutOrderState",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<OutOrder>),
                propertyInfo: typeof(MDOutOrderState).GetProperty("OutOrder_MDOutOrderState", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDOutOrderState).GetField("_OutOrder_MDOutOrderState", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_OutOrder_MDOutOrderStateID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey11(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDOutOrderTypeID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDOutOrderTypeID") }),
                principalEntityType,
                required: true);

            var mDOutOrderType = declaringEntityType.AddNavigation("MDOutOrderType",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDOutOrderType),
                propertyInfo: typeof(OutOrder).GetProperty("MDOutOrderType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_MDOutOrderType", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var outOrder_MDOutOrderType = principalEntityType.AddNavigation("OutOrder_MDOutOrderType",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<OutOrder>),
                propertyInfo: typeof(MDOutOrderType).GetProperty("OutOrder_MDOutOrderType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDOutOrderType).GetField("_OutOrder_MDOutOrderType", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_OutOrder_MDOutOrderTypeID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey12(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDTermOfPaymentID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDTermOfPaymentID") }),
                principalEntityType);

            var mDTermOfPayment = declaringEntityType.AddNavigation("MDTermOfPayment",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDTermOfPayment),
                propertyInfo: typeof(OutOrder).GetProperty("MDTermOfPayment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_MDTermOfPayment", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var outOrder_MDTermOfPayment = principalEntityType.AddNavigation("OutOrder_MDTermOfPayment",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<OutOrder>),
                propertyInfo: typeof(MDTermOfPayment).GetProperty("OutOrder_MDTermOfPayment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDTermOfPayment).GetField("_OutOrder_MDTermOfPayment", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_OutOrder_MDTermOfPaymentID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey13(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDTimeRangeID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDTimeRangeID") }),
                principalEntityType);

            var mDTimeRange = declaringEntityType.AddNavigation("MDTimeRange",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDTimeRange),
                propertyInfo: typeof(OutOrder).GetProperty("MDTimeRange", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_MDTimeRange", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var outOrder_MDTimeRange = principalEntityType.AddNavigation("OutOrder_MDTimeRange",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<OutOrder>),
                propertyInfo: typeof(MDTimeRange).GetProperty("OutOrder_MDTimeRange", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDTimeRange).GetField("_OutOrder_MDTimeRange", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_OutOrder_MDTimeRangeID");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "OutOrder");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
