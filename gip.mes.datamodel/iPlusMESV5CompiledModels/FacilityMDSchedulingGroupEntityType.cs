// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace gip.mes.datamodel
{
    internal partial class FacilityMDSchedulingGroupEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "gip.mes.datamodel.FacilityMDSchedulingGroup",
                typeof(FacilityMDSchedulingGroup),
                baseEntityType,
                indexerPropertyInfo: RuntimeEntityType.FindIndexerProperty(typeof(FacilityMDSchedulingGroup)));

            var facilityMDSchedulingGroupID = runtimeEntityType.AddProperty(
                "FacilityMDSchedulingGroupID",
                typeof(Guid),
                propertyInfo: typeof(FacilityMDSchedulingGroup).GetProperty("FacilityMDSchedulingGroupID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityMDSchedulingGroup).GetField("_FacilityMDSchedulingGroupID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            facilityMDSchedulingGroupID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var facilityID = runtimeEntityType.AddProperty(
                "FacilityID",
                typeof(Guid),
                propertyInfo: typeof(FacilityMDSchedulingGroup).GetProperty("FacilityID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityMDSchedulingGroup).GetField("_FacilityID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            facilityID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insertDate = runtimeEntityType.AddProperty(
                "InsertDate",
                typeof(DateTime),
                propertyInfo: typeof(FacilityMDSchedulingGroup).GetProperty("InsertDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityMDSchedulingGroup).GetField("_InsertDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            insertDate.AddAnnotation("Relational:ColumnType", "datetime");
            insertDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insertName = runtimeEntityType.AddProperty(
                "InsertName",
                typeof(string),
                propertyInfo: typeof(FacilityMDSchedulingGroup).GetProperty("InsertName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityMDSchedulingGroup).GetField("_InsertName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 20,
                unicode: false);
            insertName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDPickingTypeID = runtimeEntityType.AddProperty(
                "MDPickingTypeID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityMDSchedulingGroup).GetProperty("MDPickingTypeID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityMDSchedulingGroup).GetField("_MDPickingTypeID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            mDPickingTypeID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDSchedulingGroupID = runtimeEntityType.AddProperty(
                "MDSchedulingGroupID",
                typeof(Guid),
                propertyInfo: typeof(FacilityMDSchedulingGroup).GetProperty("MDSchedulingGroupID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityMDSchedulingGroup).GetField("_MDSchedulingGroupID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            mDSchedulingGroupID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var updateDate = runtimeEntityType.AddProperty(
                "UpdateDate",
                typeof(DateTime),
                propertyInfo: typeof(FacilityMDSchedulingGroup).GetProperty("UpdateDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityMDSchedulingGroup).GetField("_UpdateDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            updateDate.AddAnnotation("Relational:ColumnType", "datetime");
            updateDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var updateName = runtimeEntityType.AddProperty(
                "UpdateName",
                typeof(string),
                propertyInfo: typeof(FacilityMDSchedulingGroup).GetProperty("UpdateName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityMDSchedulingGroup).GetField("_UpdateName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 20,
                unicode: false);
            updateName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lazyLoader = runtimeEntityType.AddServiceProperty(
                "LazyLoader",
                propertyInfo: typeof(FacilityMDSchedulingGroup).GetProperty("LazyLoader", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var key = runtimeEntityType.AddKey(
                new[] { facilityMDSchedulingGroupID });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { mDPickingTypeID });

            var index0 = runtimeEntityType.AddIndex(
                new[] { mDSchedulingGroupID });

            var uIXFacilityMDSchedulingGroup = runtimeEntityType.AddIndex(
                new[] { facilityID, mDSchedulingGroupID },
                name: "UIX_FacilityMDSchedulingGroup",
                unique: true);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("FacilityID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FacilityID") }),
                principalEntityType,
                required: true);

            var facility = declaringEntityType.AddNavigation("Facility",
                runtimeForeignKey,
                onDependent: true,
                typeof(Facility),
                propertyInfo: typeof(FacilityMDSchedulingGroup).GetProperty("Facility", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityMDSchedulingGroup).GetField("_Facility", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityMDSchedulingGroupFacility = principalEntityType.AddNavigation("FacilityMDSchedulingGroup_Facility",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityMDSchedulingGroup>),
                propertyInfo: typeof(Facility).GetProperty("FacilityMDSchedulingGroup_Facility", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Facility).GetField("_FacilityMDSchedulingGroup_Facility", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityMDSchedulingGroup_Facility");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDPickingTypeID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDPickingTypeID") }),
                principalEntityType);

            var mDPickingType = declaringEntityType.AddNavigation("MDPickingType",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDPickingType),
                propertyInfo: typeof(FacilityMDSchedulingGroup).GetProperty("MDPickingType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityMDSchedulingGroup).GetField("_MDPickingType", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityMDSchedulingGroupMDPickingType = principalEntityType.AddNavigation("FacilityMDSchedulingGroup_MDPickingType",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityMDSchedulingGroup>),
                propertyInfo: typeof(MDPickingType).GetProperty("FacilityMDSchedulingGroup_MDPickingType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDPickingType).GetField("_FacilityMDSchedulingGroup_MDPickingType", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityMDSchedulingGroup_MDPickingType");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDSchedulingGroupID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDSchedulingGroupID") }),
                principalEntityType,
                required: true);

            var mDSchedulingGroup = declaringEntityType.AddNavigation("MDSchedulingGroup",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDSchedulingGroup),
                propertyInfo: typeof(FacilityMDSchedulingGroup).GetProperty("MDSchedulingGroup", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityMDSchedulingGroup).GetField("_MDSchedulingGroup", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityMDSchedulingGroupMDSchedulingGroup = principalEntityType.AddNavigation("FacilityMDSchedulingGroup_MDSchedulingGroup",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityMDSchedulingGroup>),
                propertyInfo: typeof(MDSchedulingGroup).GetProperty("FacilityMDSchedulingGroup_MDSchedulingGroup", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDSchedulingGroup).GetField("_FacilityMDSchedulingGroup_MDSchedulingGroup", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityMDSchedulingGroup_MDSchedulingGroup");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "FacilityMDSchedulingGroup");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
