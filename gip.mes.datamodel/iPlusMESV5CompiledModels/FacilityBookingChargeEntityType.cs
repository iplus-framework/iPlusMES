// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using gip.core.datamodel;

#pragma warning disable 219, 612, 618
#nullable disable

namespace gip.mes.datamodel
{
    internal partial class FacilityBookingChargeEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "gip.mes.datamodel.FacilityBookingCharge",
                typeof(FacilityBookingCharge),
                baseEntityType,
                indexerPropertyInfo: RuntimeEntityType.FindIndexerProperty(typeof(FacilityBookingCharge)));

            var facilityBookingChargeID = runtimeEntityType.AddProperty(
                "FacilityBookingChargeID",
                typeof(Guid),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("FacilityBookingChargeID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_FacilityBookingChargeID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            facilityBookingChargeID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var bookingMessage = runtimeEntityType.AddProperty(
                "BookingMessage",
                typeof(string),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("BookingMessage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_BookingMessage", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                unicode: false);
            bookingMessage.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var bookingSucceeded = runtimeEntityType.AddProperty(
                "BookingSucceeded",
                typeof(bool),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("BookingSucceeded", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_BookingSucceeded", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            bookingSucceeded.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var comment = runtimeEntityType.AddProperty(
                "Comment",
                typeof(string),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("Comment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_Comment", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                unicode: false);
            comment.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var dontAllowNegativeStock = runtimeEntityType.AddProperty(
                "DontAllowNegativeStock",
                typeof(bool?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("DontAllowNegativeStock", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_DontAllowNegativeStock", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            dontAllowNegativeStock.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var expirationDate = runtimeEntityType.AddProperty(
                "ExpirationDate",
                typeof(DateTime?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("ExpirationDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_ExpirationDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            expirationDate.AddAnnotation("Relational:ColumnType", "datetime");
            expirationDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var facilityBookingChargeNo = runtimeEntityType.AddProperty(
                "FacilityBookingChargeNo",
                typeof(string),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("FacilityBookingChargeNo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_FacilityBookingChargeNo", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 20,
                unicode: false);
            facilityBookingChargeNo.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var facilityBookingID = runtimeEntityType.AddProperty(
                "FacilityBookingID",
                typeof(Guid),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("FacilityBookingID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_FacilityBookingID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            facilityBookingID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var facilityBookingTypeIndex = runtimeEntityType.AddProperty(
                "FacilityBookingTypeIndex",
                typeof(short),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("FacilityBookingTypeIndex", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_FacilityBookingTypeIndex", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            facilityBookingTypeIndex.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var facilityInventoryPosID = runtimeEntityType.AddProperty(
                "FacilityInventoryPosID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("FacilityInventoryPosID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_FacilityInventoryPosID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            facilityInventoryPosID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var ignoreManagement = runtimeEntityType.AddProperty(
                "IgnoreManagement",
                typeof(bool?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("IgnoreManagement", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_IgnoreManagement", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            ignoreManagement.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inOrderPosID = runtimeEntityType.AddProperty(
                "InOrderPosID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("InOrderPosID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_InOrderPosID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            inOrderPosID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insertDate = runtimeEntityType.AddProperty(
                "InsertDate",
                typeof(DateTime),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("InsertDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_InsertDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            insertDate.AddAnnotation("Relational:ColumnType", "datetime");
            insertDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insertName = runtimeEntityType.AddProperty(
                "InsertName",
                typeof(string),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("InsertName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_InsertName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 20,
                unicode: false);
            insertName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inwardCPartnerCompMatID = runtimeEntityType.AddProperty(
                "InwardCPartnerCompMatID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("InwardCPartnerCompMatID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_InwardCPartnerCompMatID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            inwardCPartnerCompMatID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inwardCompanyMaterialID = runtimeEntityType.AddProperty(
                "InwardCompanyMaterialID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("InwardCompanyMaterialID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_InwardCompanyMaterialID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            inwardCompanyMaterialID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inwardFacilityChargeID = runtimeEntityType.AddProperty(
                "InwardFacilityChargeID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("InwardFacilityChargeID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_InwardFacilityChargeID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            inwardFacilityChargeID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inwardFacilityID = runtimeEntityType.AddProperty(
                "InwardFacilityID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("InwardFacilityID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_InwardFacilityID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            inwardFacilityID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inwardFacilityLocationID = runtimeEntityType.AddProperty(
                "InwardFacilityLocationID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("InwardFacilityLocationID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_InwardFacilityLocationID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            inwardFacilityLocationID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inwardFacilityLotID = runtimeEntityType.AddProperty(
                "InwardFacilityLotID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("InwardFacilityLotID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_InwardFacilityLotID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            inwardFacilityLotID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inwardMaterialID = runtimeEntityType.AddProperty(
                "InwardMaterialID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("InwardMaterialID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_InwardMaterialID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            inwardMaterialID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inwardPartslistID = runtimeEntityType.AddProperty(
                "InwardPartslistID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("InwardPartslistID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_InwardPartslistID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            inwardPartslistID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inwardQuantity = runtimeEntityType.AddProperty(
                "InwardQuantity",
                typeof(double),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("InwardQuantity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_InwardQuantity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            inwardQuantity.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inwardQuantityUOM = runtimeEntityType.AddProperty(
                "InwardQuantityUOM",
                typeof(double),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("InwardQuantityUOM", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_InwardQuantityUOM", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            inwardQuantityUOM.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inwardQuantityUOMAmb = runtimeEntityType.AddProperty(
                "InwardQuantityUOMAmb",
                typeof(double),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("InwardQuantityUOMAmb", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_InwardQuantityUOMAmb", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            inwardQuantityUOMAmb.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inwardTargetQuantity = runtimeEntityType.AddProperty(
                "InwardTargetQuantity",
                typeof(double),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("InwardTargetQuantity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_InwardTargetQuantity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            inwardTargetQuantity.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inwardTargetQuantityUOM = runtimeEntityType.AddProperty(
                "InwardTargetQuantityUOM",
                typeof(double),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("InwardTargetQuantityUOM", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_InwardTargetQuantityUOM", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            inwardTargetQuantityUOM.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inwardTargetQuantityUOMAmb = runtimeEntityType.AddProperty(
                "InwardTargetQuantityUOMAmb",
                typeof(double),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("InwardTargetQuantityUOMAmb", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_InwardTargetQuantityUOMAmb", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            inwardTargetQuantityUOMAmb.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDBalancingModeID = runtimeEntityType.AddProperty(
                "MDBalancingModeID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("MDBalancingModeID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_MDBalancingModeID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            mDBalancingModeID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDBookingNotAvailableModeID = runtimeEntityType.AddProperty(
                "MDBookingNotAvailableModeID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("MDBookingNotAvailableModeID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_MDBookingNotAvailableModeID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            mDBookingNotAvailableModeID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDMovementReasonID = runtimeEntityType.AddProperty(
                "MDMovementReasonID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("MDMovementReasonID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_MDMovementReasonID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            mDMovementReasonID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDReleaseStateID = runtimeEntityType.AddProperty(
                "MDReleaseStateID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("MDReleaseStateID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_MDReleaseStateID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            mDReleaseStateID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDReservationModeID = runtimeEntityType.AddProperty(
                "MDReservationModeID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("MDReservationModeID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_MDReservationModeID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            mDReservationModeID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDUnitID = runtimeEntityType.AddProperty(
                "MDUnitID",
                typeof(Guid),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("MDUnitID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_MDUnitID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            mDUnitID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDZeroStockStateID = runtimeEntityType.AddProperty(
                "MDZeroStockStateID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("MDZeroStockStateID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_MDZeroStockStateID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            mDZeroStockStateID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var minimumDurability = runtimeEntityType.AddProperty(
                "MinimumDurability",
                typeof(int?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("MinimumDurability", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_MinimumDurability", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            minimumDurability.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var noInwardOutwardBalancing = runtimeEntityType.AddProperty(
                "NoInwardOutwardBalancing",
                typeof(bool),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("NoInwardOutwardBalancing", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_NoInwardOutwardBalancing", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            noInwardOutwardBalancing.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outOrderPosID = runtimeEntityType.AddProperty(
                "OutOrderPosID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("OutOrderPosID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_OutOrderPosID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            outOrderPosID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outwardCPartnerCompMatID = runtimeEntityType.AddProperty(
                "OutwardCPartnerCompMatID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("OutwardCPartnerCompMatID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_OutwardCPartnerCompMatID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            outwardCPartnerCompMatID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outwardCompanyMaterialID = runtimeEntityType.AddProperty(
                "OutwardCompanyMaterialID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("OutwardCompanyMaterialID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_OutwardCompanyMaterialID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            outwardCompanyMaterialID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outwardFacilityChargeID = runtimeEntityType.AddProperty(
                "OutwardFacilityChargeID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("OutwardFacilityChargeID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_OutwardFacilityChargeID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            outwardFacilityChargeID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outwardFacilityID = runtimeEntityType.AddProperty(
                "OutwardFacilityID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("OutwardFacilityID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_OutwardFacilityID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            outwardFacilityID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outwardFacilityLocationID = runtimeEntityType.AddProperty(
                "OutwardFacilityLocationID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("OutwardFacilityLocationID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_OutwardFacilityLocationID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            outwardFacilityLocationID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outwardFacilityLotID = runtimeEntityType.AddProperty(
                "OutwardFacilityLotID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("OutwardFacilityLotID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_OutwardFacilityLotID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            outwardFacilityLotID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outwardMaterialID = runtimeEntityType.AddProperty(
                "OutwardMaterialID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("OutwardMaterialID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_OutwardMaterialID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            outwardMaterialID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outwardPartslistID = runtimeEntityType.AddProperty(
                "OutwardPartslistID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("OutwardPartslistID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_OutwardPartslistID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            outwardPartslistID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outwardQuantity = runtimeEntityType.AddProperty(
                "OutwardQuantity",
                typeof(double),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("OutwardQuantity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_OutwardQuantity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            outwardQuantity.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outwardQuantityUOM = runtimeEntityType.AddProperty(
                "OutwardQuantityUOM",
                typeof(double),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("OutwardQuantityUOM", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_OutwardQuantityUOM", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            outwardQuantityUOM.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outwardQuantityUOMAmb = runtimeEntityType.AddProperty(
                "OutwardQuantityUOMAmb",
                typeof(double),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("OutwardQuantityUOMAmb", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_OutwardQuantityUOMAmb", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            outwardQuantityUOMAmb.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outwardTargetQuantity = runtimeEntityType.AddProperty(
                "OutwardTargetQuantity",
                typeof(double),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("OutwardTargetQuantity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_OutwardTargetQuantity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            outwardTargetQuantity.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outwardTargetQuantityUOM = runtimeEntityType.AddProperty(
                "OutwardTargetQuantityUOM",
                typeof(double),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("OutwardTargetQuantityUOM", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_OutwardTargetQuantityUOM", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            outwardTargetQuantityUOM.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outwardTargetQuantityUOMAmb = runtimeEntityType.AddProperty(
                "OutwardTargetQuantityUOMAmb",
                typeof(double),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("OutwardTargetQuantityUOMAmb", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_OutwardTargetQuantityUOMAmb", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            outwardTargetQuantityUOMAmb.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var pickingPosID = runtimeEntityType.AddProperty(
                "PickingPosID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("PickingPosID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_PickingPosID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            pickingPosID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var prodOrderPartslistPosFacilityLotID = runtimeEntityType.AddProperty(
                "ProdOrderPartslistPosFacilityLotID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("ProdOrderPartslistPosFacilityLotID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_ProdOrderPartslistPosFacilityLotID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            prodOrderPartslistPosFacilityLotID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var prodOrderPartslistPosID = runtimeEntityType.AddProperty(
                "ProdOrderPartslistPosID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("ProdOrderPartslistPosID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_ProdOrderPartslistPosID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            prodOrderPartslistPosID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var prodOrderPartslistPosRelationID = runtimeEntityType.AddProperty(
                "ProdOrderPartslistPosRelationID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("ProdOrderPartslistPosRelationID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_ProdOrderPartslistPosRelationID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            prodOrderPartslistPosRelationID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var productionDate = runtimeEntityType.AddProperty(
                "ProductionDate",
                typeof(DateTime?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("ProductionDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_ProductionDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            productionDate.AddAnnotation("Relational:ColumnType", "datetime");
            productionDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var quantityIsAbsolute = runtimeEntityType.AddProperty(
                "QuantityIsAbsolute",
                typeof(bool?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("QuantityIsAbsolute", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_QuantityIsAbsolute", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            quantityIsAbsolute.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var recipeOrFactoryInfo = runtimeEntityType.AddProperty(
                "RecipeOrFactoryInfo",
                typeof(string),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("RecipeOrFactoryInfo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_RecipeOrFactoryInfo", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50,
                unicode: false);
            recipeOrFactoryInfo.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var setCompleted = runtimeEntityType.AddProperty(
                "SetCompleted",
                typeof(bool),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("SetCompleted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_SetCompleted", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            setCompleted.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var shiftBookingReverse = runtimeEntityType.AddProperty(
                "ShiftBookingReverse",
                typeof(bool),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("ShiftBookingReverse", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_ShiftBookingReverse", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            shiftBookingReverse.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var storageDate = runtimeEntityType.AddProperty(
                "StorageDate",
                typeof(DateTime?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("StorageDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_StorageDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            storageDate.AddAnnotation("Relational:ColumnType", "datetime");
            storageDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var storageLife = runtimeEntityType.AddProperty(
                "StorageLife",
                typeof(short),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("StorageLife", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_StorageLife", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            storageLife.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vBiStackCalculatorACClassID = runtimeEntityType.AddProperty(
                "VBiStackCalculatorACClassID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("VBiStackCalculatorACClassID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_VBiStackCalculatorACClassID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vBiStackCalculatorACClassID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var xMLConfig = runtimeEntityType.AddProperty(
                "XMLConfig",
                typeof(string),
                propertyInfo: typeof(VBEntityObject).GetProperty("XMLConfig", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_XMLConfig", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            xMLConfig.AddAnnotation("Relational:ColumnType", "text");
            xMLConfig.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lazyLoader = runtimeEntityType.AddServiceProperty(
                "LazyLoader",
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("LazyLoader", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var key = runtimeEntityType.AddKey(
                new[] { facilityBookingChargeID });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { facilityInventoryPosID });

            var index0 = runtimeEntityType.AddIndex(
                new[] { prodOrderPartslistPosFacilityLotID });

            var nCIFKFacilityBookingChargeFacilityBookingID = runtimeEntityType.AddIndex(
                new[] { facilityBookingID },
                name: "NCI_FK_FacilityBookingCharge_FacilityBookingID");

            var nCIFKFacilityBookingChargeInOrderPosID = runtimeEntityType.AddIndex(
                new[] { inOrderPosID },
                name: "NCI_FK_FacilityBookingCharge_InOrderPosID");

            var nCIFKFacilityBookingChargeInwardCPartnerCompMatID = runtimeEntityType.AddIndex(
                new[] { inwardCPartnerCompMatID },
                name: "NCI_FK_FacilityBookingCharge_InwardCPartnerCompMatID");

            var nCIFKFacilityBookingChargeInwardCompanyMaterialID = runtimeEntityType.AddIndex(
                new[] { inwardCompanyMaterialID },
                name: "NCI_FK_FacilityBookingCharge_InwardCompanyMaterialID");

            var nCIFKFacilityBookingChargeInwardFacilityChargeID = runtimeEntityType.AddIndex(
                new[] { inwardFacilityChargeID },
                name: "NCI_FK_FacilityBookingCharge_InwardFacilityChargeID");

            var nCIFKFacilityBookingChargeInwardFacilityID = runtimeEntityType.AddIndex(
                new[] { inwardFacilityID },
                name: "NCI_FK_FacilityBookingCharge_InwardFacilityID");

            var nCIFKFacilityBookingChargeInwardFacilityLocationID = runtimeEntityType.AddIndex(
                new[] { inwardFacilityLocationID },
                name: "NCI_FK_FacilityBookingCharge_InwardFacilityLocationID");

            var nCIFKFacilityBookingChargeInwardFacilityLotID = runtimeEntityType.AddIndex(
                new[] { inwardFacilityLotID },
                name: "NCI_FK_FacilityBookingCharge_InwardFacilityLotID");

            var nCIFKFacilityBookingChargeInwardMaterialID = runtimeEntityType.AddIndex(
                new[] { inwardMaterialID },
                name: "NCI_FK_FacilityBookingCharge_InwardMaterialID");

            var nCIFKFacilityBookingChargeInwardPartslistID = runtimeEntityType.AddIndex(
                new[] { inwardPartslistID },
                name: "NCI_FK_FacilityBookingCharge_InwardPartslistID");

            var nCIFKFacilityBookingChargeMDBalancingModeID = runtimeEntityType.AddIndex(
                new[] { mDBalancingModeID },
                name: "NCI_FK_FacilityBookingCharge_MDBalancingModeID");

            var nCIFKFacilityBookingChargeMDBookingNotAvailableModeID = runtimeEntityType.AddIndex(
                new[] { mDBookingNotAvailableModeID },
                name: "NCI_FK_FacilityBookingCharge_MDBookingNotAvailableModeID");

            var nCIFKFacilityBookingChargeMDMovementReasonID = runtimeEntityType.AddIndex(
                new[] { mDMovementReasonID },
                name: "NCI_FK_FacilityBookingCharge_MDMovementReasonID");

            var nCIFKFacilityBookingChargeMDReleaseStateID = runtimeEntityType.AddIndex(
                new[] { mDReleaseStateID },
                name: "NCI_FK_FacilityBookingCharge_MDReleaseStateID");

            var nCIFKFacilityBookingChargeMDReservationModeID = runtimeEntityType.AddIndex(
                new[] { mDReservationModeID },
                name: "NCI_FK_FacilityBookingCharge_MDReservationModeID");

            var nCIFKFacilityBookingChargeMDUnitID = runtimeEntityType.AddIndex(
                new[] { mDUnitID },
                name: "NCI_FK_FacilityBookingCharge_MDUnitID");

            var nCIFKFacilityBookingChargeMDZeroStockStateID = runtimeEntityType.AddIndex(
                new[] { mDZeroStockStateID },
                name: "NCI_FK_FacilityBookingCharge_MDZeroStockStateID");

            var nCIFKFacilityBookingChargeOutOrderPosID = runtimeEntityType.AddIndex(
                new[] { outOrderPosID },
                name: "NCI_FK_FacilityBookingCharge_OutOrderPosID");

            var nCIFKFacilityBookingChargeOutwardCPartnerCompMatID = runtimeEntityType.AddIndex(
                new[] { outwardCPartnerCompMatID },
                name: "NCI_FK_FacilityBookingCharge_OutwardCPartnerCompMatID");

            var nCIFKFacilityBookingChargeOutwardCompanyMaterialID = runtimeEntityType.AddIndex(
                new[] { outwardCompanyMaterialID },
                name: "NCI_FK_FacilityBookingCharge_OutwardCompanyMaterialID");

            var nCIFKFacilityBookingChargeOutwardFacilityChargeID = runtimeEntityType.AddIndex(
                new[] { outwardFacilityChargeID },
                name: "NCI_FK_FacilityBookingCharge_OutwardFacilityChargeID");

            var nCIFKFacilityBookingChargeOutwardFacilityID = runtimeEntityType.AddIndex(
                new[] { outwardFacilityID },
                name: "NCI_FK_FacilityBookingCharge_OutwardFacilityID");

            var nCIFKFacilityBookingChargeOutwardFacilityLocationID = runtimeEntityType.AddIndex(
                new[] { outwardFacilityLocationID },
                name: "NCI_FK_FacilityBookingCharge_OutwardFacilityLocationID");

            var nCIFKFacilityBookingChargeOutwardFacilityLotID = runtimeEntityType.AddIndex(
                new[] { outwardFacilityLotID },
                name: "NCI_FK_FacilityBookingCharge_OutwardFacilityLotID");

            var nCIFKFacilityBookingChargeOutwardMaterialID = runtimeEntityType.AddIndex(
                new[] { outwardMaterialID },
                name: "NCI_FK_FacilityBookingCharge_OutwardMaterialID");

            var nCIFKFacilityBookingChargeOutwardPartslistID = runtimeEntityType.AddIndex(
                new[] { outwardPartslistID },
                name: "NCI_FK_FacilityBookingCharge_OutwardPartslistID");

            var nCIFKFacilityBookingChargePickingPosID = runtimeEntityType.AddIndex(
                new[] { pickingPosID },
                name: "NCI_FK_FacilityBookingCharge_PickingPosID");

            var nCIFKFacilityBookingChargeProdOrderPartslistPosID = runtimeEntityType.AddIndex(
                new[] { prodOrderPartslistPosID },
                name: "NCI_FK_FacilityBookingCharge_ProdOrderPartslistPosID");

            var nCIFKFacilityBookingChargeProdOrderPartslistPosRelationID = runtimeEntityType.AddIndex(
                new[] { prodOrderPartslistPosRelationID },
                name: "NCI_FK_FacilityBookingCharge_ProdOrderPartslistPosRelationID");

            var nCIFKFacilityBookingChargeVBiStackCalculatorACClassID = runtimeEntityType.AddIndex(
                new[] { vBiStackCalculatorACClassID },
                name: "NCI_FK_FacilityBookingCharge_VBiStackCalculatorACClassID");

            var nCIFacilityBookingChargeInwardFacilityChargeIDOutwardFacilityChargeID = runtimeEntityType.AddIndex(
                new[] { inwardFacilityChargeID, outwardFacilityChargeID, facilityBookingID },
                name: "NCI_FacilityBookingCharge_InwardFacilityChargeID_OutwardFacilityChargeID");

            var nCIFacilityBookingChargeInwardFacilityIDOutwardFacilityID = runtimeEntityType.AddIndex(
                new[] { inwardFacilityID, outwardFacilityID },
                name: "NCI_FacilityBookingCharge_InwardFacilityID_OutwardFacilityID");

            var nCIFacilityBookingChargeProdOrderPartslistPosIDInsertDate = runtimeEntityType.AddIndex(
                new[] { prodOrderPartslistPosID },
                name: "NCI_FacilityBookingCharge_ProdOrderPartslistPosID_InsertDate");

            var nCIFacilityBookingChargeProdOrderPartslistPosIDInwardFacilityChargeID = runtimeEntityType.AddIndex(
                new[] { prodOrderPartslistPosID, inwardFacilityChargeID },
                name: "NCI_FacilityBookingCharge_ProdOrderPartslistPosID_InwardFacilityChargeID");

            var nCIFacilityBookingChargeProdOrderPartslistPosIDInwardFacilityID = runtimeEntityType.AddIndex(
                new[] { prodOrderPartslistPosID },
                name: "NCI_FacilityBookingCharge_ProdOrderPartslistPosID_InwardFacilityID");

            var nCIFacilityBookingChargeProdOrderPartslistPosIDOT = runtimeEntityType.AddIndex(
                new[] { prodOrderPartslistPosID },
                name: "NCI_FacilityBookingCharge_ProdOrderPartslistPosID_OT");

            var uIXFacilityBookingChargeFacilityBookingChargeNo = runtimeEntityType.AddIndex(
                new[] { facilityBookingChargeNo },
                name: "UIX_FacilityBookingCharge_FacilityBookingChargeNo",
                unique: true);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("FacilityBookingID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FacilityBookingID") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var facilityBooking = declaringEntityType.AddNavigation("FacilityBooking",
                runtimeForeignKey,
                onDependent: true,
                typeof(FacilityBooking),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("FacilityBooking", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_FacilityBooking", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeFacilityBooking = principalEntityType.AddNavigation("FacilityBookingCharge_FacilityBooking",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(FacilityBooking).GetProperty("FacilityBookingCharge_FacilityBooking", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_FacilityBookingCharge_FacilityBooking", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_FacilityBookingID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("FacilityInventoryPosID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FacilityInventoryPosID") }),
                principalEntityType);

            var facilityInventoryPos = declaringEntityType.AddNavigation("FacilityInventoryPos",
                runtimeForeignKey,
                onDependent: true,
                typeof(FacilityInventoryPos),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("FacilityInventoryPos", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_FacilityInventoryPos", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeFacilityInventoryPos = principalEntityType.AddNavigation("FacilityBookingCharge_FacilityInventoryPos",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(FacilityInventoryPos).GetProperty("FacilityBookingCharge_FacilityInventoryPos", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityInventoryPos).GetField("_FacilityBookingCharge_FacilityInventoryPos", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_FacilityInventoryPosID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("InOrderPosID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("InOrderPosID") }),
                principalEntityType);

            var inOrderPos = declaringEntityType.AddNavigation("InOrderPos",
                runtimeForeignKey,
                onDependent: true,
                typeof(InOrderPos),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("InOrderPos", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_InOrderPos", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeInOrderPos = principalEntityType.AddNavigation("FacilityBookingCharge_InOrderPos",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(InOrderPos).GetProperty("FacilityBookingCharge_InOrderPos", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InOrderPos).GetField("_FacilityBookingCharge_InOrderPos", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_InOrderPosID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("InwardCPartnerCompMatID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CompanyMaterialID") }),
                principalEntityType);

            var inwardCPartnerCompMat = declaringEntityType.AddNavigation("InwardCPartnerCompMat",
                runtimeForeignKey,
                onDependent: true,
                typeof(CompanyMaterial),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("InwardCPartnerCompMat", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_InwardCPartnerCompMat", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeInwardCPartnerCompMat = principalEntityType.AddNavigation("FacilityBookingCharge_InwardCPartnerCompMat",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(CompanyMaterial).GetProperty("FacilityBookingCharge_InwardCPartnerCompMat", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompanyMaterial).GetField("_FacilityBookingCharge_InwardCPartnerCompMat", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_InCPartnerCompMatID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("InwardCompanyMaterialID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CompanyMaterialID") }),
                principalEntityType);

            var inwardCompanyMaterial = declaringEntityType.AddNavigation("InwardCompanyMaterial",
                runtimeForeignKey,
                onDependent: true,
                typeof(CompanyMaterial),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("InwardCompanyMaterial", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_InwardCompanyMaterial", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeInwardCompanyMaterial = principalEntityType.AddNavigation("FacilityBookingCharge_InwardCompanyMaterial",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(CompanyMaterial).GetProperty("FacilityBookingCharge_InwardCompanyMaterial", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompanyMaterial).GetField("_FacilityBookingCharge_InwardCompanyMaterial", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_InwardCompanyMaterialID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("InwardFacilityChargeID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FacilityChargeID") }),
                principalEntityType);

            var inwardFacilityCharge = declaringEntityType.AddNavigation("InwardFacilityCharge",
                runtimeForeignKey,
                onDependent: true,
                typeof(FacilityCharge),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("InwardFacilityCharge", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_InwardFacilityCharge", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeInwardFacilityCharge = principalEntityType.AddNavigation("FacilityBookingCharge_InwardFacilityCharge",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(FacilityCharge).GetProperty("FacilityBookingCharge_InwardFacilityCharge", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_FacilityBookingCharge_InwardFacilityCharge", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_InwardFacilityChargeID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("InwardFacilityID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FacilityID") }),
                principalEntityType);

            var inwardFacility = declaringEntityType.AddNavigation("InwardFacility",
                runtimeForeignKey,
                onDependent: true,
                typeof(Facility),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("InwardFacility", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_InwardFacility", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeInwardFacility = principalEntityType.AddNavigation("FacilityBookingCharge_InwardFacility",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(Facility).GetProperty("FacilityBookingCharge_InwardFacility", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Facility).GetField("_FacilityBookingCharge_InwardFacility", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_InwardFacilityID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey8(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("InwardFacilityLocationID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FacilityID") }),
                principalEntityType);

            var inwardFacilityLocation = declaringEntityType.AddNavigation("InwardFacilityLocation",
                runtimeForeignKey,
                onDependent: true,
                typeof(Facility),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("InwardFacilityLocation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_InwardFacilityLocation", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeInwardFacilityLocation = principalEntityType.AddNavigation("FacilityBookingCharge_InwardFacilityLocation",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(Facility).GetProperty("FacilityBookingCharge_InwardFacilityLocation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Facility).GetField("_FacilityBookingCharge_InwardFacilityLocation", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_InwardFacilityLocationID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey9(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("InwardFacilityLotID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FacilityLotID") }),
                principalEntityType);

            var inwardFacilityLot = declaringEntityType.AddNavigation("InwardFacilityLot",
                runtimeForeignKey,
                onDependent: true,
                typeof(FacilityLot),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("InwardFacilityLot", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_InwardFacilityLot", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeInwardFacilityLot = principalEntityType.AddNavigation("FacilityBookingCharge_InwardFacilityLot",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(FacilityLot).GetProperty("FacilityBookingCharge_InwardFacilityLot", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityLot).GetField("_FacilityBookingCharge_InwardFacilityLot", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_InwardFacilityLotID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey10(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("InwardMaterialID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MaterialID") }),
                principalEntityType);

            var inwardMaterial = declaringEntityType.AddNavigation("InwardMaterial",
                runtimeForeignKey,
                onDependent: true,
                typeof(Material),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("InwardMaterial", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_InwardMaterial", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeInwardMaterial = principalEntityType.AddNavigation("FacilityBookingCharge_InwardMaterial",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(Material).GetProperty("FacilityBookingCharge_InwardMaterial", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_FacilityBookingCharge_InwardMaterial", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_InwardMaterialID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey11(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("InwardPartslistID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PartslistID") }),
                principalEntityType);

            var inwardPartslist = declaringEntityType.AddNavigation("InwardPartslist",
                runtimeForeignKey,
                onDependent: true,
                typeof(Partslist),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("InwardPartslist", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_InwardPartslist", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeInwardPartslist = principalEntityType.AddNavigation("FacilityBookingCharge_InwardPartslist",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(Partslist).GetProperty("FacilityBookingCharge_InwardPartslist", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Partslist).GetField("_FacilityBookingCharge_InwardPartslist", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_InwardPartsListID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey12(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDBalancingModeID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDBalancingModeID") }),
                principalEntityType);

            var mDBalancingMode = declaringEntityType.AddNavigation("MDBalancingMode",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDBalancingMode),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("MDBalancingMode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_MDBalancingMode", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeMDBalancingMode = principalEntityType.AddNavigation("FacilityBookingCharge_MDBalancingMode",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(MDBalancingMode).GetProperty("FacilityBookingCharge_MDBalancingMode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDBalancingMode).GetField("_FacilityBookingCharge_MDBalancingMode", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_MDBalancingModeID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey13(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDBookingNotAvailableModeID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDBookingNotAvailableModeID") }),
                principalEntityType);

            var mDBookingNotAvailableMode = declaringEntityType.AddNavigation("MDBookingNotAvailableMode",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDBookingNotAvailableMode),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("MDBookingNotAvailableMode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_MDBookingNotAvailableMode", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeMDBookingNotAvailableMode = principalEntityType.AddNavigation("FacilityBookingCharge_MDBookingNotAvailableMode",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(MDBookingNotAvailableMode).GetProperty("FacilityBookingCharge_MDBookingNotAvailableMode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDBookingNotAvailableMode).GetField("_FacilityBookingCharge_MDBookingNotAvailableMode", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_MDBookingNotAvailableModeID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey14(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDMovementReasonID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDMovementReasonID") }),
                principalEntityType);

            var mDMovementReason = declaringEntityType.AddNavigation("MDMovementReason",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDMovementReason),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("MDMovementReason", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_MDMovementReason", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeMDMovementReason = principalEntityType.AddNavigation("FacilityBookingCharge_MDMovementReason",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(MDMovementReason).GetProperty("FacilityBookingCharge_MDMovementReason", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDMovementReason).GetField("_FacilityBookingCharge_MDMovementReason", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_MDMovementReasonID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey15(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDReleaseStateID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDReleaseStateID") }),
                principalEntityType);

            var mDReleaseState = declaringEntityType.AddNavigation("MDReleaseState",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDReleaseState),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("MDReleaseState", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_MDReleaseState", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeMDReleaseState = principalEntityType.AddNavigation("FacilityBookingCharge_MDReleaseState",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(MDReleaseState).GetProperty("FacilityBookingCharge_MDReleaseState", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDReleaseState).GetField("_FacilityBookingCharge_MDReleaseState", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_MDReleaseStateID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey16(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDReservationModeID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDReservationModeID") }),
                principalEntityType);

            var mDReservationMode = declaringEntityType.AddNavigation("MDReservationMode",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDReservationMode),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("MDReservationMode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_MDReservationMode", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeMDReservationMode = principalEntityType.AddNavigation("FacilityBookingCharge_MDReservationMode",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(MDReservationMode).GetProperty("FacilityBookingCharge_MDReservationMode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDReservationMode).GetField("_FacilityBookingCharge_MDReservationMode", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_MDReservationModeID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey17(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDUnitID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDUnitID") }),
                principalEntityType,
                required: true);

            var mDUnit = declaringEntityType.AddNavigation("MDUnit",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDUnit),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("MDUnit", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_MDUnit", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeMDUnit = principalEntityType.AddNavigation("FacilityBookingCharge_MDUnit",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(MDUnit).GetProperty("FacilityBookingCharge_MDUnit", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDUnit).GetField("_FacilityBookingCharge_MDUnit", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_MDUnitID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey18(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDZeroStockStateID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDZeroStockStateID") }),
                principalEntityType);

            var mDZeroStockState = declaringEntityType.AddNavigation("MDZeroStockState",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDZeroStockState),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("MDZeroStockState", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_MDZeroStockState", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeMDZeroStockState = principalEntityType.AddNavigation("FacilityBookingCharge_MDZeroStockState",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(MDZeroStockState).GetProperty("FacilityBookingCharge_MDZeroStockState", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDZeroStockState).GetField("_FacilityBookingCharge_MDZeroStockState", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_MDZeroStockStateID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey19(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("OutOrderPosID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("OutOrderPosID") }),
                principalEntityType);

            var outOrderPos = declaringEntityType.AddNavigation("OutOrderPos",
                runtimeForeignKey,
                onDependent: true,
                typeof(OutOrderPos),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("OutOrderPos", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_OutOrderPos", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeOutOrderPos = principalEntityType.AddNavigation("FacilityBookingCharge_OutOrderPos",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(OutOrderPos).GetProperty("FacilityBookingCharge_OutOrderPos", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrderPos).GetField("_FacilityBookingCharge_OutOrderPos", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_OutOrderPosID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey20(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("OutwardCPartnerCompMatID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CompanyMaterialID") }),
                principalEntityType);

            var outwardCPartnerCompMat = declaringEntityType.AddNavigation("OutwardCPartnerCompMat",
                runtimeForeignKey,
                onDependent: true,
                typeof(CompanyMaterial),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("OutwardCPartnerCompMat", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_OutwardCPartnerCompMat", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeOutwardCPartnerCompMat = principalEntityType.AddNavigation("FacilityBookingCharge_OutwardCPartnerCompMat",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(CompanyMaterial).GetProperty("FacilityBookingCharge_OutwardCPartnerCompMat", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompanyMaterial).GetField("_FacilityBookingCharge_OutwardCPartnerCompMat", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_OutCPartnerCompMatID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey21(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("OutwardCompanyMaterialID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CompanyMaterialID") }),
                principalEntityType);

            var outwardCompanyMaterial = declaringEntityType.AddNavigation("OutwardCompanyMaterial",
                runtimeForeignKey,
                onDependent: true,
                typeof(CompanyMaterial),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("OutwardCompanyMaterial", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_OutwardCompanyMaterial", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeOutwardCompanyMaterial = principalEntityType.AddNavigation("FacilityBookingCharge_OutwardCompanyMaterial",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(CompanyMaterial).GetProperty("FacilityBookingCharge_OutwardCompanyMaterial", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompanyMaterial).GetField("_FacilityBookingCharge_OutwardCompanyMaterial", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_OutwardCompanyMaterialID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey22(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("OutwardFacilityChargeID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FacilityChargeID") }),
                principalEntityType);

            var outwardFacilityCharge = declaringEntityType.AddNavigation("OutwardFacilityCharge",
                runtimeForeignKey,
                onDependent: true,
                typeof(FacilityCharge),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("OutwardFacilityCharge", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_OutwardFacilityCharge", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeOutwardFacilityCharge = principalEntityType.AddNavigation("FacilityBookingCharge_OutwardFacilityCharge",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(FacilityCharge).GetProperty("FacilityBookingCharge_OutwardFacilityCharge", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_FacilityBookingCharge_OutwardFacilityCharge", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_OutwardFacilityChargeID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey23(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("OutwardFacilityID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FacilityID") }),
                principalEntityType);

            var outwardFacility = declaringEntityType.AddNavigation("OutwardFacility",
                runtimeForeignKey,
                onDependent: true,
                typeof(Facility),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("OutwardFacility", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_OutwardFacility", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeOutwardFacility = principalEntityType.AddNavigation("FacilityBookingCharge_OutwardFacility",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(Facility).GetProperty("FacilityBookingCharge_OutwardFacility", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Facility).GetField("_FacilityBookingCharge_OutwardFacility", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_OutwardFacilityID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey24(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("OutwardFacilityLocationID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FacilityID") }),
                principalEntityType);

            var outwardFacilityLocation = declaringEntityType.AddNavigation("OutwardFacilityLocation",
                runtimeForeignKey,
                onDependent: true,
                typeof(Facility),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("OutwardFacilityLocation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_OutwardFacilityLocation", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeOutwardFacilityLocation = principalEntityType.AddNavigation("FacilityBookingCharge_OutwardFacilityLocation",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(Facility).GetProperty("FacilityBookingCharge_OutwardFacilityLocation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Facility).GetField("_FacilityBookingCharge_OutwardFacilityLocation", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_OutwardFacilityLocationID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey25(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("OutwardFacilityLotID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FacilityLotID") }),
                principalEntityType);

            var outwardFacilityLot = declaringEntityType.AddNavigation("OutwardFacilityLot",
                runtimeForeignKey,
                onDependent: true,
                typeof(FacilityLot),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("OutwardFacilityLot", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_OutwardFacilityLot", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeOutwardFacilityLot = principalEntityType.AddNavigation("FacilityBookingCharge_OutwardFacilityLot",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(FacilityLot).GetProperty("FacilityBookingCharge_OutwardFacilityLot", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityLot).GetField("_FacilityBookingCharge_OutwardFacilityLot", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_OutwardFacilityLotID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey26(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("OutwardMaterialID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MaterialID") }),
                principalEntityType);

            var outwardMaterial = declaringEntityType.AddNavigation("OutwardMaterial",
                runtimeForeignKey,
                onDependent: true,
                typeof(Material),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("OutwardMaterial", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_OutwardMaterial", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeOutwardMaterial = principalEntityType.AddNavigation("FacilityBookingCharge_OutwardMaterial",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(Material).GetProperty("FacilityBookingCharge_OutwardMaterial", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_FacilityBookingCharge_OutwardMaterial", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_OutwardMaterialID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey27(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("OutwardPartslistID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PartslistID") }),
                principalEntityType);

            var outwardPartslist = declaringEntityType.AddNavigation("OutwardPartslist",
                runtimeForeignKey,
                onDependent: true,
                typeof(Partslist),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("OutwardPartslist", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_OutwardPartslist", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeOutwardPartslist = principalEntityType.AddNavigation("FacilityBookingCharge_OutwardPartslist",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(Partslist).GetProperty("FacilityBookingCharge_OutwardPartslist", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Partslist).GetField("_FacilityBookingCharge_OutwardPartslist", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_OutwardPartsListID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey28(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PickingPosID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PickingPosID") }),
                principalEntityType);

            var pickingPos = declaringEntityType.AddNavigation("PickingPos",
                runtimeForeignKey,
                onDependent: true,
                typeof(PickingPos),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("PickingPos", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_PickingPos", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargePickingPos = principalEntityType.AddNavigation("FacilityBookingCharge_PickingPos",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(PickingPos).GetProperty("FacilityBookingCharge_PickingPos", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PickingPos).GetField("_FacilityBookingCharge_PickingPos", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_PickingPosID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey29(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ProdOrderPartslistPosFacilityLotID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ProdOrderPartslistPosFacilityLotID") }),
                principalEntityType);

            var prodOrderPartslistPosFacilityLot = declaringEntityType.AddNavigation("ProdOrderPartslistPosFacilityLot",
                runtimeForeignKey,
                onDependent: true,
                typeof(ProdOrderPartslistPosFacilityLot),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("ProdOrderPartslistPosFacilityLot", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_ProdOrderPartslistPosFacilityLot", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeProdOrderPartslistPosFacilityLot = principalEntityType.AddNavigation("FacilityBookingCharge_ProdOrderPartslistPosFacilityLot",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(ProdOrderPartslistPosFacilityLot).GetProperty("FacilityBookingCharge_ProdOrderPartslistPosFacilityLot", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ProdOrderPartslistPosFacilityLot).GetField("_FacilityBookingCharge_ProdOrderPartslistPosFacilityLot", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_ProdOrderPartslistPosFacilityLot");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey30(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ProdOrderPartslistPosID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ProdOrderPartslistPosID") }),
                principalEntityType);

            var prodOrderPartslistPos = declaringEntityType.AddNavigation("ProdOrderPartslistPos",
                runtimeForeignKey,
                onDependent: true,
                typeof(ProdOrderPartslistPos),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("ProdOrderPartslistPos", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_ProdOrderPartslistPos", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeProdOrderPartslistPos = principalEntityType.AddNavigation("FacilityBookingCharge_ProdOrderPartslistPos",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(ProdOrderPartslistPos).GetProperty("FacilityBookingCharge_ProdOrderPartslistPos", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ProdOrderPartslistPos).GetField("_FacilityBookingCharge_ProdOrderPartslistPos", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_ProdOrderPartslistPosID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey31(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ProdOrderPartslistPosRelationID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ProdOrderPartslistPosRelationID") }),
                principalEntityType);

            var prodOrderPartslistPosRelation = declaringEntityType.AddNavigation("ProdOrderPartslistPosRelation",
                runtimeForeignKey,
                onDependent: true,
                typeof(ProdOrderPartslistPosRelation),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("ProdOrderPartslistPosRelation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_ProdOrderPartslistPosRelation", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeProdOrderPartslistPosRelation = principalEntityType.AddNavigation("FacilityBookingCharge_ProdOrderPartslistPosRelation",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(ProdOrderPartslistPosRelation).GetProperty("FacilityBookingCharge_ProdOrderPartslistPosRelation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ProdOrderPartslistPosRelation).GetField("_FacilityBookingCharge_ProdOrderPartslistPosRelation", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_ProdOrderPartslistPosRelation");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey32(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("VBiStackCalculatorACClassID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ACClassID") }),
                principalEntityType);

            var vBiStackCalculatorACClass = declaringEntityType.AddNavigation("VBiStackCalculatorACClass",
                runtimeForeignKey,
                onDependent: true,
                typeof(ACClass),
                propertyInfo: typeof(FacilityBookingCharge).GetProperty("VBiStackCalculatorACClass", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBookingCharge).GetField("_VBiStackCalculatorACClass", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBookingChargeVBiStackCalculatorACClass = principalEntityType.AddNavigation("FacilityBookingCharge_VBiStackCalculatorACClass",
                runtimeForeignKey,
                onDependent: false,
                typeof(ObservableHashSet<FacilityBookingCharge>),
                propertyInfo: typeof(ACClass).GetProperty("FacilityBookingCharge_VBiStackCalculatorACClass", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ACClass).GetField("_FacilityBookingCharge_VBiStackCalculatorACClass", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBookingCharge_StackCalculatorACClassID");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "FacilityBookingCharge");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
