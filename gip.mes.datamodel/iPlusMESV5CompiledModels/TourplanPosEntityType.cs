// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using gip.core.datamodel;

#pragma warning disable 219, 612, 618
#nullable disable

namespace gip.mes.datamodel
{
    internal partial class TourplanPosEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "gip.mes.datamodel.TourplanPos",
                typeof(TourplanPos),
                baseEntityType,
                indexerPropertyInfo: RuntimeEntityType.FindIndexerProperty(typeof(TourplanPos)));

            var tourplanPosID = runtimeEntityType.AddProperty(
                "TourplanPosID",
                typeof(Guid),
                propertyInfo: typeof(TourplanPos).GetProperty("TourplanPosID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TourplanPos).GetField("_TourplanPosID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            tourplanPosID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var comment = runtimeEntityType.AddProperty(
                "Comment",
                typeof(string),
                propertyInfo: typeof(TourplanPos).GetProperty("Comment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TourplanPos).GetField("_Comment", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                unicode: false);
            comment.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var companyAddressID = runtimeEntityType.AddProperty(
                "CompanyAddressID",
                typeof(Guid),
                propertyInfo: typeof(TourplanPos).GetProperty("CompanyAddressID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TourplanPos).GetField("_CompanyAddressID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            companyAddressID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var companyAddressUnloadingpointID = runtimeEntityType.AddProperty(
                "CompanyAddressUnloadingpointID",
                typeof(Guid?),
                propertyInfo: typeof(TourplanPos).GetProperty("CompanyAddressUnloadingpointID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TourplanPos).GetField("_CompanyAddressUnloadingpointID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            companyAddressUnloadingpointID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var companyID = runtimeEntityType.AddProperty(
                "CompanyID",
                typeof(Guid),
                propertyInfo: typeof(TourplanPos).GetProperty("CompanyID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TourplanPos).GetField("_CompanyID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            companyID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insertDate = runtimeEntityType.AddProperty(
                "InsertDate",
                typeof(DateTime),
                propertyInfo: typeof(TourplanPos).GetProperty("InsertDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TourplanPos).GetField("_InsertDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            insertDate.AddAnnotation("Relational:ColumnType", "datetime");
            insertDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insertName = runtimeEntityType.AddProperty(
                "InsertName",
                typeof(string),
                propertyInfo: typeof(TourplanPos).GetProperty("InsertName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TourplanPos).GetField("_InsertName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 20,
                unicode: false);
            insertName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDTimeRangeID = runtimeEntityType.AddProperty(
                "MDTimeRangeID",
                typeof(Guid?),
                propertyInfo: typeof(TourplanPos).GetProperty("MDTimeRangeID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TourplanPos).GetField("_MDTimeRangeID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            mDTimeRangeID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDTourplanPosStateID = runtimeEntityType.AddProperty(
                "MDTourplanPosStateID",
                typeof(Guid),
                propertyInfo: typeof(TourplanPos).GetProperty("MDTourplanPosStateID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TourplanPos).GetField("_MDTourplanPosStateID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            mDTourplanPosStateID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var sortIndex = runtimeEntityType.AddProperty(
                "SortIndex",
                typeof(short),
                propertyInfo: typeof(TourplanPos).GetProperty("SortIndex", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TourplanPos).GetField("_SortIndex", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            sortIndex.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var tourplanID = runtimeEntityType.AddProperty(
                "TourplanID",
                typeof(Guid),
                propertyInfo: typeof(TourplanPos).GetProperty("TourplanID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TourplanPos).GetField("_TourplanID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            tourplanID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var updateDate = runtimeEntityType.AddProperty(
                "UpdateDate",
                typeof(DateTime),
                propertyInfo: typeof(TourplanPos).GetProperty("UpdateDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TourplanPos).GetField("_UpdateDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            updateDate.AddAnnotation("Relational:ColumnType", "datetime");
            updateDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var updateName = runtimeEntityType.AddProperty(
                "UpdateName",
                typeof(string),
                propertyInfo: typeof(TourplanPos).GetProperty("UpdateName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TourplanPos).GetField("_UpdateName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 20,
                unicode: false);
            updateName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var xMLConfig = runtimeEntityType.AddProperty(
                "XMLConfig",
                typeof(string),
                propertyInfo: typeof(VBEntityObject).GetProperty("XMLConfig", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TourplanPos).GetField("_XMLConfig", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            xMLConfig.AddAnnotation("Relational:ColumnType", "text");
            xMLConfig.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lazyLoader = runtimeEntityType.AddServiceProperty(
                "LazyLoader",
                propertyInfo: typeof(TourplanPos).GetProperty("LazyLoader", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var key = runtimeEntityType.AddKey(
                new[] { tourplanPosID });
            runtimeEntityType.SetPrimaryKey(key);

            var nCI_FK_TourplanPos_CompanyAddressID = runtimeEntityType.AddIndex(
                new[] { companyAddressID },
                name: "NCI_FK_TourplanPos_CompanyAddressID");

            var nCI_FK_TourplanPos_CompanyAddressUnloadingpointID = runtimeEntityType.AddIndex(
                new[] { companyAddressUnloadingpointID },
                name: "NCI_FK_TourplanPos_CompanyAddressUnloadingpointID");

            var nCI_FK_TourplanPos_CompanyID = runtimeEntityType.AddIndex(
                new[] { companyID },
                name: "NCI_FK_TourplanPos_CompanyID");

            var nCI_FK_TourplanPos_MDTimeRangeID = runtimeEntityType.AddIndex(
                new[] { mDTimeRangeID },
                name: "NCI_FK_TourplanPos_MDTimeRangeID");

            var nCI_FK_TourplanPos_MDTourplanPosStateID = runtimeEntityType.AddIndex(
                new[] { mDTourplanPosStateID },
                name: "NCI_FK_TourplanPos_MDTourplanPosStateID");

            var nCI_FK_TourplanPos_TourplanID = runtimeEntityType.AddIndex(
                new[] { tourplanID },
                name: "NCI_FK_TourplanPos_TourplanID");

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CompanyAddressID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CompanyAddressID") }),
                principalEntityType,
                required: true);

            var companyAddress = declaringEntityType.AddNavigation("CompanyAddress",
                runtimeForeignKey,
                onDependent: true,
                typeof(CompanyAddress),
                propertyInfo: typeof(TourplanPos).GetProperty("CompanyAddress", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TourplanPos).GetField("_CompanyAddress", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var tourplanPos_CompanyAddress = principalEntityType.AddNavigation("TourplanPos_CompanyAddress",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<TourplanPos>),
                propertyInfo: typeof(CompanyAddress).GetProperty("TourplanPos_CompanyAddress", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompanyAddress).GetField("_TourplanPos_CompanyAddress", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_TourplanPos_CompanyAddressID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CompanyAddressUnloadingpointID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CompanyAddressUnloadingpointID") }),
                principalEntityType);

            var companyAddressUnloadingpoint = declaringEntityType.AddNavigation("CompanyAddressUnloadingpoint",
                runtimeForeignKey,
                onDependent: true,
                typeof(CompanyAddressUnloadingpoint),
                propertyInfo: typeof(TourplanPos).GetProperty("CompanyAddressUnloadingpoint", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TourplanPos).GetField("_CompanyAddressUnloadingpoint", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var tourplanPos_CompanyAddressUnloadingpoint = principalEntityType.AddNavigation("TourplanPos_CompanyAddressUnloadingpoint",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<TourplanPos>),
                propertyInfo: typeof(CompanyAddressUnloadingpoint).GetProperty("TourplanPos_CompanyAddressUnloadingpoint", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompanyAddressUnloadingpoint).GetField("_TourplanPos_CompanyAddressUnloadingpoint", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_TourplanPos_CompanyAddressUnloadingPointID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CompanyID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CompanyID") }),
                principalEntityType,
                required: true);

            var company = declaringEntityType.AddNavigation("Company",
                runtimeForeignKey,
                onDependent: true,
                typeof(Company),
                propertyInfo: typeof(TourplanPos).GetProperty("Company", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TourplanPos).GetField("_Company", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var tourplanPos_Company = principalEntityType.AddNavigation("TourplanPos_Company",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<TourplanPos>),
                propertyInfo: typeof(Company).GetProperty("TourplanPos_Company", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Company).GetField("_TourplanPos_Company", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_TourplanPos_CompanyID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDTimeRangeID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDTimeRangeID") }),
                principalEntityType);

            var mDTimeRange = declaringEntityType.AddNavigation("MDTimeRange",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDTimeRange),
                propertyInfo: typeof(TourplanPos).GetProperty("MDTimeRange", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TourplanPos).GetField("_MDTimeRange", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var tourplanPos_MDTimeRange = principalEntityType.AddNavigation("TourplanPos_MDTimeRange",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<TourplanPos>),
                propertyInfo: typeof(MDTimeRange).GetProperty("TourplanPos_MDTimeRange", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDTimeRange).GetField("_TourplanPos_MDTimeRange", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_TourplanPos_MDTimeRangeID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDTourplanPosStateID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDTourplanPosStateID") }),
                principalEntityType,
                required: true);

            var mDTourplanPosState = declaringEntityType.AddNavigation("MDTourplanPosState",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDTourplanPosState),
                propertyInfo: typeof(TourplanPos).GetProperty("MDTourplanPosState", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TourplanPos).GetField("_MDTourplanPosState", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var tourplanPos_MDTourplanPosState = principalEntityType.AddNavigation("TourplanPos_MDTourplanPosState",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<TourplanPos>),
                propertyInfo: typeof(MDTourplanPosState).GetProperty("TourplanPos_MDTourplanPosState", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDTourplanPosState).GetField("_TourplanPos_MDTourplanPosState", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_TourplanPos_MDTourplanPosStateID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("TourplanID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("TourplanID") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var tourplan = declaringEntityType.AddNavigation("Tourplan",
                runtimeForeignKey,
                onDependent: true,
                typeof(Tourplan),
                propertyInfo: typeof(TourplanPos).GetProperty("Tourplan", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TourplanPos).GetField("_Tourplan", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var tourplanPos_Tourplan = principalEntityType.AddNavigation("TourplanPos_Tourplan",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<TourplanPos>),
                propertyInfo: typeof(Tourplan).GetProperty("TourplanPos_Tourplan", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Tourplan).GetField("_TourplanPos_Tourplan", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_TourplanPos_TourplanID");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "TourplanPos");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
