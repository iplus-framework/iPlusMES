// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using gip.core.datamodel;

#pragma warning disable 219, 612, 618
#nullable disable

namespace gip.mes.datamodel
{
    [EntityFrameworkInternal]
    public partial class ProdOrderBatchEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "gip.mes.datamodel.ProdOrderBatch",
                typeof(ProdOrderBatch),
                baseEntityType,
                indexerPropertyInfo: RuntimeEntityType.FindIndexerProperty(typeof(ProdOrderBatch)),
                propertyCount: 11,
                navigationCount: 5,
                servicePropertyCount: 1,
                foreignKeyCount: 3,
                namedIndexCount: 5,
                keyCount: 1);

            var prodOrderBatchID = runtimeEntityType.AddProperty(
                "ProdOrderBatchID",
                typeof(Guid),
                propertyInfo: typeof(ProdOrderBatch).GetProperty("ProdOrderBatchID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ProdOrderBatch).GetField("_ProdOrderBatchID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            prodOrderBatchID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var batchSeqNo = runtimeEntityType.AddProperty(
                "BatchSeqNo",
                typeof(int),
                propertyInfo: typeof(ProdOrderBatch).GetProperty("BatchSeqNo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ProdOrderBatch).GetField("_BatchSeqNo", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            batchSeqNo.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insertDate = runtimeEntityType.AddProperty(
                "InsertDate",
                typeof(DateTime),
                propertyInfo: typeof(ProdOrderBatch).GetProperty("InsertDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ProdOrderBatch).GetField("_InsertDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            insertDate.AddAnnotation("Relational:ColumnType", "datetime");
            insertDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insertName = runtimeEntityType.AddProperty(
                "InsertName",
                typeof(string),
                propertyInfo: typeof(ProdOrderBatch).GetProperty("InsertName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ProdOrderBatch).GetField("_InsertName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 20,
                unicode: false);
            insertName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDProdOrderStateID = runtimeEntityType.AddProperty(
                "MDProdOrderStateID",
                typeof(Guid),
                propertyInfo: typeof(ProdOrderBatch).GetProperty("MDProdOrderStateID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ProdOrderBatch).GetField("_MDProdOrderStateID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            mDProdOrderStateID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var prodOrderBatchNo = runtimeEntityType.AddProperty(
                "ProdOrderBatchNo",
                typeof(string),
                propertyInfo: typeof(ProdOrderBatch).GetProperty("ProdOrderBatchNo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ProdOrderBatch).GetField("_ProdOrderBatchNo", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 20,
                unicode: false);
            prodOrderBatchNo.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var prodOrderBatchPlanID = runtimeEntityType.AddProperty(
                "ProdOrderBatchPlanID",
                typeof(Guid?),
                propertyInfo: typeof(ProdOrderBatch).GetProperty("ProdOrderBatchPlanID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ProdOrderBatch).GetField("_ProdOrderBatchPlanID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            prodOrderBatchPlanID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var prodOrderPartslistID = runtimeEntityType.AddProperty(
                "ProdOrderPartslistID",
                typeof(Guid),
                propertyInfo: typeof(ProdOrderBatch).GetProperty("ProdOrderPartslistID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ProdOrderBatch).GetField("_ProdOrderPartslistID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            prodOrderPartslistID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var updateDate = runtimeEntityType.AddProperty(
                "UpdateDate",
                typeof(DateTime),
                propertyInfo: typeof(ProdOrderBatch).GetProperty("UpdateDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ProdOrderBatch).GetField("_UpdateDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            updateDate.AddAnnotation("Relational:ColumnType", "datetime");
            updateDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var updateName = runtimeEntityType.AddProperty(
                "UpdateName",
                typeof(string),
                propertyInfo: typeof(ProdOrderBatch).GetProperty("UpdateName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ProdOrderBatch).GetField("_UpdateName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 20,
                unicode: false);
            updateName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var xMLConfig = runtimeEntityType.AddProperty(
                "XMLConfig",
                typeof(string),
                propertyInfo: typeof(VBEntityObject).GetProperty("XMLConfig", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ProdOrderBatch).GetField("_XMLConfig", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            xMLConfig.AddAnnotation("Relational:ColumnType", "text");
            xMLConfig.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lazyLoader = runtimeEntityType.AddServiceProperty(
                "LazyLoader",
                propertyInfo: typeof(ProdOrderBatch).GetProperty("LazyLoader", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                serviceType: typeof(ILazyLoader));

            var key = runtimeEntityType.AddKey(
                new[] { prodOrderBatchID });
            runtimeEntityType.SetPrimaryKey(key);

            var nCI_FK_ProdOrderBatch_MDProdOrderStateID = runtimeEntityType.AddIndex(
                new[] { mDProdOrderStateID },
                name: "NCI_FK_ProdOrderBatch_MDProdOrderStateID");

            var nCI_FK_ProdOrderBatch_ProdOrderBatchPlanID = runtimeEntityType.AddIndex(
                new[] { prodOrderBatchPlanID },
                name: "NCI_FK_ProdOrderBatch_ProdOrderBatchPlanID");

            var nCI_FK_ProdOrderBatch_ProdOrderPartslistID = runtimeEntityType.AddIndex(
                new[] { prodOrderPartslistID },
                name: "NCI_FK_ProdOrderBatch_ProdOrderPartslistID");

            var nCI_ProdOrderBatch_ProdOrderBatchNo = runtimeEntityType.AddIndex(
                new[] { prodOrderBatchNo },
                name: "NCI_ProdOrderBatch_ProdOrderBatchNo");

            var uIX_ProdOrderBatch_ProdOrderBatchNo = runtimeEntityType.AddIndex(
                new[] { prodOrderBatchNo },
                name: "UIX_ProdOrderBatch_ProdOrderBatchNo",
                unique: true);
            uIX_ProdOrderBatch_ProdOrderBatchNo.AddAnnotation("Relational:Filter", null);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDProdOrderStateID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDProdOrderStateID") }),
                principalEntityType,
                required: true);

            var mDProdOrderState = declaringEntityType.AddNavigation("MDProdOrderState",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDProdOrderState),
                propertyInfo: typeof(ProdOrderBatch).GetProperty("MDProdOrderState", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ProdOrderBatch).GetField("_MDProdOrderState", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var prodOrderBatch_MDProdOrderState = principalEntityType.AddNavigation("ProdOrderBatch_MDProdOrderState",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ProdOrderBatch>),
                propertyInfo: typeof(MDProdOrderState).GetProperty("ProdOrderBatch_MDProdOrderState", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDProdOrderState).GetField("_ProdOrderBatch_MDProdOrderState", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ProdOrderBatch_MDProdOrderState");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ProdOrderBatchPlanID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ProdOrderBatchPlanID") }),
                principalEntityType);

            var prodOrderBatchPlan = declaringEntityType.AddNavigation("ProdOrderBatchPlan",
                runtimeForeignKey,
                onDependent: true,
                typeof(ProdOrderBatchPlan),
                propertyInfo: typeof(ProdOrderBatch).GetProperty("ProdOrderBatchPlan", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ProdOrderBatch).GetField("_ProdOrderBatchPlan", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var prodOrderBatch_ProdOrderBatchPlan = principalEntityType.AddNavigation("ProdOrderBatch_ProdOrderBatchPlan",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ProdOrderBatch>),
                propertyInfo: typeof(ProdOrderBatchPlan).GetProperty("ProdOrderBatch_ProdOrderBatchPlan", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ProdOrderBatchPlan).GetField("_ProdOrderBatch_ProdOrderBatchPlan", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ProdOrderBatch_ProdOrderBatchPlan");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ProdOrderPartslistID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ProdOrderPartslistID") }),
                principalEntityType,
                required: true);

            var prodOrderPartslist = declaringEntityType.AddNavigation("ProdOrderPartslist",
                runtimeForeignKey,
                onDependent: true,
                typeof(ProdOrderPartslist),
                propertyInfo: typeof(ProdOrderBatch).GetProperty("ProdOrderPartslist", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ProdOrderBatch).GetField("_ProdOrderPartslist", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var prodOrderBatch_ProdOrderPartslist = principalEntityType.AddNavigation("ProdOrderBatch_ProdOrderPartslist",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ProdOrderBatch>),
                propertyInfo: typeof(ProdOrderPartslist).GetProperty("ProdOrderBatch_ProdOrderPartslist", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ProdOrderPartslist).GetField("_ProdOrderBatch_ProdOrderPartslist", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ProdOrderBatch_ProdOrderPartslist");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "ProdOrderBatch");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
