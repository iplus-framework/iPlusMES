// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using gip.core.datamodel;

#pragma warning disable 219, 612, 618
#nullable disable

namespace gip.mes.datamodel
{
    [EntityFrameworkInternal]
    public partial class FacilityBookingEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "gip.mes.datamodel.FacilityBooking",
                typeof(FacilityBooking),
                baseEntityType,
                changeTrackingStrategy: ChangeTrackingStrategy.ChangedNotifications,
                indexerPropertyInfo: RuntimeEntityType.FindIndexerProperty(typeof(FacilityBooking)),
                propertyCount: 66,
                navigationCount: 33,
                servicePropertyCount: 1,
                foreignKeyCount: 31,
                unnamedIndexCount: 3,
                namedIndexCount: 34,
                keyCount: 1);

            var facilityBookingID = runtimeEntityType.AddProperty(
                "FacilityBookingID",
                typeof(Guid),
                propertyInfo: typeof(FacilityBooking).GetProperty("FacilityBookingID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_FacilityBookingID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            facilityBookingID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var bookingMessage = runtimeEntityType.AddProperty(
                "BookingMessage",
                typeof(string),
                propertyInfo: typeof(FacilityBooking).GetProperty("BookingMessage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_BookingMessage", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            bookingMessage.AddAnnotation("Relational:ColumnType", "text");
            bookingMessage.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var bookingSucceeded = runtimeEntityType.AddProperty(
                "BookingSucceeded",
                typeof(bool),
                propertyInfo: typeof(FacilityBooking).GetProperty("BookingSucceeded", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_BookingSucceeded", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                sentinel: false);
            bookingSucceeded.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var cPartnerCompanyID = runtimeEntityType.AddProperty(
                "CPartnerCompanyID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("CPartnerCompanyID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_CPartnerCompanyID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            cPartnerCompanyID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var comment = runtimeEntityType.AddProperty(
                "Comment",
                typeof(string),
                propertyInfo: typeof(FacilityBooking).GetProperty("Comment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_Comment", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true,
                unicode: false);
            comment.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var dontAllowNegativeStock = runtimeEntityType.AddProperty(
                "DontAllowNegativeStock",
                typeof(bool?),
                propertyInfo: typeof(FacilityBooking).GetProperty("DontAllowNegativeStock", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_DontAllowNegativeStock", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            dontAllowNegativeStock.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var expirationDate = runtimeEntityType.AddProperty(
                "ExpirationDate",
                typeof(DateTime?),
                propertyInfo: typeof(FacilityBooking).GetProperty("ExpirationDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_ExpirationDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            expirationDate.AddAnnotation("Relational:ColumnType", "datetime");
            expirationDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var facilityBookingNo = runtimeEntityType.AddProperty(
                "FacilityBookingNo",
                typeof(string),
                propertyInfo: typeof(FacilityBooking).GetProperty("FacilityBookingNo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_FacilityBookingNo", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                maxLength: 20,
                unicode: false);
            facilityBookingNo.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var facilityBookingTypeIndex = runtimeEntityType.AddProperty(
                "FacilityBookingTypeIndex",
                typeof(short),
                propertyInfo: typeof(FacilityBooking).GetProperty("FacilityBookingTypeIndex", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_FacilityBookingTypeIndex", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                sentinel: (short)0);
            facilityBookingTypeIndex.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var facilityInventoryPosID = runtimeEntityType.AddProperty(
                "FacilityInventoryPosID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("FacilityInventoryPosID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_FacilityInventoryPosID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            facilityInventoryPosID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var historyID = runtimeEntityType.AddProperty(
                "HistoryID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("HistoryID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_HistoryID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            historyID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var ignoreManagement = runtimeEntityType.AddProperty(
                "IgnoreManagement",
                typeof(bool?),
                propertyInfo: typeof(FacilityBooking).GetProperty("IgnoreManagement", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_IgnoreManagement", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            ignoreManagement.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inOrderPosID = runtimeEntityType.AddProperty(
                "InOrderPosID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("InOrderPosID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_InOrderPosID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            inOrderPosID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insertDate = runtimeEntityType.AddProperty(
                "InsertDate",
                typeof(DateTime),
                propertyInfo: typeof(FacilityBooking).GetProperty("InsertDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_InsertDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            insertDate.AddAnnotation("Relational:ColumnType", "datetime");
            insertDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insertName = runtimeEntityType.AddProperty(
                "InsertName",
                typeof(string),
                propertyInfo: typeof(FacilityBooking).GetProperty("InsertName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_InsertName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                maxLength: 20,
                unicode: false);
            insertName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inwardCompanyMaterialID = runtimeEntityType.AddProperty(
                "InwardCompanyMaterialID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("InwardCompanyMaterialID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_InwardCompanyMaterialID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            inwardCompanyMaterialID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inwardFacilityChargeID = runtimeEntityType.AddProperty(
                "InwardFacilityChargeID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("InwardFacilityChargeID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_InwardFacilityChargeID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            inwardFacilityChargeID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inwardFacilityID = runtimeEntityType.AddProperty(
                "InwardFacilityID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("InwardFacilityID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_InwardFacilityID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            inwardFacilityID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inwardFacilityLocationID = runtimeEntityType.AddProperty(
                "InwardFacilityLocationID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("InwardFacilityLocationID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_InwardFacilityLocationID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            inwardFacilityLocationID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inwardFacilityLotID = runtimeEntityType.AddProperty(
                "InwardFacilityLotID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("InwardFacilityLotID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_InwardFacilityLotID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            inwardFacilityLotID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inwardHandlingUnit = runtimeEntityType.AddProperty(
                "InwardHandlingUnit",
                typeof(string),
                propertyInfo: typeof(FacilityBooking).GetProperty("InwardHandlingUnit", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_InwardHandlingUnit", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            inwardHandlingUnit.AddAnnotation("Relational:ColumnType", "text");
            inwardHandlingUnit.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inwardMaterialID = runtimeEntityType.AddProperty(
                "InwardMaterialID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("InwardMaterialID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_InwardMaterialID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            inwardMaterialID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inwardPartslistID = runtimeEntityType.AddProperty(
                "InwardPartslistID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("InwardPartslistID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_InwardPartslistID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            inwardPartslistID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inwardQuantity = runtimeEntityType.AddProperty(
                "InwardQuantity",
                typeof(double),
                propertyInfo: typeof(FacilityBooking).GetProperty("InwardQuantity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_InwardQuantity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                sentinel: 0.0);
            inwardQuantity.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inwardQuantityAmb = runtimeEntityType.AddProperty(
                "InwardQuantityAmb",
                typeof(double),
                propertyInfo: typeof(FacilityBooking).GetProperty("InwardQuantityAmb", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_InwardQuantityAmb", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                sentinel: 0.0);
            inwardQuantityAmb.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inwardTargetQuantity = runtimeEntityType.AddProperty(
                "InwardTargetQuantity",
                typeof(double),
                propertyInfo: typeof(FacilityBooking).GetProperty("InwardTargetQuantity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_InwardTargetQuantity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                sentinel: 0.0);
            inwardTargetQuantity.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inwardTargetQuantityAmb = runtimeEntityType.AddProperty(
                "InwardTargetQuantityAmb",
                typeof(double),
                propertyInfo: typeof(FacilityBooking).GetProperty("InwardTargetQuantityAmb", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_InwardTargetQuantityAmb", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                sentinel: 0.0);
            inwardTargetQuantityAmb.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inwardXMLIdentification = runtimeEntityType.AddProperty(
                "InwardXMLIdentification",
                typeof(string),
                propertyInfo: typeof(FacilityBooking).GetProperty("InwardXMLIdentification", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_InwardXMLIdentification", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            inwardXMLIdentification.AddAnnotation("Relational:ColumnType", "text");
            inwardXMLIdentification.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDBalancingModeID = runtimeEntityType.AddProperty(
                "MDBalancingModeID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("MDBalancingModeID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_MDBalancingModeID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            mDBalancingModeID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDBookingNotAvailableModeID = runtimeEntityType.AddProperty(
                "MDBookingNotAvailableModeID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("MDBookingNotAvailableModeID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_MDBookingNotAvailableModeID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            mDBookingNotAvailableModeID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDMovementReasonID = runtimeEntityType.AddProperty(
                "MDMovementReasonID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("MDMovementReasonID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_MDMovementReasonID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            mDMovementReasonID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDReleaseStateID = runtimeEntityType.AddProperty(
                "MDReleaseStateID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("MDReleaseStateID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_MDReleaseStateID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            mDReleaseStateID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDReservationModeID = runtimeEntityType.AddProperty(
                "MDReservationModeID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("MDReservationModeID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_MDReservationModeID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            mDReservationModeID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDUnitID = runtimeEntityType.AddProperty(
                "MDUnitID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("MDUnitID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_MDUnitID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            mDUnitID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDZeroStockStateID = runtimeEntityType.AddProperty(
                "MDZeroStockStateID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("MDZeroStockStateID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_MDZeroStockStateID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            mDZeroStockStateID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var materialProcessStateIndex = runtimeEntityType.AddProperty(
                "MaterialProcessStateIndex",
                typeof(short),
                propertyInfo: typeof(FacilityBooking).GetProperty("MaterialProcessStateIndex", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_MaterialProcessStateIndex", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                sentinel: (short)0);
            materialProcessStateIndex.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var minimumDurability = runtimeEntityType.AddProperty(
                "MinimumDurability",
                typeof(int?),
                propertyInfo: typeof(FacilityBooking).GetProperty("MinimumDurability", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_MinimumDurability", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            minimumDurability.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var noInwardOutwardBalancing = runtimeEntityType.AddProperty(
                "NoInwardOutwardBalancing",
                typeof(bool),
                propertyInfo: typeof(FacilityBooking).GetProperty("NoInwardOutwardBalancing", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_NoInwardOutwardBalancing", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                sentinel: false);
            noInwardOutwardBalancing.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outOrderPosID = runtimeEntityType.AddProperty(
                "OutOrderPosID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("OutOrderPosID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_OutOrderPosID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            outOrderPosID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outwardCompanyMaterialID = runtimeEntityType.AddProperty(
                "OutwardCompanyMaterialID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("OutwardCompanyMaterialID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_OutwardCompanyMaterialID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            outwardCompanyMaterialID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outwardFacilityChargeID = runtimeEntityType.AddProperty(
                "OutwardFacilityChargeID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("OutwardFacilityChargeID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_OutwardFacilityChargeID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            outwardFacilityChargeID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outwardFacilityID = runtimeEntityType.AddProperty(
                "OutwardFacilityID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("OutwardFacilityID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_OutwardFacilityID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            outwardFacilityID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outwardFacilityLocationID = runtimeEntityType.AddProperty(
                "OutwardFacilityLocationID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("OutwardFacilityLocationID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_OutwardFacilityLocationID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            outwardFacilityLocationID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outwardFacilityLotID = runtimeEntityType.AddProperty(
                "OutwardFacilityLotID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("OutwardFacilityLotID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_OutwardFacilityLotID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            outwardFacilityLotID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outwardHandlingUnit = runtimeEntityType.AddProperty(
                "OutwardHandlingUnit",
                typeof(string),
                propertyInfo: typeof(FacilityBooking).GetProperty("OutwardHandlingUnit", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_OutwardHandlingUnit", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            outwardHandlingUnit.AddAnnotation("Relational:ColumnType", "text");
            outwardHandlingUnit.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outwardMaterialID = runtimeEntityType.AddProperty(
                "OutwardMaterialID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("OutwardMaterialID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_OutwardMaterialID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            outwardMaterialID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outwardPartslistID = runtimeEntityType.AddProperty(
                "OutwardPartslistID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("OutwardPartslistID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_OutwardPartslistID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            outwardPartslistID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outwardQuantity = runtimeEntityType.AddProperty(
                "OutwardQuantity",
                typeof(double),
                propertyInfo: typeof(FacilityBooking).GetProperty("OutwardQuantity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_OutwardQuantity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                sentinel: 0.0);
            outwardQuantity.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outwardQuantityAmb = runtimeEntityType.AddProperty(
                "OutwardQuantityAmb",
                typeof(double),
                propertyInfo: typeof(FacilityBooking).GetProperty("OutwardQuantityAmb", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_OutwardQuantityAmb", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                sentinel: 0.0);
            outwardQuantityAmb.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outwardTargetQuantity = runtimeEntityType.AddProperty(
                "OutwardTargetQuantity",
                typeof(double),
                propertyInfo: typeof(FacilityBooking).GetProperty("OutwardTargetQuantity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_OutwardTargetQuantity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                sentinel: 0.0);
            outwardTargetQuantity.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outwardTargetQuantityAmb = runtimeEntityType.AddProperty(
                "OutwardTargetQuantityAmb",
                typeof(double),
                propertyInfo: typeof(FacilityBooking).GetProperty("OutwardTargetQuantityAmb", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_OutwardTargetQuantityAmb", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                sentinel: 0.0);
            outwardTargetQuantityAmb.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outwardXMLIdentification = runtimeEntityType.AddProperty(
                "OutwardXMLIdentification",
                typeof(string),
                propertyInfo: typeof(FacilityBooking).GetProperty("OutwardXMLIdentification", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_OutwardXMLIdentification", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            outwardXMLIdentification.AddAnnotation("Relational:ColumnType", "text");
            outwardXMLIdentification.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var pickingPosID = runtimeEntityType.AddProperty(
                "PickingPosID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("PickingPosID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_PickingPosID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            pickingPosID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var prodOrderPartslistPosFacilityLotID = runtimeEntityType.AddProperty(
                "ProdOrderPartslistPosFacilityLotID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("ProdOrderPartslistPosFacilityLotID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_ProdOrderPartslistPosFacilityLotID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            prodOrderPartslistPosFacilityLotID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var prodOrderPartslistPosID = runtimeEntityType.AddProperty(
                "ProdOrderPartslistPosID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("ProdOrderPartslistPosID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_ProdOrderPartslistPosID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            prodOrderPartslistPosID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var prodOrderPartslistPosRelationID = runtimeEntityType.AddProperty(
                "ProdOrderPartslistPosRelationID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("ProdOrderPartslistPosRelationID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_ProdOrderPartslistPosRelationID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            prodOrderPartslistPosRelationID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var productionDate = runtimeEntityType.AddProperty(
                "ProductionDate",
                typeof(DateTime?),
                propertyInfo: typeof(FacilityBooking).GetProperty("ProductionDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_ProductionDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            productionDate.AddAnnotation("Relational:ColumnType", "datetime");
            productionDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var propertyACUrl = runtimeEntityType.AddProperty(
                "PropertyACUrl",
                typeof(string),
                propertyInfo: typeof(FacilityBooking).GetProperty("PropertyACUrl", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_PropertyACUrl", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true,
                unicode: false);
            propertyACUrl.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var quantityIsAbsolute = runtimeEntityType.AddProperty(
                "QuantityIsAbsolute",
                typeof(bool?),
                propertyInfo: typeof(FacilityBooking).GetProperty("QuantityIsAbsolute", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_QuantityIsAbsolute", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            quantityIsAbsolute.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var recipeOrFactoryInfo = runtimeEntityType.AddProperty(
                "RecipeOrFactoryInfo",
                typeof(string),
                propertyInfo: typeof(FacilityBooking).GetProperty("RecipeOrFactoryInfo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_RecipeOrFactoryInfo", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true,
                maxLength: 50,
                unicode: false);
            recipeOrFactoryInfo.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var setCompleted = runtimeEntityType.AddProperty(
                "SetCompleted",
                typeof(bool),
                propertyInfo: typeof(FacilityBooking).GetProperty("SetCompleted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_SetCompleted", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                sentinel: false);
            setCompleted.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var shiftBookingReverse = runtimeEntityType.AddProperty(
                "ShiftBookingReverse",
                typeof(bool),
                propertyInfo: typeof(FacilityBooking).GetProperty("ShiftBookingReverse", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_ShiftBookingReverse", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                sentinel: false);
            shiftBookingReverse.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var storageDate = runtimeEntityType.AddProperty(
                "StorageDate",
                typeof(DateTime?),
                propertyInfo: typeof(FacilityBooking).GetProperty("StorageDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_StorageDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            storageDate.AddAnnotation("Relational:ColumnType", "datetime");
            storageDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var storageLife = runtimeEntityType.AddProperty(
                "StorageLife",
                typeof(short),
                propertyInfo: typeof(FacilityBooking).GetProperty("StorageLife", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_StorageLife", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                sentinel: (short)0);
            storageLife.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vBiStackCalculatorACClassID = runtimeEntityType.AddProperty(
                "VBiStackCalculatorACClassID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityBooking).GetProperty("VBiStackCalculatorACClassID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_VBiStackCalculatorACClassID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            vBiStackCalculatorACClassID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var xMLConfig = runtimeEntityType.AddProperty(
                "XMLConfig",
                typeof(string),
                propertyInfo: typeof(VBEntityObject).GetProperty("XMLConfig", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_XMLConfig", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            xMLConfig.AddAnnotation("Relational:ColumnType", "text");
            xMLConfig.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lazyLoader = runtimeEntityType.AddServiceProperty(
                "LazyLoader",
                propertyInfo: typeof(FacilityBooking).GetProperty("LazyLoader", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                serviceType: typeof(ILazyLoader));

            var key = runtimeEntityType.AddKey(
                new[] { facilityBookingID });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { facilityInventoryPosID });

            var index0 = runtimeEntityType.AddIndex(
                new[] { pickingPosID });

            var index1 = runtimeEntityType.AddIndex(
                new[] { prodOrderPartslistPosFacilityLotID });

            var nCI_FK_FacilityBooking_CPartnerCompanyID = runtimeEntityType.AddIndex(
                new[] { cPartnerCompanyID },
                name: "NCI_FK_FacilityBooking_CPartnerCompanyID");

            var nCI_FK_FacilityBooking_HistoryID = runtimeEntityType.AddIndex(
                new[] { historyID },
                name: "NCI_FK_FacilityBooking_HistoryID");

            var nCI_FK_FacilityBooking_InOrderPosID = runtimeEntityType.AddIndex(
                new[] { inOrderPosID },
                name: "NCI_FK_FacilityBooking_InOrderPosID");

            var nCI_FK_FacilityBooking_InwardCompanyMaterialID = runtimeEntityType.AddIndex(
                new[] { inwardCompanyMaterialID },
                name: "NCI_FK_FacilityBooking_InwardCompanyMaterialID");

            var nCI_FK_FacilityBooking_InwardFacilityChargeID = runtimeEntityType.AddIndex(
                new[] { inwardFacilityChargeID },
                name: "NCI_FK_FacilityBooking_InwardFacilityChargeID");

            var nCI_FK_FacilityBooking_InwardFacilityID = runtimeEntityType.AddIndex(
                new[] { inwardFacilityID },
                name: "NCI_FK_FacilityBooking_InwardFacilityID");

            var nCI_FK_FacilityBooking_InwardFacilityLocationID = runtimeEntityType.AddIndex(
                new[] { inwardFacilityLocationID },
                name: "NCI_FK_FacilityBooking_InwardFacilityLocationID");

            var nCI_FK_FacilityBooking_InwardFacilityLotID = runtimeEntityType.AddIndex(
                new[] { inwardFacilityLotID },
                name: "NCI_FK_FacilityBooking_InwardFacilityLotID");

            var nCI_FK_FacilityBooking_InwardMaterialID = runtimeEntityType.AddIndex(
                new[] { inwardMaterialID },
                name: "NCI_FK_FacilityBooking_InwardMaterialID");

            var nCI_FK_FacilityBooking_InwardPartslistID = runtimeEntityType.AddIndex(
                new[] { inwardPartslistID },
                name: "NCI_FK_FacilityBooking_InwardPartslistID");

            var nCI_FK_FacilityBooking_MDBalancingModeID = runtimeEntityType.AddIndex(
                new[] { mDBalancingModeID },
                name: "NCI_FK_FacilityBooking_MDBalancingModeID");

            var nCI_FK_FacilityBooking_MDBookingNotAvailableModeID = runtimeEntityType.AddIndex(
                new[] { mDBookingNotAvailableModeID },
                name: "NCI_FK_FacilityBooking_MDBookingNotAvailableModeID");

            var nCI_FK_FacilityBooking_MDMovementReasonID = runtimeEntityType.AddIndex(
                new[] { mDMovementReasonID },
                name: "NCI_FK_FacilityBooking_MDMovementReasonID");

            var nCI_FK_FacilityBooking_MDReleaseStateID = runtimeEntityType.AddIndex(
                new[] { mDReleaseStateID },
                name: "NCI_FK_FacilityBooking_MDReleaseStateID");

            var nCI_FK_FacilityBooking_MDReservationModeID = runtimeEntityType.AddIndex(
                new[] { mDReservationModeID },
                name: "NCI_FK_FacilityBooking_MDReservationModeID");

            var nCI_FK_FacilityBooking_MDUnitID = runtimeEntityType.AddIndex(
                new[] { mDUnitID },
                name: "NCI_FK_FacilityBooking_MDUnitID");

            var nCI_FK_FacilityBooking_MDZeroStockStateID = runtimeEntityType.AddIndex(
                new[] { mDZeroStockStateID },
                name: "NCI_FK_FacilityBooking_MDZeroStockStateID");

            var nCI_FK_FacilityBooking_OutOrderPosID = runtimeEntityType.AddIndex(
                new[] { outOrderPosID },
                name: "NCI_FK_FacilityBooking_OutOrderPosID");

            var nCI_FK_FacilityBooking_OutwardCompanyMaterialID = runtimeEntityType.AddIndex(
                new[] { outwardCompanyMaterialID },
                name: "NCI_FK_FacilityBooking_OutwardCompanyMaterialID");

            var nCI_FK_FacilityBooking_OutwardFacilityChargeID = runtimeEntityType.AddIndex(
                new[] { outwardFacilityChargeID },
                name: "NCI_FK_FacilityBooking_OutwardFacilityChargeID");

            var nCI_FK_FacilityBooking_OutwardFacilityID = runtimeEntityType.AddIndex(
                new[] { outwardFacilityID },
                name: "NCI_FK_FacilityBooking_OutwardFacilityID");

            var nCI_FK_FacilityBooking_OutwardFacilityLocationID = runtimeEntityType.AddIndex(
                new[] { outwardFacilityLocationID },
                name: "NCI_FK_FacilityBooking_OutwardFacilityLocationID");

            var nCI_FK_FacilityBooking_OutwardFacilityLotID = runtimeEntityType.AddIndex(
                new[] { outwardFacilityLotID },
                name: "NCI_FK_FacilityBooking_OutwardFacilityLotID");

            var nCI_FK_FacilityBooking_OutwardMaterialID = runtimeEntityType.AddIndex(
                new[] { outwardMaterialID },
                name: "NCI_FK_FacilityBooking_OutwardMaterialID");

            var nCI_FK_FacilityBooking_OutwardPartslistID = runtimeEntityType.AddIndex(
                new[] { outwardPartslistID },
                name: "NCI_FK_FacilityBooking_OutwardPartslistID");

            var nCI_FK_FacilityBooking_ProdOrderPartslistPosID = runtimeEntityType.AddIndex(
                new[] { prodOrderPartslistPosID },
                name: "NCI_FK_FacilityBooking_ProdOrderPartslistPosID");

            var nCI_FK_FacilityBooking_ProdOrderPartslistPosRelationID = runtimeEntityType.AddIndex(
                new[] { prodOrderPartslistPosRelationID },
                name: "NCI_FK_FacilityBooking_ProdOrderPartslistPosRelationID");

            var nCI_FK_FacilityBooking_VBiStackCalculatorACClassID = runtimeEntityType.AddIndex(
                new[] { vBiStackCalculatorACClassID },
                name: "NCI_FK_FacilityBooking_VBiStackCalculatorACClassID");

            var nCI_FacilityBooking_InwardFacilityLotID_InOrderPosID = runtimeEntityType.AddIndex(
                new[] { inwardFacilityLotID, inOrderPosID },
                name: "NCI_FacilityBooking_InwardFacilityLotID_InOrderPosID");

            var nCI_FacilityBooking_ProdOrderPartslistPosID_InsertDate = runtimeEntityType.AddIndex(
                new[] { prodOrderPartslistPosID },
                name: "NCI_FacilityBooking_ProdOrderPartslistPosID_InsertDate");

            var nCI_FacilityBooking_ProdOrderPartslistPosID_OT = runtimeEntityType.AddIndex(
                new[] { prodOrderPartslistPosID },
                name: "NCI_FacilityBooking_ProdOrderPartslistPosID_OT");

            var nCI_FacilityBooking_ProdOrderPartslistPosRelationID_InsertDate = runtimeEntityType.AddIndex(
                new[] { prodOrderPartslistPosRelationID },
                name: "NCI_FacilityBooking_ProdOrderPartslistPosRelationID_InsertDate");

            var nCI_FacilityBooking_ProdOrderPartslistPosRelationID_OT = runtimeEntityType.AddIndex(
                new[] { prodOrderPartslistPosRelationID },
                name: "NCI_FacilityBooking_ProdOrderPartslistPosRelationID_OT");

            var uIX_FacilityBooking_FacilityBookingNo = runtimeEntityType.AddIndex(
                new[] { facilityBookingNo },
                name: "UIX_FacilityBooking_FacilityBookingNo",
                unique: true);
            uIX_FacilityBooking_FacilityBookingNo.AddAnnotation("Relational:Filter", null);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CPartnerCompanyID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CompanyID") }),
                principalEntityType);

            var cPartnerCompany = declaringEntityType.AddNavigation("CPartnerCompany",
                runtimeForeignKey,
                onDependent: true,
                typeof(Company),
                propertyInfo: typeof(FacilityBooking).GetProperty("CPartnerCompany", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_CPartnerCompany", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_CPartnerCompany = principalEntityType.AddNavigation("FacilityBooking_CPartnerCompany",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(Company).GetProperty("FacilityBooking_CPartnerCompany", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Company).GetField("_FacilityBooking_CPartnerCompany", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_CompanyID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("FacilityInventoryPosID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FacilityInventoryPosID") }),
                principalEntityType);

            var facilityInventoryPos = declaringEntityType.AddNavigation("FacilityInventoryPos",
                runtimeForeignKey,
                onDependent: true,
                typeof(FacilityInventoryPos),
                propertyInfo: typeof(FacilityBooking).GetProperty("FacilityInventoryPos", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_FacilityInventoryPos", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_FacilityInventoryPos = principalEntityType.AddNavigation("FacilityBooking_FacilityInventoryPos",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(FacilityInventoryPos).GetProperty("FacilityBooking_FacilityInventoryPos", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityInventoryPos).GetField("_FacilityBooking_FacilityInventoryPos", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_FacilityInventoryPosID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("HistoryID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("HistoryID") }),
                principalEntityType);

            var history = declaringEntityType.AddNavigation("History",
                runtimeForeignKey,
                onDependent: true,
                typeof(History),
                propertyInfo: typeof(FacilityBooking).GetProperty("History", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_History", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_History = principalEntityType.AddNavigation("FacilityBooking_History",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(History).GetProperty("FacilityBooking_History", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(History).GetField("_FacilityBooking_History", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_HistoryID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("InOrderPosID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("InOrderPosID") }),
                principalEntityType);

            var inOrderPos = declaringEntityType.AddNavigation("InOrderPos",
                runtimeForeignKey,
                onDependent: true,
                typeof(InOrderPos),
                propertyInfo: typeof(FacilityBooking).GetProperty("InOrderPos", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_InOrderPos", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_InOrderPos = principalEntityType.AddNavigation("FacilityBooking_InOrderPos",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(InOrderPos).GetProperty("FacilityBooking_InOrderPos", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InOrderPos).GetField("_FacilityBooking_InOrderPos", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_InOrderPosID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("InwardCompanyMaterialID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CompanyMaterialID") }),
                principalEntityType);

            var inwardCompanyMaterial = declaringEntityType.AddNavigation("InwardCompanyMaterial",
                runtimeForeignKey,
                onDependent: true,
                typeof(CompanyMaterial),
                propertyInfo: typeof(FacilityBooking).GetProperty("InwardCompanyMaterial", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_InwardCompanyMaterial", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_InwardCompanyMaterial = principalEntityType.AddNavigation("FacilityBooking_InwardCompanyMaterial",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(CompanyMaterial).GetProperty("FacilityBooking_InwardCompanyMaterial", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompanyMaterial).GetField("_FacilityBooking_InwardCompanyMaterial", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_InwardCompanyMaterialID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("InwardFacilityChargeID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FacilityChargeID") }),
                principalEntityType);

            var inwardFacilityCharge = declaringEntityType.AddNavigation("InwardFacilityCharge",
                runtimeForeignKey,
                onDependent: true,
                typeof(FacilityCharge),
                propertyInfo: typeof(FacilityBooking).GetProperty("InwardFacilityCharge", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_InwardFacilityCharge", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_InwardFacilityCharge = principalEntityType.AddNavigation("FacilityBooking_InwardFacilityCharge",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(FacilityCharge).GetProperty("FacilityBooking_InwardFacilityCharge", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_FacilityBooking_InwardFacilityCharge", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_InwardFacilityChargeID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("InwardFacilityID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FacilityID") }),
                principalEntityType);

            var inwardFacility = declaringEntityType.AddNavigation("InwardFacility",
                runtimeForeignKey,
                onDependent: true,
                typeof(Facility),
                propertyInfo: typeof(FacilityBooking).GetProperty("InwardFacility", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_InwardFacility", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_InwardFacility = principalEntityType.AddNavigation("FacilityBooking_InwardFacility",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(Facility).GetProperty("FacilityBooking_InwardFacility", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Facility).GetField("_FacilityBooking_InwardFacility", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_InwardFacilityID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey8(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("InwardFacilityLocationID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FacilityID") }),
                principalEntityType);

            var inwardFacilityLocation = declaringEntityType.AddNavigation("InwardFacilityLocation",
                runtimeForeignKey,
                onDependent: true,
                typeof(Facility),
                propertyInfo: typeof(FacilityBooking).GetProperty("InwardFacilityLocation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_InwardFacilityLocation", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_InwardFacilityLocation = principalEntityType.AddNavigation("FacilityBooking_InwardFacilityLocation",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(Facility).GetProperty("FacilityBooking_InwardFacilityLocation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Facility).GetField("_FacilityBooking_InwardFacilityLocation", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_InwardFacilityLocationID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey9(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("InwardFacilityLotID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FacilityLotID") }),
                principalEntityType);

            var inwardFacilityLot = declaringEntityType.AddNavigation("InwardFacilityLot",
                runtimeForeignKey,
                onDependent: true,
                typeof(FacilityLot),
                propertyInfo: typeof(FacilityBooking).GetProperty("InwardFacilityLot", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_InwardFacilityLot", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_InwardFacilityLot = principalEntityType.AddNavigation("FacilityBooking_InwardFacilityLot",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(FacilityLot).GetProperty("FacilityBooking_InwardFacilityLot", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityLot).GetField("_FacilityBooking_InwardFacilityLot", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_InwardFacilityLotID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey10(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("InwardMaterialID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MaterialID") }),
                principalEntityType);

            var inwardMaterial = declaringEntityType.AddNavigation("InwardMaterial",
                runtimeForeignKey,
                onDependent: true,
                typeof(Material),
                propertyInfo: typeof(FacilityBooking).GetProperty("InwardMaterial", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_InwardMaterial", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_InwardMaterial = principalEntityType.AddNavigation("FacilityBooking_InwardMaterial",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(Material).GetProperty("FacilityBooking_InwardMaterial", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_FacilityBooking_InwardMaterial", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_InwardMaterialID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey11(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("InwardPartslistID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PartslistID") }),
                principalEntityType);

            var inwardPartslist = declaringEntityType.AddNavigation("InwardPartslist",
                runtimeForeignKey,
                onDependent: true,
                typeof(Partslist),
                propertyInfo: typeof(FacilityBooking).GetProperty("InwardPartslist", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_InwardPartslist", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_InwardPartslist = principalEntityType.AddNavigation("FacilityBooking_InwardPartslist",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(Partslist).GetProperty("FacilityBooking_InwardPartslist", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Partslist).GetField("_FacilityBooking_InwardPartslist", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_InwardPartslistID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey12(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDBalancingModeID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDBalancingModeID") }),
                principalEntityType);

            var mDBalancingMode = declaringEntityType.AddNavigation("MDBalancingMode",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDBalancingMode),
                propertyInfo: typeof(FacilityBooking).GetProperty("MDBalancingMode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_MDBalancingMode", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_MDBalancingMode = principalEntityType.AddNavigation("FacilityBooking_MDBalancingMode",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(MDBalancingMode).GetProperty("FacilityBooking_MDBalancingMode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDBalancingMode).GetField("_FacilityBooking_MDBalancingMode", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_MDBalancingModeID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey13(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDBookingNotAvailableModeID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDBookingNotAvailableModeID") }),
                principalEntityType);

            var mDBookingNotAvailableMode = declaringEntityType.AddNavigation("MDBookingNotAvailableMode",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDBookingNotAvailableMode),
                propertyInfo: typeof(FacilityBooking).GetProperty("MDBookingNotAvailableMode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_MDBookingNotAvailableMode", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_MDBookingNotAvailableMode = principalEntityType.AddNavigation("FacilityBooking_MDBookingNotAvailableMode",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(MDBookingNotAvailableMode).GetProperty("FacilityBooking_MDBookingNotAvailableMode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDBookingNotAvailableMode).GetField("_FacilityBooking_MDBookingNotAvailableMode", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_MDBookingNotAvailableModeID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey14(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDMovementReasonID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDMovementReasonID") }),
                principalEntityType);

            var mDMovementReason = declaringEntityType.AddNavigation("MDMovementReason",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDMovementReason),
                propertyInfo: typeof(FacilityBooking).GetProperty("MDMovementReason", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_MDMovementReason", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_MDMovementReason = principalEntityType.AddNavigation("FacilityBooking_MDMovementReason",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(MDMovementReason).GetProperty("FacilityBooking_MDMovementReason", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDMovementReason).GetField("_FacilityBooking_MDMovementReason", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_MDMovementReasonID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey15(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDReleaseStateID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDReleaseStateID") }),
                principalEntityType);

            var mDReleaseState = declaringEntityType.AddNavigation("MDReleaseState",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDReleaseState),
                propertyInfo: typeof(FacilityBooking).GetProperty("MDReleaseState", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_MDReleaseState", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_MDReleaseState = principalEntityType.AddNavigation("FacilityBooking_MDReleaseState",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(MDReleaseState).GetProperty("FacilityBooking_MDReleaseState", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDReleaseState).GetField("_FacilityBooking_MDReleaseState", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_MDReleaseStateID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey16(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDReservationModeID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDReservationModeID") }),
                principalEntityType);

            var mDReservationMode = declaringEntityType.AddNavigation("MDReservationMode",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDReservationMode),
                propertyInfo: typeof(FacilityBooking).GetProperty("MDReservationMode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_MDReservationMode", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_MDReservationMode = principalEntityType.AddNavigation("FacilityBooking_MDReservationMode",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(MDReservationMode).GetProperty("FacilityBooking_MDReservationMode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDReservationMode).GetField("_FacilityBooking_MDReservationMode", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_MDReservationModeID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey17(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDUnitID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDUnitID") }),
                principalEntityType);

            var mDUnit = declaringEntityType.AddNavigation("MDUnit",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDUnit),
                propertyInfo: typeof(FacilityBooking).GetProperty("MDUnit", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_MDUnit", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_MDUnit = principalEntityType.AddNavigation("FacilityBooking_MDUnit",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(MDUnit).GetProperty("FacilityBooking_MDUnit", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDUnit).GetField("_FacilityBooking_MDUnit", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_MDUnitID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey18(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDZeroStockStateID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDZeroStockStateID") }),
                principalEntityType);

            var mDZeroStockState = declaringEntityType.AddNavigation("MDZeroStockState",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDZeroStockState),
                propertyInfo: typeof(FacilityBooking).GetProperty("MDZeroStockState", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_MDZeroStockState", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_MDZeroStockState = principalEntityType.AddNavigation("FacilityBooking_MDZeroStockState",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(MDZeroStockState).GetProperty("FacilityBooking_MDZeroStockState", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDZeroStockState).GetField("_FacilityBooking_MDZeroStockState", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_MDZeroStockStateID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey19(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("OutOrderPosID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("OutOrderPosID") }),
                principalEntityType);

            var outOrderPos = declaringEntityType.AddNavigation("OutOrderPos",
                runtimeForeignKey,
                onDependent: true,
                typeof(OutOrderPos),
                propertyInfo: typeof(FacilityBooking).GetProperty("OutOrderPos", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_OutOrderPos", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_OutOrderPos = principalEntityType.AddNavigation("FacilityBooking_OutOrderPos",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(OutOrderPos).GetProperty("FacilityBooking_OutOrderPos", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrderPos).GetField("_FacilityBooking_OutOrderPos", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_OutOrderPosID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey20(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("OutwardCompanyMaterialID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CompanyMaterialID") }),
                principalEntityType);

            var outwardCompanyMaterial = declaringEntityType.AddNavigation("OutwardCompanyMaterial",
                runtimeForeignKey,
                onDependent: true,
                typeof(CompanyMaterial),
                propertyInfo: typeof(FacilityBooking).GetProperty("OutwardCompanyMaterial", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_OutwardCompanyMaterial", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_OutwardCompanyMaterial = principalEntityType.AddNavigation("FacilityBooking_OutwardCompanyMaterial",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(CompanyMaterial).GetProperty("FacilityBooking_OutwardCompanyMaterial", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompanyMaterial).GetField("_FacilityBooking_OutwardCompanyMaterial", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_OutwardCompanyMaterialID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey21(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("OutwardFacilityChargeID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FacilityChargeID") }),
                principalEntityType);

            var outwardFacilityCharge = declaringEntityType.AddNavigation("OutwardFacilityCharge",
                runtimeForeignKey,
                onDependent: true,
                typeof(FacilityCharge),
                propertyInfo: typeof(FacilityBooking).GetProperty("OutwardFacilityCharge", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_OutwardFacilityCharge", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_OutwardFacilityCharge = principalEntityType.AddNavigation("FacilityBooking_OutwardFacilityCharge",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(FacilityCharge).GetProperty("FacilityBooking_OutwardFacilityCharge", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_FacilityBooking_OutwardFacilityCharge", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_OutwardFacilityChargeID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey22(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("OutwardFacilityID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FacilityID") }),
                principalEntityType);

            var outwardFacility = declaringEntityType.AddNavigation("OutwardFacility",
                runtimeForeignKey,
                onDependent: true,
                typeof(Facility),
                propertyInfo: typeof(FacilityBooking).GetProperty("OutwardFacility", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_OutwardFacility", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_OutwardFacility = principalEntityType.AddNavigation("FacilityBooking_OutwardFacility",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(Facility).GetProperty("FacilityBooking_OutwardFacility", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Facility).GetField("_FacilityBooking_OutwardFacility", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_OutwardFacilityID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey23(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("OutwardFacilityLocationID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FacilityID") }),
                principalEntityType);

            var outwardFacilityLocation = declaringEntityType.AddNavigation("OutwardFacilityLocation",
                runtimeForeignKey,
                onDependent: true,
                typeof(Facility),
                propertyInfo: typeof(FacilityBooking).GetProperty("OutwardFacilityLocation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_OutwardFacilityLocation", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_OutwardFacilityLocation = principalEntityType.AddNavigation("FacilityBooking_OutwardFacilityLocation",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(Facility).GetProperty("FacilityBooking_OutwardFacilityLocation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Facility).GetField("_FacilityBooking_OutwardFacilityLocation", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_OutwardFacilityLocationID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey24(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("OutwardFacilityLotID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FacilityLotID") }),
                principalEntityType);

            var outwardFacilityLot = declaringEntityType.AddNavigation("OutwardFacilityLot",
                runtimeForeignKey,
                onDependent: true,
                typeof(FacilityLot),
                propertyInfo: typeof(FacilityBooking).GetProperty("OutwardFacilityLot", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_OutwardFacilityLot", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_OutwardFacilityLot = principalEntityType.AddNavigation("FacilityBooking_OutwardFacilityLot",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(FacilityLot).GetProperty("FacilityBooking_OutwardFacilityLot", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityLot).GetField("_FacilityBooking_OutwardFacilityLot", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_OutwardFacilityLotID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey25(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("OutwardMaterialID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MaterialID") }),
                principalEntityType);

            var outwardMaterial = declaringEntityType.AddNavigation("OutwardMaterial",
                runtimeForeignKey,
                onDependent: true,
                typeof(Material),
                propertyInfo: typeof(FacilityBooking).GetProperty("OutwardMaterial", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_OutwardMaterial", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_OutwardMaterial = principalEntityType.AddNavigation("FacilityBooking_OutwardMaterial",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(Material).GetProperty("FacilityBooking_OutwardMaterial", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_FacilityBooking_OutwardMaterial", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_OutwardMaterialID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey26(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("OutwardPartslistID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PartslistID") }),
                principalEntityType);

            var outwardPartslist = declaringEntityType.AddNavigation("OutwardPartslist",
                runtimeForeignKey,
                onDependent: true,
                typeof(Partslist),
                propertyInfo: typeof(FacilityBooking).GetProperty("OutwardPartslist", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_OutwardPartslist", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_OutwardPartslist = principalEntityType.AddNavigation("FacilityBooking_OutwardPartslist",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(Partslist).GetProperty("FacilityBooking_OutwardPartslist", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Partslist).GetField("_FacilityBooking_OutwardPartslist", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_OutwardPartsListID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey27(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PickingPosID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PickingPosID") }),
                principalEntityType);

            var pickingPos = declaringEntityType.AddNavigation("PickingPos",
                runtimeForeignKey,
                onDependent: true,
                typeof(PickingPos),
                propertyInfo: typeof(FacilityBooking).GetProperty("PickingPos", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_PickingPos", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_PickingPos = principalEntityType.AddNavigation("FacilityBooking_PickingPos",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(PickingPos).GetProperty("FacilityBooking_PickingPos", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PickingPos).GetField("_FacilityBooking_PickingPos", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_PickingPosID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey28(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ProdOrderPartslistPosFacilityLotID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ProdOrderPartslistPosFacilityLotID") }),
                principalEntityType);

            var prodOrderPartslistPosFacilityLot = declaringEntityType.AddNavigation("ProdOrderPartslistPosFacilityLot",
                runtimeForeignKey,
                onDependent: true,
                typeof(ProdOrderPartslistPosFacilityLot),
                propertyInfo: typeof(FacilityBooking).GetProperty("ProdOrderPartslistPosFacilityLot", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_ProdOrderPartslistPosFacilityLot", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_ProdOrderPartslistPosFacilityLot = principalEntityType.AddNavigation("FacilityBooking_ProdOrderPartslistPosFacilityLot",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(ProdOrderPartslistPosFacilityLot).GetProperty("FacilityBooking_ProdOrderPartslistPosFacilityLot", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ProdOrderPartslistPosFacilityLot).GetField("_FacilityBooking_ProdOrderPartslistPosFacilityLot", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_ProdOrderPartslistPosFacilityLot");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey29(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ProdOrderPartslistPosID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ProdOrderPartslistPosID") }),
                principalEntityType);

            var prodOrderPartslistPos = declaringEntityType.AddNavigation("ProdOrderPartslistPos",
                runtimeForeignKey,
                onDependent: true,
                typeof(ProdOrderPartslistPos),
                propertyInfo: typeof(FacilityBooking).GetProperty("ProdOrderPartslistPos", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_ProdOrderPartslistPos", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_ProdOrderPartslistPos = principalEntityType.AddNavigation("FacilityBooking_ProdOrderPartslistPos",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(ProdOrderPartslistPos).GetProperty("FacilityBooking_ProdOrderPartslistPos", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ProdOrderPartslistPos).GetField("_FacilityBooking_ProdOrderPartslistPos", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_ProdOrderPartslistPosID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey30(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ProdOrderPartslistPosRelationID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ProdOrderPartslistPosRelationID") }),
                principalEntityType);

            var prodOrderPartslistPosRelation = declaringEntityType.AddNavigation("ProdOrderPartslistPosRelation",
                runtimeForeignKey,
                onDependent: true,
                typeof(ProdOrderPartslistPosRelation),
                propertyInfo: typeof(FacilityBooking).GetProperty("ProdOrderPartslistPosRelation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_ProdOrderPartslistPosRelation", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_ProdOrderPartslistPosRelation = principalEntityType.AddNavigation("FacilityBooking_ProdOrderPartslistPosRelation",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(ProdOrderPartslistPosRelation).GetProperty("FacilityBooking_ProdOrderPartslistPosRelation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ProdOrderPartslistPosRelation).GetField("_FacilityBooking_ProdOrderPartslistPosRelation", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_ProdOrderPartslistPosRelation");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey31(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("VBiStackCalculatorACClassID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ACClassID") }),
                principalEntityType);

            var vBiStackCalculatorACClass = declaringEntityType.AddNavigation("VBiStackCalculatorACClass",
                runtimeForeignKey,
                onDependent: true,
                typeof(ACClass),
                propertyInfo: typeof(FacilityBooking).GetProperty("VBiStackCalculatorACClass", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityBooking).GetField("_VBiStackCalculatorACClass", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityBooking_VBiStackCalculatorACClass = principalEntityType.AddNavigation("FacilityBooking_VBiStackCalculatorACClass",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityBooking>),
                propertyInfo: typeof(ACClass).GetProperty("FacilityBooking_VBiStackCalculatorACClass", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ACClass).GetField("_FacilityBooking_VBiStackCalculatorACClass", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityBooking_StackCalculatorACClassID");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "FacilityBooking");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
