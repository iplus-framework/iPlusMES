// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace gip.mes.datamodel
{
    [EntityFrameworkInternal]
    public partial class MaterialWFRelationEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "gip.mes.datamodel.MaterialWFRelation",
                typeof(MaterialWFRelation),
                baseEntityType,
                indexerPropertyInfo: RuntimeEntityType.FindIndexerProperty(typeof(MaterialWFRelation)),
                propertyCount: 5,
                navigationCount: 4,
                servicePropertyCount: 1,
                foreignKeyCount: 3,
                unnamedIndexCount: 1,
                namedIndexCount: 2,
                keyCount: 1);

            var materialWFRelationID = runtimeEntityType.AddProperty(
                "MaterialWFRelationID",
                typeof(Guid),
                propertyInfo: typeof(MaterialWFRelation).GetProperty("MaterialWFRelationID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialWFRelation).GetField("_MaterialWFRelationID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            materialWFRelationID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var materialWFID = runtimeEntityType.AddProperty(
                "MaterialWFID",
                typeof(Guid),
                propertyInfo: typeof(MaterialWFRelation).GetProperty("MaterialWFID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialWFRelation).GetField("_MaterialWFID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            materialWFID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var sequence = runtimeEntityType.AddProperty(
                "Sequence",
                typeof(int),
                propertyInfo: typeof(MaterialWFRelation).GetProperty("Sequence", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialWFRelation).GetField("_Sequence", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            sequence.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var sourceMaterialID = runtimeEntityType.AddProperty(
                "SourceMaterialID",
                typeof(Guid),
                propertyInfo: typeof(MaterialWFRelation).GetProperty("SourceMaterialID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialWFRelation).GetField("_SourceMaterialID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            sourceMaterialID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var targetMaterialID = runtimeEntityType.AddProperty(
                "TargetMaterialID",
                typeof(Guid),
                propertyInfo: typeof(MaterialWFRelation).GetProperty("TargetMaterialID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialWFRelation).GetField("_TargetMaterialID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            targetMaterialID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lazyLoader = runtimeEntityType.AddServiceProperty(
                "LazyLoader",
                propertyInfo: typeof(MaterialWFRelation).GetProperty("LazyLoader", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                serviceType: typeof(ILazyLoader));

            var key = runtimeEntityType.AddKey(
                new[] { materialWFRelationID });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { materialWFID });

            var nCI_FK_MaterialWFRelation_SourceMaterialID = runtimeEntityType.AddIndex(
                new[] { sourceMaterialID },
                name: "NCI_FK_MaterialWFRelation_SourceMaterialID");

            var nCI_FK_MaterialWFRelation_TargetMaterialID = runtimeEntityType.AddIndex(
                new[] { targetMaterialID },
                name: "NCI_FK_MaterialWFRelation_TargetMaterialID");

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MaterialWFID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MaterialWFID") }),
                principalEntityType,
                required: true);

            var materialWF = declaringEntityType.AddNavigation("MaterialWF",
                runtimeForeignKey,
                onDependent: true,
                typeof(MaterialWF),
                propertyInfo: typeof(MaterialWFRelation).GetProperty("MaterialWF", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialWFRelation).GetField("_MaterialWF", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var materialWFRelation_MaterialWF = principalEntityType.AddNavigation("MaterialWFRelation_MaterialWF",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<MaterialWFRelation>),
                propertyInfo: typeof(MaterialWF).GetProperty("MaterialWFRelation_MaterialWF", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialWF).GetField("_MaterialWFRelation_MaterialWF", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_MaterialWFRelation_MaterialWF");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SourceMaterialID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MaterialID") }),
                principalEntityType,
                required: true);

            var sourceMaterial = declaringEntityType.AddNavigation("SourceMaterial",
                runtimeForeignKey,
                onDependent: true,
                typeof(Material),
                propertyInfo: typeof(MaterialWFRelation).GetProperty("SourceMaterial", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialWFRelation).GetField("_SourceMaterial", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var materialWFRelation_SourceMaterial = principalEntityType.AddNavigation("MaterialWFRelation_SourceMaterial",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<MaterialWFRelation>),
                propertyInfo: typeof(Material).GetProperty("MaterialWFRelation_SourceMaterial", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_MaterialWFRelation_SourceMaterial", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_MaterialWFRelation_Material1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("TargetMaterialID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MaterialID") }),
                principalEntityType,
                required: true);

            var targetMaterial = declaringEntityType.AddNavigation("TargetMaterial",
                runtimeForeignKey,
                onDependent: true,
                typeof(Material),
                propertyInfo: typeof(MaterialWFRelation).GetProperty("TargetMaterial", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MaterialWFRelation).GetField("_TargetMaterial", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var materialWFRelation_TargetMaterial = principalEntityType.AddNavigation("MaterialWFRelation_TargetMaterial",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<MaterialWFRelation>),
                propertyInfo: typeof(Material).GetProperty("MaterialWFRelation_TargetMaterial", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_MaterialWFRelation_TargetMaterial", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_MaterialWFRelation_Material");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "MaterialWFRelation");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
