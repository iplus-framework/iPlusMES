// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using gip.core.datamodel;

#pragma warning disable 219, 612, 618
#nullable disable

namespace gip.mes.datamodel
{
    [EntityFrameworkInternal]
    public partial class InvoiceEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "gip.mes.datamodel.Invoice",
                typeof(Invoice),
                baseEntityType,
                changeTrackingStrategy: ChangeTrackingStrategy.ChangedNotifications,
                indexerPropertyInfo: RuntimeEntityType.FindIndexerProperty(typeof(Invoice)),
                propertyCount: 26,
                navigationCount: 12,
                servicePropertyCount: 1,
                foreignKeyCount: 11,
                unnamedIndexCount: 11,
                namedIndexCount: 1,
                keyCount: 1);

            var invoiceID = runtimeEntityType.AddProperty(
                "InvoiceID",
                typeof(Guid),
                propertyInfo: typeof(Invoice).GetProperty("InvoiceID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_InvoiceID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            invoiceID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var billingCompanyAddressID = runtimeEntityType.AddProperty(
                "BillingCompanyAddressID",
                typeof(Guid?),
                propertyInfo: typeof(Invoice).GetProperty("BillingCompanyAddressID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_BillingCompanyAddressID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            billingCompanyAddressID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var comment = runtimeEntityType.AddProperty(
                "Comment",
                typeof(string),
                propertyInfo: typeof(Invoice).GetProperty("Comment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_Comment", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true,
                unicode: false);
            comment.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var custRequestNo = runtimeEntityType.AddProperty(
                "CustRequestNo",
                typeof(string),
                propertyInfo: typeof(Invoice).GetProperty("CustRequestNo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_CustRequestNo", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true,
                maxLength: 50,
                unicode: false);
            custRequestNo.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var customerCompanyID = runtimeEntityType.AddProperty(
                "CustomerCompanyID",
                typeof(Guid),
                propertyInfo: typeof(Invoice).GetProperty("CustomerCompanyID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_CustomerCompanyID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            customerCompanyID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var deliveryCompanyAddressID = runtimeEntityType.AddProperty(
                "DeliveryCompanyAddressID",
                typeof(Guid?),
                propertyInfo: typeof(Invoice).GetProperty("DeliveryCompanyAddressID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_DeliveryCompanyAddressID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            deliveryCompanyAddressID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insertDate = runtimeEntityType.AddProperty(
                "InsertDate",
                typeof(DateTime),
                propertyInfo: typeof(Invoice).GetProperty("InsertDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_InsertDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            insertDate.AddAnnotation("Relational:ColumnType", "datetime");
            insertDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insertName = runtimeEntityType.AddProperty(
                "InsertName",
                typeof(string),
                propertyInfo: typeof(Invoice).GetProperty("InsertName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_InsertName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                maxLength: 20,
                unicode: false);
            insertName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var invoiceDate = runtimeEntityType.AddProperty(
                "InvoiceDate",
                typeof(DateTime),
                propertyInfo: typeof(Invoice).GetProperty("InvoiceDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_InvoiceDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            invoiceDate.AddAnnotation("Relational:ColumnType", "datetime");
            invoiceDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var invoiceNo = runtimeEntityType.AddProperty(
                "InvoiceNo",
                typeof(string),
                propertyInfo: typeof(Invoice).GetProperty("InvoiceNo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_InvoiceNo", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                maxLength: 50,
                unicode: false);
            invoiceNo.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var issuerCompanyAddressID = runtimeEntityType.AddProperty(
                "IssuerCompanyAddressID",
                typeof(Guid?),
                propertyInfo: typeof(Invoice).GetProperty("IssuerCompanyAddressID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_IssuerCompanyAddressID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            issuerCompanyAddressID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var issuerCompanyPersonID = runtimeEntityType.AddProperty(
                "IssuerCompanyPersonID",
                typeof(Guid?),
                propertyInfo: typeof(Invoice).GetProperty("IssuerCompanyPersonID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_IssuerCompanyPersonID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            issuerCompanyPersonID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDCurrencyExchangeID = runtimeEntityType.AddProperty(
                "MDCurrencyExchangeID",
                typeof(Guid?),
                propertyInfo: typeof(Invoice).GetProperty("MDCurrencyExchangeID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_MDCurrencyExchangeID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            mDCurrencyExchangeID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDCurrencyID = runtimeEntityType.AddProperty(
                "MDCurrencyID",
                typeof(Guid),
                propertyInfo: typeof(Invoice).GetProperty("MDCurrencyID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_MDCurrencyID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            mDCurrencyID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDInvoiceStateID = runtimeEntityType.AddProperty(
                "MDInvoiceStateID",
                typeof(Guid),
                propertyInfo: typeof(Invoice).GetProperty("MDInvoiceStateID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_MDInvoiceStateID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            mDInvoiceStateID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDInvoiceTypeID = runtimeEntityType.AddProperty(
                "MDInvoiceTypeID",
                typeof(Guid),
                propertyInfo: typeof(Invoice).GetProperty("MDInvoiceTypeID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_MDInvoiceTypeID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            mDInvoiceTypeID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDTermOfPaymentID = runtimeEntityType.AddProperty(
                "MDTermOfPaymentID",
                typeof(Guid?),
                propertyInfo: typeof(Invoice).GetProperty("MDTermOfPaymentID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_MDTermOfPaymentID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            mDTermOfPaymentID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outOrderID = runtimeEntityType.AddProperty(
                "OutOrderID",
                typeof(Guid?),
                propertyInfo: typeof(Invoice).GetProperty("OutOrderID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_OutOrderID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            outOrderID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var priceGross = runtimeEntityType.AddProperty(
                "PriceGross",
                typeof(decimal),
                propertyInfo: typeof(Invoice).GetProperty("PriceGross", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_PriceGross", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                sentinel: 0m);
            priceGross.AddAnnotation("Relational:ColumnType", "money");
            priceGross.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var priceNet = runtimeEntityType.AddProperty(
                "PriceNet",
                typeof(decimal),
                propertyInfo: typeof(Invoice).GetProperty("PriceNet", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_PriceNet", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                sentinel: 0m);
            priceNet.AddAnnotation("Relational:ColumnType", "money");
            priceNet.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var salesTax = runtimeEntityType.AddProperty(
                "SalesTax",
                typeof(float),
                propertyInfo: typeof(Invoice).GetProperty("SalesTax", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_SalesTax", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                sentinel: 0f);
            salesTax.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var updateDate = runtimeEntityType.AddProperty(
                "UpdateDate",
                typeof(DateTime),
                propertyInfo: typeof(Invoice).GetProperty("UpdateDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_UpdateDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            updateDate.AddAnnotation("Relational:ColumnType", "datetime");
            updateDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var updateName = runtimeEntityType.AddProperty(
                "UpdateName",
                typeof(string),
                propertyInfo: typeof(Invoice).GetProperty("UpdateName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_UpdateName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                maxLength: 20,
                unicode: false);
            updateName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var xMLConfig = runtimeEntityType.AddProperty(
                "XMLConfig",
                typeof(string),
                propertyInfo: typeof(VBEntityObject).GetProperty("XMLConfig", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_XMLConfig", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            xMLConfig.AddAnnotation("Relational:ColumnType", "text");
            xMLConfig.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var xMLDesignEnd = runtimeEntityType.AddProperty(
                "XMLDesignEnd",
                typeof(string),
                propertyInfo: typeof(Invoice).GetProperty("XMLDesignEnd", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_XMLDesignEnd", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            xMLDesignEnd.AddAnnotation("Relational:ColumnType", "text");
            xMLDesignEnd.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var xMLDesignStart = runtimeEntityType.AddProperty(
                "XMLDesignStart",
                typeof(string),
                propertyInfo: typeof(Invoice).GetProperty("XMLDesignStart", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_XMLDesignStart", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true);
            xMLDesignStart.AddAnnotation("Relational:ColumnType", "text");
            xMLDesignStart.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lazyLoader = runtimeEntityType.AddServiceProperty(
                "LazyLoader",
                propertyInfo: typeof(Invoice).GetProperty("LazyLoader", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                serviceType: typeof(ILazyLoader));

            var key = runtimeEntityType.AddKey(
                new[] { invoiceID });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { billingCompanyAddressID });

            var index0 = runtimeEntityType.AddIndex(
                new[] { customerCompanyID });

            var index1 = runtimeEntityType.AddIndex(
                new[] { deliveryCompanyAddressID });

            var index2 = runtimeEntityType.AddIndex(
                new[] { issuerCompanyAddressID });

            var index3 = runtimeEntityType.AddIndex(
                new[] { issuerCompanyPersonID });

            var index4 = runtimeEntityType.AddIndex(
                new[] { mDCurrencyExchangeID });

            var index5 = runtimeEntityType.AddIndex(
                new[] { mDCurrencyID });

            var index6 = runtimeEntityType.AddIndex(
                new[] { mDInvoiceStateID });

            var index7 = runtimeEntityType.AddIndex(
                new[] { mDInvoiceTypeID });

            var index8 = runtimeEntityType.AddIndex(
                new[] { mDTermOfPaymentID });

            var index9 = runtimeEntityType.AddIndex(
                new[] { outOrderID });

            var uX_InvoiceNo = runtimeEntityType.AddIndex(
                new[] { invoiceNo },
                name: "UX_InvoiceNo",
                unique: true);
            uX_InvoiceNo.AddAnnotation("Relational:Filter", null);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("BillingCompanyAddressID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CompanyAddressID") }),
                principalEntityType);

            var billingCompanyAddress = declaringEntityType.AddNavigation("BillingCompanyAddress",
                runtimeForeignKey,
                onDependent: true,
                typeof(CompanyAddress),
                propertyInfo: typeof(Invoice).GetProperty("BillingCompanyAddress", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_BillingCompanyAddress", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var invoice_BillingCompanyAddress = principalEntityType.AddNavigation("Invoice_BillingCompanyAddress",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Invoice>),
                propertyInfo: typeof(CompanyAddress).GetProperty("Invoice_BillingCompanyAddress", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompanyAddress).GetField("_Invoice_BillingCompanyAddress", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Invoice_CompanyAddressID1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CustomerCompanyID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CompanyID") }),
                principalEntityType,
                required: true);

            var customerCompany = declaringEntityType.AddNavigation("CustomerCompany",
                runtimeForeignKey,
                onDependent: true,
                typeof(Company),
                propertyInfo: typeof(Invoice).GetProperty("CustomerCompany", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_CustomerCompany", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var invoice_CustomerCompany = principalEntityType.AddNavigation("Invoice_CustomerCompany",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Invoice>),
                propertyInfo: typeof(Company).GetProperty("Invoice_CustomerCompany", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Company).GetField("_Invoice_CustomerCompany", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Invoice_CompanyID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("DeliveryCompanyAddressID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CompanyAddressID") }),
                principalEntityType);

            var deliveryCompanyAddress = declaringEntityType.AddNavigation("DeliveryCompanyAddress",
                runtimeForeignKey,
                onDependent: true,
                typeof(CompanyAddress),
                propertyInfo: typeof(Invoice).GetProperty("DeliveryCompanyAddress", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_DeliveryCompanyAddress", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var invoice_DeliveryCompanyAddress = principalEntityType.AddNavigation("Invoice_DeliveryCompanyAddress",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Invoice>),
                propertyInfo: typeof(CompanyAddress).GetProperty("Invoice_DeliveryCompanyAddress", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompanyAddress).GetField("_Invoice_DeliveryCompanyAddress", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Invoice_CompanyAddressID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("IssuerCompanyAddressID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CompanyAddressID") }),
                principalEntityType);

            var issuerCompanyAddress = declaringEntityType.AddNavigation("IssuerCompanyAddress",
                runtimeForeignKey,
                onDependent: true,
                typeof(CompanyAddress),
                propertyInfo: typeof(Invoice).GetProperty("IssuerCompanyAddress", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_IssuerCompanyAddress", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var invoice_IssuerCompanyAddress = principalEntityType.AddNavigation("Invoice_IssuerCompanyAddress",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Invoice>),
                propertyInfo: typeof(CompanyAddress).GetProperty("Invoice_IssuerCompanyAddress", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompanyAddress).GetField("_Invoice_IssuerCompanyAddress", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Invoice_CompanyAddress");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("IssuerCompanyPersonID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CompanyPersonID") }),
                principalEntityType);

            var issuerCompanyPerson = declaringEntityType.AddNavigation("IssuerCompanyPerson",
                runtimeForeignKey,
                onDependent: true,
                typeof(CompanyPerson),
                propertyInfo: typeof(Invoice).GetProperty("IssuerCompanyPerson", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_IssuerCompanyPerson", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var invoice_IssuerCompanyPerson = principalEntityType.AddNavigation("Invoice_IssuerCompanyPerson",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Invoice>),
                propertyInfo: typeof(CompanyPerson).GetProperty("Invoice_IssuerCompanyPerson", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompanyPerson).GetField("_Invoice_IssuerCompanyPerson", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Invoice_CompanyPerson");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDCurrencyExchangeID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDCurrencyExchangeID") }),
                principalEntityType);

            var mDCurrencyExchange = declaringEntityType.AddNavigation("MDCurrencyExchange",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDCurrencyExchange),
                propertyInfo: typeof(Invoice).GetProperty("MDCurrencyExchange", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_MDCurrencyExchange", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var invoice_MDCurrencyExchange = principalEntityType.AddNavigation("Invoice_MDCurrencyExchange",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Invoice>),
                propertyInfo: typeof(MDCurrencyExchange).GetProperty("Invoice_MDCurrencyExchange", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDCurrencyExchange).GetField("_Invoice_MDCurrencyExchange", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Invoice_MDCurrencyExchangeID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDCurrencyID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDCurrencyID") }),
                principalEntityType,
                required: true);

            var mDCurrency = declaringEntityType.AddNavigation("MDCurrency",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDCurrency),
                propertyInfo: typeof(Invoice).GetProperty("MDCurrency", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_MDCurrency", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var invoice_MDCurrency = principalEntityType.AddNavigation("Invoice_MDCurrency",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Invoice>),
                propertyInfo: typeof(MDCurrency).GetProperty("Invoice_MDCurrency", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDCurrency).GetField("_Invoice_MDCurrency", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Invoice_MDCurrencyID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey8(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDInvoiceStateID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDInvoiceStateID") }),
                principalEntityType,
                required: true);

            var mDInvoiceState = declaringEntityType.AddNavigation("MDInvoiceState",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDInvoiceState),
                propertyInfo: typeof(Invoice).GetProperty("MDInvoiceState", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_MDInvoiceState", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var invoice_MDInvoiceState = principalEntityType.AddNavigation("Invoice_MDInvoiceState",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Invoice>),
                propertyInfo: typeof(MDInvoiceState).GetProperty("Invoice_MDInvoiceState", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDInvoiceState).GetField("_Invoice_MDInvoiceState", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Invoice_MDInvoiceStateID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey9(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDInvoiceTypeID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDInvoiceTypeID") }),
                principalEntityType,
                required: true);

            var mDInvoiceType = declaringEntityType.AddNavigation("MDInvoiceType",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDInvoiceType),
                propertyInfo: typeof(Invoice).GetProperty("MDInvoiceType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_MDInvoiceType", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var invoice_MDInvoiceType = principalEntityType.AddNavigation("Invoice_MDInvoiceType",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Invoice>),
                propertyInfo: typeof(MDInvoiceType).GetProperty("Invoice_MDInvoiceType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDInvoiceType).GetField("_Invoice_MDInvoiceType", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Invoice_MDInvoiceTypeID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey10(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDTermOfPaymentID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDTermOfPaymentID") }),
                principalEntityType);

            var mDTermOfPayment = declaringEntityType.AddNavigation("MDTermOfPayment",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDTermOfPayment),
                propertyInfo: typeof(Invoice).GetProperty("MDTermOfPayment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_MDTermOfPayment", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var invoice_MDTermOfPayment = principalEntityType.AddNavigation("Invoice_MDTermOfPayment",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Invoice>),
                propertyInfo: typeof(MDTermOfPayment).GetProperty("Invoice_MDTermOfPayment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDTermOfPayment).GetField("_Invoice_MDTermOfPayment", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Invoice_MDTermOfPayment");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey11(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("OutOrderID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("OutOrderID") }),
                principalEntityType);

            var outOrder = declaringEntityType.AddNavigation("OutOrder",
                runtimeForeignKey,
                onDependent: true,
                typeof(OutOrder),
                propertyInfo: typeof(Invoice).GetProperty("OutOrder", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Invoice).GetField("_OutOrder", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var invoice_OutOrder = principalEntityType.AddNavigation("Invoice_OutOrder",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Invoice>),
                propertyInfo: typeof(OutOrder).GetProperty("Invoice_OutOrder", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OutOrder).GetField("_Invoice_OutOrder", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Invoice_OutOrderID");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Invoice");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
