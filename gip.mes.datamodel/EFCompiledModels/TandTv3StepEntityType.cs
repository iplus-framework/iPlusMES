// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace gip.mes.datamodel
{
    [EntityFrameworkInternal]
    public partial class TandTv3StepEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "gip.mes.datamodel.TandTv3Step",
                typeof(TandTv3Step),
                baseEntityType,
                changeTrackingStrategy: ChangeTrackingStrategy.ChangedNotifications,
                indexerPropertyInfo: RuntimeEntityType.FindIndexerProperty(typeof(TandTv3Step)),
                propertyCount: 4,
                navigationCount: 2,
                servicePropertyCount: 1,
                foreignKeyCount: 1,
                unnamedIndexCount: 1,
                keyCount: 1);

            var tandTv3StepID = runtimeEntityType.AddProperty(
                "TandTv3StepID",
                typeof(Guid),
                propertyInfo: typeof(TandTv3Step).GetProperty("TandTv3StepID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TandTv3Step).GetField("_TandTv3StepID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            tandTv3StepID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var stepName = runtimeEntityType.AddProperty(
                "StepName",
                typeof(string),
                propertyInfo: typeof(TandTv3Step).GetProperty("StepName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TandTv3Step).GetField("_StepName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                nullable: true,
                maxLength: 150,
                unicode: false);
            stepName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var stepNo = runtimeEntityType.AddProperty(
                "StepNo",
                typeof(int),
                propertyInfo: typeof(TandTv3Step).GetProperty("StepNo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TandTv3Step).GetField("_StepNo", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                sentinel: 0);
            stepNo.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var tandTv3FilterTrackingID = runtimeEntityType.AddProperty(
                "TandTv3FilterTrackingID",
                typeof(Guid),
                propertyInfo: typeof(TandTv3Step).GetProperty("TandTv3FilterTrackingID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TandTv3Step).GetField("_TandTv3FilterTrackingID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            tandTv3FilterTrackingID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lazyLoader = runtimeEntityType.AddServiceProperty(
                "LazyLoader",
                propertyInfo: typeof(TandTv3Step).GetProperty("LazyLoader", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                serviceType: typeof(ILazyLoader));

            var key = runtimeEntityType.AddKey(
                new[] { tandTv3StepID });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { tandTv3FilterTrackingID });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("TandTv3FilterTrackingID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("TandTv3FilterTrackingID") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var tandTv3FilterTracking = declaringEntityType.AddNavigation("TandTv3FilterTracking",
                runtimeForeignKey,
                onDependent: true,
                typeof(TandTv3FilterTracking),
                propertyInfo: typeof(TandTv3Step).GetProperty("TandTv3FilterTracking", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TandTv3Step).GetField("_TandTv3FilterTracking", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var tandTv3Step_TandTv3FilterTracking = principalEntityType.AddNavigation("TandTv3Step_TandTv3FilterTracking",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<TandTv3Step>),
                propertyInfo: typeof(TandTv3FilterTracking).GetProperty("TandTv3Step_TandTv3FilterTracking", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TandTv3FilterTracking).GetField("_TandTv3Step_TandTv3FilterTracking", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_TandTv3Step_TandTv3FilterTrackingID");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "TandTv3Step");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
