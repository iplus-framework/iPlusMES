// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using gip.core.datamodel;

#pragma warning disable 219, 612, 618
#nullable disable

namespace gip.mes.datamodel
{
    [EntityFrameworkInternal]
    public partial class FacilityChargeEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "gip.mes.datamodel.FacilityCharge",
                typeof(FacilityCharge),
                baseEntityType,
                indexerPropertyInfo: RuntimeEntityType.FindIndexerProperty(typeof(FacilityCharge)),
                propertyCount: 40,
                navigationCount: 15,
                servicePropertyCount: 1,
                foreignKeyCount: 8,
                unnamedIndexCount: 2,
                namedIndexCount: 6,
                keyCount: 1);

            var facilityChargeID = runtimeEntityType.AddProperty(
                "FacilityChargeID",
                typeof(Guid),
                propertyInfo: typeof(FacilityCharge).GetProperty("FacilityChargeID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_FacilityChargeID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            facilityChargeID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var cPartnerCompanyMaterialID = runtimeEntityType.AddProperty(
                "CPartnerCompanyMaterialID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityCharge).GetProperty("CPartnerCompanyMaterialID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_CPartnerCompanyMaterialID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            cPartnerCompanyMaterialID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var comment = runtimeEntityType.AddProperty(
                "Comment",
                typeof(string),
                propertyInfo: typeof(FacilityCharge).GetProperty("Comment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_Comment", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                unicode: false);
            comment.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var companyMaterialID = runtimeEntityType.AddProperty(
                "CompanyMaterialID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityCharge).GetProperty("CompanyMaterialID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_CompanyMaterialID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            companyMaterialID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var costFix = runtimeEntityType.AddProperty(
                "CostFix",
                typeof(decimal),
                propertyInfo: typeof(FacilityCharge).GetProperty("CostFix", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_CostFix", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0m);
            costFix.AddAnnotation("Relational:ColumnType", "money");
            costFix.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var costGeneral = runtimeEntityType.AddProperty(
                "CostGeneral",
                typeof(decimal),
                propertyInfo: typeof(FacilityCharge).GetProperty("CostGeneral", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_CostGeneral", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0m);
            costGeneral.AddAnnotation("Relational:ColumnType", "money");
            costGeneral.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var costHandlingFix = runtimeEntityType.AddProperty(
                "CostHandlingFix",
                typeof(decimal),
                propertyInfo: typeof(FacilityCharge).GetProperty("CostHandlingFix", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_CostHandlingFix", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0m);
            costHandlingFix.AddAnnotation("Relational:ColumnType", "money");
            costHandlingFix.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var costHandlingVar = runtimeEntityType.AddProperty(
                "CostHandlingVar",
                typeof(decimal),
                propertyInfo: typeof(FacilityCharge).GetProperty("CostHandlingVar", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_CostHandlingVar", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0m);
            costHandlingVar.AddAnnotation("Relational:ColumnType", "money");
            costHandlingVar.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var costLoss = runtimeEntityType.AddProperty(
                "CostLoss",
                typeof(decimal),
                propertyInfo: typeof(FacilityCharge).GetProperty("CostLoss", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_CostLoss", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0m);
            costLoss.AddAnnotation("Relational:ColumnType", "money");
            costLoss.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var costMat = runtimeEntityType.AddProperty(
                "CostMat",
                typeof(decimal),
                propertyInfo: typeof(FacilityCharge).GetProperty("CostMat", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_CostMat", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0m);
            costMat.AddAnnotation("Relational:ColumnType", "money");
            costMat.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var costPack = runtimeEntityType.AddProperty(
                "CostPack",
                typeof(decimal),
                propertyInfo: typeof(FacilityCharge).GetProperty("CostPack", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_CostPack", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0m);
            costPack.AddAnnotation("Relational:ColumnType", "money");
            costPack.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var costReQuantity = runtimeEntityType.AddProperty(
                "CostReQuantity",
                typeof(decimal),
                propertyInfo: typeof(FacilityCharge).GetProperty("CostReQuantity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_CostReQuantity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0m);
            costReQuantity.AddAnnotation("Relational:ColumnType", "money");
            costReQuantity.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var costVar = runtimeEntityType.AddProperty(
                "CostVar",
                typeof(decimal),
                propertyInfo: typeof(FacilityCharge).GetProperty("CostVar", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_CostVar", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0m);
            costVar.AddAnnotation("Relational:ColumnType", "money");
            costVar.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var expirationDate = runtimeEntityType.AddProperty(
                "ExpirationDate",
                typeof(DateTime?),
                propertyInfo: typeof(FacilityCharge).GetProperty("ExpirationDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_ExpirationDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            expirationDate.AddAnnotation("Relational:ColumnType", "datetime");
            expirationDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var facilityChargeSortNo = runtimeEntityType.AddProperty(
                "FacilityChargeSortNo",
                typeof(int),
                propertyInfo: typeof(FacilityCharge).GetProperty("FacilityChargeSortNo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_FacilityChargeSortNo", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            facilityChargeSortNo.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var facilityID = runtimeEntityType.AddProperty(
                "FacilityID",
                typeof(Guid),
                propertyInfo: typeof(FacilityCharge).GetProperty("FacilityID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_FacilityID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            facilityID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var facilityLotID = runtimeEntityType.AddProperty(
                "FacilityLotID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityCharge).GetProperty("FacilityLotID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_FacilityLotID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            facilityLotID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var fillingDate = runtimeEntityType.AddProperty(
                "FillingDate",
                typeof(DateTime?),
                propertyInfo: typeof(FacilityCharge).GetProperty("FillingDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_FillingDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            fillingDate.AddAnnotation("Relational:ColumnType", "datetime");
            fillingDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var handlingUnit = runtimeEntityType.AddProperty(
                "HandlingUnit",
                typeof(string),
                propertyInfo: typeof(FacilityCharge).GetProperty("HandlingUnit", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_HandlingUnit", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            handlingUnit.AddAnnotation("Relational:ColumnType", "text");
            handlingUnit.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insertDate = runtimeEntityType.AddProperty(
                "InsertDate",
                typeof(DateTime),
                propertyInfo: typeof(FacilityCharge).GetProperty("InsertDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_InsertDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            insertDate.AddAnnotation("Relational:ColumnType", "datetime");
            insertDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insertName = runtimeEntityType.AddProperty(
                "InsertName",
                typeof(string),
                propertyInfo: typeof(FacilityCharge).GetProperty("InsertName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_InsertName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 20,
                unicode: false);
            insertName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isEnabled = runtimeEntityType.AddProperty(
                "IsEnabled",
                typeof(bool),
                propertyInfo: typeof(FacilityCharge).GetProperty("IsEnabled", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_IsEnabled", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            isEnabled.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var @lock = runtimeEntityType.AddProperty(
                "Lock",
                typeof(bool),
                propertyInfo: typeof(FacilityCharge).GetProperty("Lock", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_Lock", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            @lock.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDReleaseStateID = runtimeEntityType.AddProperty(
                "MDReleaseStateID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityCharge).GetProperty("MDReleaseStateID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_MDReleaseStateID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            mDReleaseStateID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDUnitID = runtimeEntityType.AddProperty(
                "MDUnitID",
                typeof(Guid),
                propertyInfo: typeof(FacilityCharge).GetProperty("MDUnitID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_MDUnitID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            mDUnitID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var materialID = runtimeEntityType.AddProperty(
                "MaterialID",
                typeof(Guid),
                propertyInfo: typeof(FacilityCharge).GetProperty("MaterialID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_MaterialID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            materialID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var notAvailable = runtimeEntityType.AddProperty(
                "NotAvailable",
                typeof(bool),
                propertyInfo: typeof(FacilityCharge).GetProperty("NotAvailable", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_NotAvailable", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            notAvailable.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var partslistID = runtimeEntityType.AddProperty(
                "PartslistID",
                typeof(Guid?),
                propertyInfo: typeof(FacilityCharge).GetProperty("PartslistID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_PartslistID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            partslistID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var productionDate = runtimeEntityType.AddProperty(
                "ProductionDate",
                typeof(DateTime?),
                propertyInfo: typeof(FacilityCharge).GetProperty("ProductionDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_ProductionDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            productionDate.AddAnnotation("Relational:ColumnType", "datetime");
            productionDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reservedInwardQuantity = runtimeEntityType.AddProperty(
                "ReservedInwardQuantity",
                typeof(double),
                propertyInfo: typeof(FacilityCharge).GetProperty("ReservedInwardQuantity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_ReservedInwardQuantity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0.0);
            reservedInwardQuantity.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reservedOutwardQuantity = runtimeEntityType.AddProperty(
                "ReservedOutwardQuantity",
                typeof(double),
                propertyInfo: typeof(FacilityCharge).GetProperty("ReservedOutwardQuantity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_ReservedOutwardQuantity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0.0);
            reservedOutwardQuantity.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var rowVersion = runtimeEntityType.AddProperty(
                "RowVersion",
                typeof(byte[]),
                propertyInfo: typeof(FacilityCharge).GetProperty("RowVersion", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_RowVersion", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                concurrencyToken: true,
                valueGenerated: ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior: PropertySaveBehavior.Ignore,
                afterSaveBehavior: PropertySaveBehavior.Ignore);
            rowVersion.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var splitNo = runtimeEntityType.AddProperty(
                "SplitNo",
                typeof(int),
                propertyInfo: typeof(FacilityCharge).GetProperty("SplitNo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_SplitNo", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            splitNo.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var stockQuantity = runtimeEntityType.AddProperty(
                "StockQuantity",
                typeof(double),
                propertyInfo: typeof(FacilityCharge).GetProperty("StockQuantity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_StockQuantity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0.0);
            stockQuantity.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var stockQuantityUOM = runtimeEntityType.AddProperty(
                "StockQuantityUOM",
                typeof(double),
                propertyInfo: typeof(FacilityCharge).GetProperty("StockQuantityUOM", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_StockQuantityUOM", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0.0);
            stockQuantityUOM.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var stockQuantityUOMAmb = runtimeEntityType.AddProperty(
                "StockQuantityUOMAmb",
                typeof(double),
                propertyInfo: typeof(FacilityCharge).GetProperty("StockQuantityUOMAmb", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_StockQuantityUOMAmb", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0.0);
            stockQuantityUOMAmb.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var storageLife = runtimeEntityType.AddProperty(
                "StorageLife",
                typeof(short),
                propertyInfo: typeof(FacilityCharge).GetProperty("StorageLife", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_StorageLife", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: (short)0);
            storageLife.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var updateDate = runtimeEntityType.AddProperty(
                "UpdateDate",
                typeof(DateTime),
                propertyInfo: typeof(FacilityCharge).GetProperty("UpdateDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_UpdateDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            updateDate.AddAnnotation("Relational:ColumnType", "datetime");
            updateDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var updateName = runtimeEntityType.AddProperty(
                "UpdateName",
                typeof(string),
                propertyInfo: typeof(FacilityCharge).GetProperty("UpdateName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_UpdateName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 20,
                unicode: false);
            updateName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var xMLConfig = runtimeEntityType.AddProperty(
                "XMLConfig",
                typeof(string),
                propertyInfo: typeof(VBEntityObject).GetProperty("XMLConfig", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_XMLConfig", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            xMLConfig.AddAnnotation("Relational:ColumnType", "text");
            xMLConfig.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lazyLoader = runtimeEntityType.AddServiceProperty(
                "LazyLoader",
                propertyInfo: typeof(FacilityCharge).GetProperty("LazyLoader", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                serviceType: typeof(ILazyLoader));

            var key = runtimeEntityType.AddKey(
                new[] { facilityChargeID });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { facilityID });

            var index0 = runtimeEntityType.AddIndex(
                new[] { facilityLotID });

            var nCI_FK_FacilityCharge_CPartnerCompanyMaterialID = runtimeEntityType.AddIndex(
                new[] { cPartnerCompanyMaterialID },
                name: "NCI_FK_FacilityCharge_CPartnerCompanyMaterialID");

            var nCI_FK_FacilityCharge_CompanyMaterialID = runtimeEntityType.AddIndex(
                new[] { companyMaterialID },
                name: "NCI_FK_FacilityCharge_CompanyMaterialID");

            var nCI_FK_FacilityCharge_MDReleaseStateID = runtimeEntityType.AddIndex(
                new[] { mDReleaseStateID },
                name: "NCI_FK_FacilityCharge_MDReleaseStateID");

            var nCI_FK_FacilityCharge_MDUnitID = runtimeEntityType.AddIndex(
                new[] { mDUnitID },
                name: "NCI_FK_FacilityCharge_MDUnitID");

            var nCI_FK_FacilityCharge_PartslistID = runtimeEntityType.AddIndex(
                new[] { partslistID },
                name: "NCI_FK_FacilityCharge_PartslistID");

            var uIX_FacilityCharge = runtimeEntityType.AddIndex(
                new[] { materialID, facilityID, facilityLotID, splitNo, facilityChargeSortNo },
                name: "UIX_FacilityCharge",
                unique: true);
            uIX_FacilityCharge.AddAnnotation("Relational:Filter", "[FacilityLotID] IS NOT NULL");

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CPartnerCompanyMaterialID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CompanyMaterialID") }),
                principalEntityType);

            var cPartnerCompanyMaterial = declaringEntityType.AddNavigation("CPartnerCompanyMaterial",
                runtimeForeignKey,
                onDependent: true,
                typeof(CompanyMaterial),
                propertyInfo: typeof(FacilityCharge).GetProperty("CPartnerCompanyMaterial", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_CPartnerCompanyMaterial", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityCharge_CPartnerCompanyMaterial = principalEntityType.AddNavigation("FacilityCharge_CPartnerCompanyMaterial",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityCharge>),
                propertyInfo: typeof(CompanyMaterial).GetProperty("FacilityCharge_CPartnerCompanyMaterial", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompanyMaterial).GetField("_FacilityCharge_CPartnerCompanyMaterial", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityCharge_CPartnerCompMatID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CompanyMaterialID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CompanyMaterialID") }),
                principalEntityType);

            var companyMaterial = declaringEntityType.AddNavigation("CompanyMaterial",
                runtimeForeignKey,
                onDependent: true,
                typeof(CompanyMaterial),
                propertyInfo: typeof(FacilityCharge).GetProperty("CompanyMaterial", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_CompanyMaterial", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityCharge_CompanyMaterial = principalEntityType.AddNavigation("FacilityCharge_CompanyMaterial",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityCharge>),
                propertyInfo: typeof(CompanyMaterial).GetProperty("FacilityCharge_CompanyMaterial", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompanyMaterial).GetField("_FacilityCharge_CompanyMaterial", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityCharge_CompanyMaterialID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("FacilityID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FacilityID") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var facility = declaringEntityType.AddNavigation("Facility",
                runtimeForeignKey,
                onDependent: true,
                typeof(Facility),
                propertyInfo: typeof(FacilityCharge).GetProperty("Facility", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_Facility", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityCharge_Facility = principalEntityType.AddNavigation("FacilityCharge_Facility",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityCharge>),
                propertyInfo: typeof(Facility).GetProperty("FacilityCharge_Facility", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Facility).GetField("_FacilityCharge_Facility", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityCharge_FacilityID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("FacilityLotID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FacilityLotID") }),
                principalEntityType);

            var facilityLot = declaringEntityType.AddNavigation("FacilityLot",
                runtimeForeignKey,
                onDependent: true,
                typeof(FacilityLot),
                propertyInfo: typeof(FacilityCharge).GetProperty("FacilityLot", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_FacilityLot", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityCharge_FacilityLot = principalEntityType.AddNavigation("FacilityCharge_FacilityLot",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityCharge>),
                propertyInfo: typeof(FacilityLot).GetProperty("FacilityCharge_FacilityLot", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityLot).GetField("_FacilityCharge_FacilityLot", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityCharge_FacilityLotID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDReleaseStateID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDReleaseStateID") }),
                principalEntityType);

            var mDReleaseState = declaringEntityType.AddNavigation("MDReleaseState",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDReleaseState),
                propertyInfo: typeof(FacilityCharge).GetProperty("MDReleaseState", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_MDReleaseState", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityCharge_MDReleaseState = principalEntityType.AddNavigation("FacilityCharge_MDReleaseState",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityCharge>),
                propertyInfo: typeof(MDReleaseState).GetProperty("FacilityCharge_MDReleaseState", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDReleaseState).GetField("_FacilityCharge_MDReleaseState", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityCharge_MDReleaseStateID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDUnitID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDUnitID") }),
                principalEntityType,
                required: true);

            var mDUnit = declaringEntityType.AddNavigation("MDUnit",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDUnit),
                propertyInfo: typeof(FacilityCharge).GetProperty("MDUnit", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_MDUnit", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityCharge_MDUnit = principalEntityType.AddNavigation("FacilityCharge_MDUnit",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityCharge>),
                propertyInfo: typeof(MDUnit).GetProperty("FacilityCharge_MDUnit", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDUnit).GetField("_FacilityCharge_MDUnit", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityCharge_MDUnitID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MaterialID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MaterialID") }),
                principalEntityType,
                required: true);

            var material = declaringEntityType.AddNavigation("Material",
                runtimeForeignKey,
                onDependent: true,
                typeof(Material),
                propertyInfo: typeof(FacilityCharge).GetProperty("Material", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_Material", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityCharge_Material = principalEntityType.AddNavigation("FacilityCharge_Material",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityCharge>),
                propertyInfo: typeof(Material).GetProperty("FacilityCharge_Material", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Material).GetField("_FacilityCharge_Material", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityCharge_MaterialID");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey8(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PartslistID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PartslistID") }),
                principalEntityType);

            var partslist = declaringEntityType.AddNavigation("Partslist",
                runtimeForeignKey,
                onDependent: true,
                typeof(Partslist),
                propertyInfo: typeof(FacilityCharge).GetProperty("Partslist", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCharge).GetField("_Partslist", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var facilityCharge_Partslist = principalEntityType.AddNavigation("FacilityCharge_Partslist",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<FacilityCharge>),
                propertyInfo: typeof(Partslist).GetProperty("FacilityCharge_Partslist", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Partslist).GetField("_FacilityCharge_Partslist", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FacilityCharge_PartsListID");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "FacilityCharge");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
