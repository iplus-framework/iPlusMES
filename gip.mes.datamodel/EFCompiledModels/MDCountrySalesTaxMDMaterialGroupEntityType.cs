// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace gip.mes.datamodel
{
    [EntityFrameworkInternal]
    public partial class MDCountrySalesTaxMDMaterialGroupEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "gip.mes.datamodel.MDCountrySalesTaxMDMaterialGroup",
                typeof(MDCountrySalesTaxMDMaterialGroup),
                baseEntityType,
                indexerPropertyInfo: RuntimeEntityType.FindIndexerProperty(typeof(MDCountrySalesTaxMDMaterialGroup)),
                propertyCount: 4,
                navigationCount: 5,
                servicePropertyCount: 1,
                foreignKeyCount: 2,
                unnamedIndexCount: 1,
                namedIndexCount: 1,
                keyCount: 1);

            var mDCountrySalesTaxMDMaterialGroupID = runtimeEntityType.AddProperty(
                "MDCountrySalesTaxMDMaterialGroupID",
                typeof(Guid),
                propertyInfo: typeof(MDCountrySalesTaxMDMaterialGroup).GetProperty("MDCountrySalesTaxMDMaterialGroupID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDCountrySalesTaxMDMaterialGroup).GetField("_MDCountrySalesTaxMDMaterialGroupID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            mDCountrySalesTaxMDMaterialGroupID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDCountrySalesTaxID = runtimeEntityType.AddProperty(
                "MDCountrySalesTaxID",
                typeof(Guid),
                propertyInfo: typeof(MDCountrySalesTaxMDMaterialGroup).GetProperty("MDCountrySalesTaxID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDCountrySalesTaxMDMaterialGroup).GetField("_MDCountrySalesTaxID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            mDCountrySalesTaxID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mDMaterialGroupID = runtimeEntityType.AddProperty(
                "MDMaterialGroupID",
                typeof(Guid),
                propertyInfo: typeof(MDCountrySalesTaxMDMaterialGroup).GetProperty("MDMaterialGroupID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDCountrySalesTaxMDMaterialGroup).GetField("_MDMaterialGroupID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            mDMaterialGroupID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var salesTax = runtimeEntityType.AddProperty(
                "SalesTax",
                typeof(decimal),
                propertyInfo: typeof(MDCountrySalesTaxMDMaterialGroup).GetProperty("SalesTax", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDCountrySalesTaxMDMaterialGroup).GetField("_SalesTax", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0m);
            salesTax.AddAnnotation("Relational:ColumnType", "money");
            salesTax.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lazyLoader = runtimeEntityType.AddServiceProperty(
                "LazyLoader",
                propertyInfo: typeof(MDCountrySalesTaxMDMaterialGroup).GetProperty("LazyLoader", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                serviceType: typeof(ILazyLoader));

            var key = runtimeEntityType.AddKey(
                new[] { mDCountrySalesTaxMDMaterialGroupID });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { mDMaterialGroupID });

            var uX_MDCountrySalesTax_MDMaterialGroup = runtimeEntityType.AddIndex(
                new[] { mDCountrySalesTaxID, mDMaterialGroupID },
                name: "UX_MDCountrySalesTax_MDMaterialGroup",
                unique: true);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDCountrySalesTaxID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDCountrySalesTaxID") }),
                principalEntityType,
                required: true);

            var mDCountrySalesTax = declaringEntityType.AddNavigation("MDCountrySalesTax",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDCountrySalesTax),
                propertyInfo: typeof(MDCountrySalesTaxMDMaterialGroup).GetProperty("MDCountrySalesTax", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDCountrySalesTaxMDMaterialGroup).GetField("_MDCountrySalesTax", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var mDCountrySalesTaxMDMaterialGroup_MDCountrySalesTax = principalEntityType.AddNavigation("MDCountrySalesTaxMDMaterialGroup_MDCountrySalesTax",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<MDCountrySalesTaxMDMaterialGroup>),
                propertyInfo: typeof(MDCountrySalesTax).GetProperty("MDCountrySalesTaxMDMaterialGroup_MDCountrySalesTax", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDCountrySalesTax).GetField("_MDCountrySalesTaxMDMaterialGroup_MDCountrySalesTax", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_MDCountrySalesTaxMDMaterialGroup_MDCountrySalesTax");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MDMaterialGroupID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MDMaterialGroupID") }),
                principalEntityType,
                required: true);

            var mDMaterialGroup = declaringEntityType.AddNavigation("MDMaterialGroup",
                runtimeForeignKey,
                onDependent: true,
                typeof(MDMaterialGroup),
                propertyInfo: typeof(MDCountrySalesTaxMDMaterialGroup).GetProperty("MDMaterialGroup", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDCountrySalesTaxMDMaterialGroup).GetField("_MDMaterialGroup", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var mDCountrySalesTaxMDMaterialGroup_MDMaterialGroup = principalEntityType.AddNavigation("MDCountrySalesTaxMDMaterialGroup_MDMaterialGroup",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<MDCountrySalesTaxMDMaterialGroup>),
                propertyInfo: typeof(MDMaterialGroup).GetProperty("MDCountrySalesTaxMDMaterialGroup_MDMaterialGroup", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MDMaterialGroup).GetField("_MDCountrySalesTaxMDMaterialGroup_MDMaterialGroup", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_MDCountrySalesTaxMDMaterialGroup_MDMaterialGroup");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "MDCountrySalesTaxMDMaterialGroup");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
